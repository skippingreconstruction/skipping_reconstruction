// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: substrait/algebra.proto

#include "substrait/algebra.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace substrait {
PROTOBUF_CONSTEXPR RelCommon_Direct::RelCommon_Direct(
    ::_pbi::ConstantInitialized) {}
struct RelCommon_DirectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RelCommon_DirectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RelCommon_DirectDefaultTypeInternal() {}
  union {
    RelCommon_Direct _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RelCommon_DirectDefaultTypeInternal _RelCommon_Direct_default_instance_;
PROTOBUF_CONSTEXPR RelCommon_Emit::RelCommon_Emit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.output_mapping_)*/{}
  , /*decltype(_impl_._output_mapping_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RelCommon_EmitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RelCommon_EmitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RelCommon_EmitDefaultTypeInternal() {}
  union {
    RelCommon_Emit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RelCommon_EmitDefaultTypeInternal _RelCommon_Emit_default_instance_;
PROTOBUF_CONSTEXPR RelCommon_Hint_Stats::RelCommon_Hint_Stats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.advanced_extension_)*/nullptr
  , /*decltype(_impl_.row_count_)*/0
  , /*decltype(_impl_.record_size_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RelCommon_Hint_StatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RelCommon_Hint_StatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RelCommon_Hint_StatsDefaultTypeInternal() {}
  union {
    RelCommon_Hint_Stats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RelCommon_Hint_StatsDefaultTypeInternal _RelCommon_Hint_Stats_default_instance_;
PROTOBUF_CONSTEXPR RelCommon_Hint_RuntimeConstraint::RelCommon_Hint_RuntimeConstraint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.advanced_extension_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RelCommon_Hint_RuntimeConstraintDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RelCommon_Hint_RuntimeConstraintDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RelCommon_Hint_RuntimeConstraintDefaultTypeInternal() {}
  union {
    RelCommon_Hint_RuntimeConstraint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RelCommon_Hint_RuntimeConstraintDefaultTypeInternal _RelCommon_Hint_RuntimeConstraint_default_instance_;
PROTOBUF_CONSTEXPR RelCommon_Hint::RelCommon_Hint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stats_)*/nullptr
  , /*decltype(_impl_.constraint_)*/nullptr
  , /*decltype(_impl_.advanced_extension_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RelCommon_HintDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RelCommon_HintDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RelCommon_HintDefaultTypeInternal() {}
  union {
    RelCommon_Hint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RelCommon_HintDefaultTypeInternal _RelCommon_Hint_default_instance_;
PROTOBUF_CONSTEXPR RelCommon::RelCommon(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hint_)*/nullptr
  , /*decltype(_impl_.advanced_extension_)*/nullptr
  , /*decltype(_impl_.emit_kind_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct RelCommonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RelCommonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RelCommonDefaultTypeInternal() {}
  union {
    RelCommon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RelCommonDefaultTypeInternal _RelCommon_default_instance_;
PROTOBUF_CONSTEXPR ReadRel_NamedTable::ReadRel_NamedTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.names_)*/{}
  , /*decltype(_impl_.advanced_extension_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReadRel_NamedTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadRel_NamedTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadRel_NamedTableDefaultTypeInternal() {}
  union {
    ReadRel_NamedTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadRel_NamedTableDefaultTypeInternal _ReadRel_NamedTable_default_instance_;
PROTOBUF_CONSTEXPR ReadRel_VirtualTable::ReadRel_VirtualTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReadRel_VirtualTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadRel_VirtualTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadRel_VirtualTableDefaultTypeInternal() {}
  union {
    ReadRel_VirtualTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadRel_VirtualTableDefaultTypeInternal _ReadRel_VirtualTable_default_instance_;
PROTOBUF_CONSTEXPR ReadRel_ExtensionTable::ReadRel_ExtensionTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.detail_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReadRel_ExtensionTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadRel_ExtensionTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadRel_ExtensionTableDefaultTypeInternal() {}
  union {
    ReadRel_ExtensionTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadRel_ExtensionTableDefaultTypeInternal _ReadRel_ExtensionTable_default_instance_;
PROTOBUF_CONSTEXPR ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions(
    ::_pbi::ConstantInitialized) {}
struct ReadRel_LocalFiles_FileOrFiles_ParquetReadOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadRel_LocalFiles_FileOrFiles_ParquetReadOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadRel_LocalFiles_FileOrFiles_ParquetReadOptionsDefaultTypeInternal() {}
  union {
    ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadRel_LocalFiles_FileOrFiles_ParquetReadOptionsDefaultTypeInternal _ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions_default_instance_;
PROTOBUF_CONSTEXPR ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions(
    ::_pbi::ConstantInitialized) {}
struct ReadRel_LocalFiles_FileOrFiles_ArrowReadOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadRel_LocalFiles_FileOrFiles_ArrowReadOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadRel_LocalFiles_FileOrFiles_ArrowReadOptionsDefaultTypeInternal() {}
  union {
    ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadRel_LocalFiles_FileOrFiles_ArrowReadOptionsDefaultTypeInternal _ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions_default_instance_;
PROTOBUF_CONSTEXPR ReadRel_LocalFiles_FileOrFiles_OrcReadOptions::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions(
    ::_pbi::ConstantInitialized) {}
struct ReadRel_LocalFiles_FileOrFiles_OrcReadOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadRel_LocalFiles_FileOrFiles_OrcReadOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadRel_LocalFiles_FileOrFiles_OrcReadOptionsDefaultTypeInternal() {}
  union {
    ReadRel_LocalFiles_FileOrFiles_OrcReadOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadRel_LocalFiles_FileOrFiles_OrcReadOptionsDefaultTypeInternal _ReadRel_LocalFiles_FileOrFiles_OrcReadOptions_default_instance_;
PROTOBUF_CONSTEXPR ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions(
    ::_pbi::ConstantInitialized) {}
struct ReadRel_LocalFiles_FileOrFiles_DwrfReadOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadRel_LocalFiles_FileOrFiles_DwrfReadOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadRel_LocalFiles_FileOrFiles_DwrfReadOptionsDefaultTypeInternal() {}
  union {
    ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadRel_LocalFiles_FileOrFiles_DwrfReadOptionsDefaultTypeInternal _ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions_default_instance_;
PROTOBUF_CONSTEXPR ReadRel_LocalFiles_FileOrFiles::ReadRel_LocalFiles_FileOrFiles(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.partition_index_)*/uint64_t{0u}
  , /*decltype(_impl_.start_)*/uint64_t{0u}
  , /*decltype(_impl_.length_)*/uint64_t{0u}
  , /*decltype(_impl_.path_type_)*/{}
  , /*decltype(_impl_.file_format_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ReadRel_LocalFiles_FileOrFilesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadRel_LocalFiles_FileOrFilesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadRel_LocalFiles_FileOrFilesDefaultTypeInternal() {}
  union {
    ReadRel_LocalFiles_FileOrFiles _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadRel_LocalFiles_FileOrFilesDefaultTypeInternal _ReadRel_LocalFiles_FileOrFiles_default_instance_;
PROTOBUF_CONSTEXPR ReadRel_LocalFiles::ReadRel_LocalFiles(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.advanced_extension_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReadRel_LocalFilesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadRel_LocalFilesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadRel_LocalFilesDefaultTypeInternal() {}
  union {
    ReadRel_LocalFiles _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadRel_LocalFilesDefaultTypeInternal _ReadRel_LocalFiles_default_instance_;
PROTOBUF_CONSTEXPR ReadRel::ReadRel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.common_)*/nullptr
  , /*decltype(_impl_.base_schema_)*/nullptr
  , /*decltype(_impl_.filter_)*/nullptr
  , /*decltype(_impl_.projection_)*/nullptr
  , /*decltype(_impl_.advanced_extension_)*/nullptr
  , /*decltype(_impl_.read_type_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ReadRelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadRelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadRelDefaultTypeInternal() {}
  union {
    ReadRel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadRelDefaultTypeInternal _ReadRel_default_instance_;
PROTOBUF_CONSTEXPR ProjectRel::ProjectRel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.expressions_)*/{}
  , /*decltype(_impl_.common_)*/nullptr
  , /*decltype(_impl_.input_)*/nullptr
  , /*decltype(_impl_.advanced_extension_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProjectRelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProjectRelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProjectRelDefaultTypeInternal() {}
  union {
    ProjectRel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProjectRelDefaultTypeInternal _ProjectRel_default_instance_;
PROTOBUF_CONSTEXPR JoinRel::JoinRel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.common_)*/nullptr
  , /*decltype(_impl_.left_)*/nullptr
  , /*decltype(_impl_.right_)*/nullptr
  , /*decltype(_impl_.expression_)*/nullptr
  , /*decltype(_impl_.post_join_filter_)*/nullptr
  , /*decltype(_impl_.advanced_extension_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JoinRelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JoinRelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JoinRelDefaultTypeInternal() {}
  union {
    JoinRel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JoinRelDefaultTypeInternal _JoinRel_default_instance_;
PROTOBUF_CONSTEXPR CrossRel::CrossRel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.common_)*/nullptr
  , /*decltype(_impl_.left_)*/nullptr
  , /*decltype(_impl_.right_)*/nullptr
  , /*decltype(_impl_.advanced_extension_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CrossRelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CrossRelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CrossRelDefaultTypeInternal() {}
  union {
    CrossRel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CrossRelDefaultTypeInternal _CrossRel_default_instance_;
PROTOBUF_CONSTEXPR FetchRel::FetchRel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.common_)*/nullptr
  , /*decltype(_impl_.input_)*/nullptr
  , /*decltype(_impl_.advanced_extension_)*/nullptr
  , /*decltype(_impl_.offset_)*/int64_t{0}
  , /*decltype(_impl_.count_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FetchRelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FetchRelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FetchRelDefaultTypeInternal() {}
  union {
    FetchRel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FetchRelDefaultTypeInternal _FetchRel_default_instance_;
PROTOBUF_CONSTEXPR AggregateRel_Grouping::AggregateRel_Grouping(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.grouping_expressions_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AggregateRel_GroupingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggregateRel_GroupingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggregateRel_GroupingDefaultTypeInternal() {}
  union {
    AggregateRel_Grouping _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggregateRel_GroupingDefaultTypeInternal _AggregateRel_Grouping_default_instance_;
PROTOBUF_CONSTEXPR AggregateRel_Measure::AggregateRel_Measure(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.measure_)*/nullptr
  , /*decltype(_impl_.filter_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AggregateRel_MeasureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggregateRel_MeasureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggregateRel_MeasureDefaultTypeInternal() {}
  union {
    AggregateRel_Measure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggregateRel_MeasureDefaultTypeInternal _AggregateRel_Measure_default_instance_;
PROTOBUF_CONSTEXPR AggregateRel::AggregateRel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.groupings_)*/{}
  , /*decltype(_impl_.measures_)*/{}
  , /*decltype(_impl_.common_)*/nullptr
  , /*decltype(_impl_.input_)*/nullptr
  , /*decltype(_impl_.advanced_extension_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AggregateRelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggregateRelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggregateRelDefaultTypeInternal() {}
  union {
    AggregateRel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggregateRelDefaultTypeInternal _AggregateRel_default_instance_;
PROTOBUF_CONSTEXPR SortRel::SortRel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sorts_)*/{}
  , /*decltype(_impl_.common_)*/nullptr
  , /*decltype(_impl_.input_)*/nullptr
  , /*decltype(_impl_.advanced_extension_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SortRelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SortRelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SortRelDefaultTypeInternal() {}
  union {
    SortRel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SortRelDefaultTypeInternal _SortRel_default_instance_;
PROTOBUF_CONSTEXPR FilterRel::FilterRel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.common_)*/nullptr
  , /*decltype(_impl_.input_)*/nullptr
  , /*decltype(_impl_.condition_)*/nullptr
  , /*decltype(_impl_.advanced_extension_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FilterRelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FilterRelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FilterRelDefaultTypeInternal() {}
  union {
    FilterRel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FilterRelDefaultTypeInternal _FilterRel_default_instance_;
PROTOBUF_CONSTEXPR SetRel::SetRel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.inputs_)*/{}
  , /*decltype(_impl_.common_)*/nullptr
  , /*decltype(_impl_.advanced_extension_)*/nullptr
  , /*decltype(_impl_.op_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetRelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRelDefaultTypeInternal() {}
  union {
    SetRel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRelDefaultTypeInternal _SetRel_default_instance_;
PROTOBUF_CONSTEXPR ExtensionSingleRel::ExtensionSingleRel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.common_)*/nullptr
  , /*decltype(_impl_.input_)*/nullptr
  , /*decltype(_impl_.detail_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExtensionSingleRelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtensionSingleRelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtensionSingleRelDefaultTypeInternal() {}
  union {
    ExtensionSingleRel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtensionSingleRelDefaultTypeInternal _ExtensionSingleRel_default_instance_;
PROTOBUF_CONSTEXPR ExtensionLeafRel::ExtensionLeafRel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.common_)*/nullptr
  , /*decltype(_impl_.detail_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExtensionLeafRelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtensionLeafRelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtensionLeafRelDefaultTypeInternal() {}
  union {
    ExtensionLeafRel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtensionLeafRelDefaultTypeInternal _ExtensionLeafRel_default_instance_;
PROTOBUF_CONSTEXPR ExtensionMultiRel::ExtensionMultiRel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.inputs_)*/{}
  , /*decltype(_impl_.common_)*/nullptr
  , /*decltype(_impl_.detail_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExtensionMultiRelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtensionMultiRelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtensionMultiRelDefaultTypeInternal() {}
  union {
    ExtensionMultiRel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtensionMultiRelDefaultTypeInternal _ExtensionMultiRel_default_instance_;
PROTOBUF_CONSTEXPR ExchangeRel_ScatterFields::ExchangeRel_ScatterFields(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fields_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExchangeRel_ScatterFieldsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExchangeRel_ScatterFieldsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExchangeRel_ScatterFieldsDefaultTypeInternal() {}
  union {
    ExchangeRel_ScatterFields _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExchangeRel_ScatterFieldsDefaultTypeInternal _ExchangeRel_ScatterFields_default_instance_;
PROTOBUF_CONSTEXPR ExchangeRel_SingleBucketExpression::ExchangeRel_SingleBucketExpression(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.expression_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExchangeRel_SingleBucketExpressionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExchangeRel_SingleBucketExpressionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExchangeRel_SingleBucketExpressionDefaultTypeInternal() {}
  union {
    ExchangeRel_SingleBucketExpression _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExchangeRel_SingleBucketExpressionDefaultTypeInternal _ExchangeRel_SingleBucketExpression_default_instance_;
PROTOBUF_CONSTEXPR ExchangeRel_MultiBucketExpression::ExchangeRel_MultiBucketExpression(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.expression_)*/nullptr
  , /*decltype(_impl_.constrained_to_count_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExchangeRel_MultiBucketExpressionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExchangeRel_MultiBucketExpressionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExchangeRel_MultiBucketExpressionDefaultTypeInternal() {}
  union {
    ExchangeRel_MultiBucketExpression _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExchangeRel_MultiBucketExpressionDefaultTypeInternal _ExchangeRel_MultiBucketExpression_default_instance_;
PROTOBUF_CONSTEXPR ExchangeRel_Broadcast::ExchangeRel_Broadcast(
    ::_pbi::ConstantInitialized) {}
struct ExchangeRel_BroadcastDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExchangeRel_BroadcastDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExchangeRel_BroadcastDefaultTypeInternal() {}
  union {
    ExchangeRel_Broadcast _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExchangeRel_BroadcastDefaultTypeInternal _ExchangeRel_Broadcast_default_instance_;
PROTOBUF_CONSTEXPR ExchangeRel_RoundRobin::ExchangeRel_RoundRobin(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.exact_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExchangeRel_RoundRobinDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExchangeRel_RoundRobinDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExchangeRel_RoundRobinDefaultTypeInternal() {}
  union {
    ExchangeRel_RoundRobin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExchangeRel_RoundRobinDefaultTypeInternal _ExchangeRel_RoundRobin_default_instance_;
PROTOBUF_CONSTEXPR ExchangeRel_ExchangeTarget::ExchangeRel_ExchangeTarget(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.partition_id_)*/{}
  , /*decltype(_impl_._partition_id_cached_byte_size_)*/{0}
  , /*decltype(_impl_.target_type_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ExchangeRel_ExchangeTargetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExchangeRel_ExchangeTargetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExchangeRel_ExchangeTargetDefaultTypeInternal() {}
  union {
    ExchangeRel_ExchangeTarget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExchangeRel_ExchangeTargetDefaultTypeInternal _ExchangeRel_ExchangeTarget_default_instance_;
PROTOBUF_CONSTEXPR ExchangeRel::ExchangeRel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.targets_)*/{}
  , /*decltype(_impl_.common_)*/nullptr
  , /*decltype(_impl_.input_)*/nullptr
  , /*decltype(_impl_.advanced_extension_)*/nullptr
  , /*decltype(_impl_.partition_count_)*/0
  , /*decltype(_impl_.exchange_kind_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ExchangeRelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExchangeRelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExchangeRelDefaultTypeInternal() {}
  union {
    ExchangeRel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExchangeRelDefaultTypeInternal _ExchangeRel_default_instance_;
PROTOBUF_CONSTEXPR RelRoot::RelRoot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.names_)*/{}
  , /*decltype(_impl_.input_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RelRootDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RelRootDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RelRootDefaultTypeInternal() {}
  union {
    RelRoot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RelRootDefaultTypeInternal _RelRoot_default_instance_;
PROTOBUF_CONSTEXPR Rel::Rel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rel_type_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct RelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RelDefaultTypeInternal() {}
  union {
    Rel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RelDefaultTypeInternal _Rel_default_instance_;
PROTOBUF_CONSTEXPR NamedObjectWrite::NamedObjectWrite(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.names_)*/{}
  , /*decltype(_impl_.advanced_extension_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NamedObjectWriteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NamedObjectWriteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NamedObjectWriteDefaultTypeInternal() {}
  union {
    NamedObjectWrite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NamedObjectWriteDefaultTypeInternal _NamedObjectWrite_default_instance_;
PROTOBUF_CONSTEXPR ExtensionObject::ExtensionObject(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.detail_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExtensionObjectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtensionObjectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtensionObjectDefaultTypeInternal() {}
  union {
    ExtensionObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtensionObjectDefaultTypeInternal _ExtensionObject_default_instance_;
PROTOBUF_CONSTEXPR DdlRel::DdlRel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.table_schema_)*/nullptr
  , /*decltype(_impl_.table_defaults_)*/nullptr
  , /*decltype(_impl_.view_definition_)*/nullptr
  , /*decltype(_impl_.object_)*/0
  , /*decltype(_impl_.op_)*/0
  , /*decltype(_impl_.write_type_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct DdlRelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DdlRelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DdlRelDefaultTypeInternal() {}
  union {
    DdlRel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DdlRelDefaultTypeInternal _DdlRel_default_instance_;
PROTOBUF_CONSTEXPR WriteRel::WriteRel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.table_schema_)*/nullptr
  , /*decltype(_impl_.input_)*/nullptr
  , /*decltype(_impl_.op_)*/0
  , /*decltype(_impl_.output_)*/0
  , /*decltype(_impl_.write_type_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct WriteRelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WriteRelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WriteRelDefaultTypeInternal() {}
  union {
    WriteRel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WriteRelDefaultTypeInternal _WriteRel_default_instance_;
PROTOBUF_CONSTEXPR FunctionArgument_Enum::FunctionArgument_Enum(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.enum_kind_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct FunctionArgument_EnumDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FunctionArgument_EnumDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FunctionArgument_EnumDefaultTypeInternal() {}
  union {
    FunctionArgument_Enum _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FunctionArgument_EnumDefaultTypeInternal _FunctionArgument_Enum_default_instance_;
PROTOBUF_CONSTEXPR FunctionArgument::FunctionArgument(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.arg_type_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct FunctionArgumentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FunctionArgumentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FunctionArgumentDefaultTypeInternal() {}
  union {
    FunctionArgument _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FunctionArgumentDefaultTypeInternal _FunctionArgument_default_instance_;
PROTOBUF_CONSTEXPR Expression_Enum_Empty::Expression_Enum_Empty(
    ::_pbi::ConstantInitialized) {}
struct Expression_Enum_EmptyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_Enum_EmptyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_Enum_EmptyDefaultTypeInternal() {}
  union {
    Expression_Enum_Empty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_Enum_EmptyDefaultTypeInternal _Expression_Enum_Empty_default_instance_;
PROTOBUF_CONSTEXPR Expression_Enum::Expression_Enum(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.enum_kind_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct Expression_EnumDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_EnumDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_EnumDefaultTypeInternal() {}
  union {
    Expression_Enum _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_EnumDefaultTypeInternal _Expression_Enum_default_instance_;
PROTOBUF_CONSTEXPR Expression_Literal_VarChar::Expression_Literal_VarChar(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.length_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Expression_Literal_VarCharDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_Literal_VarCharDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_Literal_VarCharDefaultTypeInternal() {}
  union {
    Expression_Literal_VarChar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_Literal_VarCharDefaultTypeInternal _Expression_Literal_VarChar_default_instance_;
PROTOBUF_CONSTEXPR Expression_Literal_Decimal::Expression_Literal_Decimal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.precision_)*/0
  , /*decltype(_impl_.scale_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Expression_Literal_DecimalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_Literal_DecimalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_Literal_DecimalDefaultTypeInternal() {}
  union {
    Expression_Literal_Decimal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_Literal_DecimalDefaultTypeInternal _Expression_Literal_Decimal_default_instance_;
PROTOBUF_CONSTEXPR Expression_Literal_Map_KeyValue::Expression_Literal_Map_KeyValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/nullptr
  , /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Expression_Literal_Map_KeyValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_Literal_Map_KeyValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_Literal_Map_KeyValueDefaultTypeInternal() {}
  union {
    Expression_Literal_Map_KeyValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_Literal_Map_KeyValueDefaultTypeInternal _Expression_Literal_Map_KeyValue_default_instance_;
PROTOBUF_CONSTEXPR Expression_Literal_Map::Expression_Literal_Map(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_values_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Expression_Literal_MapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_Literal_MapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_Literal_MapDefaultTypeInternal() {}
  union {
    Expression_Literal_Map _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_Literal_MapDefaultTypeInternal _Expression_Literal_Map_default_instance_;
PROTOBUF_CONSTEXPR Expression_Literal_IntervalYearToMonth::Expression_Literal_IntervalYearToMonth(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.years_)*/0
  , /*decltype(_impl_.months_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Expression_Literal_IntervalYearToMonthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_Literal_IntervalYearToMonthDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_Literal_IntervalYearToMonthDefaultTypeInternal() {}
  union {
    Expression_Literal_IntervalYearToMonth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_Literal_IntervalYearToMonthDefaultTypeInternal _Expression_Literal_IntervalYearToMonth_default_instance_;
PROTOBUF_CONSTEXPR Expression_Literal_IntervalDayToSecond::Expression_Literal_IntervalDayToSecond(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.days_)*/0
  , /*decltype(_impl_.seconds_)*/0
  , /*decltype(_impl_.microseconds_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Expression_Literal_IntervalDayToSecondDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_Literal_IntervalDayToSecondDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_Literal_IntervalDayToSecondDefaultTypeInternal() {}
  union {
    Expression_Literal_IntervalDayToSecond _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_Literal_IntervalDayToSecondDefaultTypeInternal _Expression_Literal_IntervalDayToSecond_default_instance_;
PROTOBUF_CONSTEXPR Expression_Literal_Struct::Expression_Literal_Struct(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fields_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Expression_Literal_StructDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_Literal_StructDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_Literal_StructDefaultTypeInternal() {}
  union {
    Expression_Literal_Struct _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_Literal_StructDefaultTypeInternal _Expression_Literal_Struct_default_instance_;
PROTOBUF_CONSTEXPR Expression_Literal_List::Expression_Literal_List(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Expression_Literal_ListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_Literal_ListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_Literal_ListDefaultTypeInternal() {}
  union {
    Expression_Literal_List _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_Literal_ListDefaultTypeInternal _Expression_Literal_List_default_instance_;
PROTOBUF_CONSTEXPR Expression_Literal_UserDefined::Expression_Literal_UserDefined(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_parameters_)*/{}
  , /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_.type_reference_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Expression_Literal_UserDefinedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_Literal_UserDefinedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_Literal_UserDefinedDefaultTypeInternal() {}
  union {
    Expression_Literal_UserDefined _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_Literal_UserDefinedDefaultTypeInternal _Expression_Literal_UserDefined_default_instance_;
PROTOBUF_CONSTEXPR Expression_Literal::Expression_Literal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nullable_)*/false
  , /*decltype(_impl_.type_variation_reference_)*/0u
  , /*decltype(_impl_.literal_type_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct Expression_LiteralDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_LiteralDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_LiteralDefaultTypeInternal() {}
  union {
    Expression_Literal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_LiteralDefaultTypeInternal _Expression_Literal_default_instance_;
PROTOBUF_CONSTEXPR Expression_ScalarFunction::Expression_ScalarFunction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.args_)*/{}
  , /*decltype(_impl_.arguments_)*/{}
  , /*decltype(_impl_.output_type_)*/nullptr
  , /*decltype(_impl_.function_reference_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Expression_ScalarFunctionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_ScalarFunctionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_ScalarFunctionDefaultTypeInternal() {}
  union {
    Expression_ScalarFunction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_ScalarFunctionDefaultTypeInternal _Expression_ScalarFunction_default_instance_;
PROTOBUF_CONSTEXPR Expression_WindowFunction_Bound_Preceding::Expression_WindowFunction_Bound_Preceding(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.offset_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Expression_WindowFunction_Bound_PrecedingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_WindowFunction_Bound_PrecedingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_WindowFunction_Bound_PrecedingDefaultTypeInternal() {}
  union {
    Expression_WindowFunction_Bound_Preceding _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_WindowFunction_Bound_PrecedingDefaultTypeInternal _Expression_WindowFunction_Bound_Preceding_default_instance_;
PROTOBUF_CONSTEXPR Expression_WindowFunction_Bound_Following::Expression_WindowFunction_Bound_Following(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.offset_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Expression_WindowFunction_Bound_FollowingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_WindowFunction_Bound_FollowingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_WindowFunction_Bound_FollowingDefaultTypeInternal() {}
  union {
    Expression_WindowFunction_Bound_Following _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_WindowFunction_Bound_FollowingDefaultTypeInternal _Expression_WindowFunction_Bound_Following_default_instance_;
PROTOBUF_CONSTEXPR Expression_WindowFunction_Bound_CurrentRow::Expression_WindowFunction_Bound_CurrentRow(
    ::_pbi::ConstantInitialized) {}
struct Expression_WindowFunction_Bound_CurrentRowDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_WindowFunction_Bound_CurrentRowDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_WindowFunction_Bound_CurrentRowDefaultTypeInternal() {}
  union {
    Expression_WindowFunction_Bound_CurrentRow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_WindowFunction_Bound_CurrentRowDefaultTypeInternal _Expression_WindowFunction_Bound_CurrentRow_default_instance_;
PROTOBUF_CONSTEXPR Expression_WindowFunction_Bound_Unbounded::Expression_WindowFunction_Bound_Unbounded(
    ::_pbi::ConstantInitialized) {}
struct Expression_WindowFunction_Bound_UnboundedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_WindowFunction_Bound_UnboundedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_WindowFunction_Bound_UnboundedDefaultTypeInternal() {}
  union {
    Expression_WindowFunction_Bound_Unbounded _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_WindowFunction_Bound_UnboundedDefaultTypeInternal _Expression_WindowFunction_Bound_Unbounded_default_instance_;
PROTOBUF_CONSTEXPR Expression_WindowFunction_Bound::Expression_WindowFunction_Bound(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.kind_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct Expression_WindowFunction_BoundDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_WindowFunction_BoundDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_WindowFunction_BoundDefaultTypeInternal() {}
  union {
    Expression_WindowFunction_Bound _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_WindowFunction_BoundDefaultTypeInternal _Expression_WindowFunction_Bound_default_instance_;
PROTOBUF_CONSTEXPR Expression_WindowFunction::Expression_WindowFunction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.partitions_)*/{}
  , /*decltype(_impl_.sorts_)*/{}
  , /*decltype(_impl_.args_)*/{}
  , /*decltype(_impl_.arguments_)*/{}
  , /*decltype(_impl_.upper_bound_)*/nullptr
  , /*decltype(_impl_.lower_bound_)*/nullptr
  , /*decltype(_impl_.output_type_)*/nullptr
  , /*decltype(_impl_.function_reference_)*/0u
  , /*decltype(_impl_.phase_)*/0
  , /*decltype(_impl_.invocation_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Expression_WindowFunctionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_WindowFunctionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_WindowFunctionDefaultTypeInternal() {}
  union {
    Expression_WindowFunction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_WindowFunctionDefaultTypeInternal _Expression_WindowFunction_default_instance_;
PROTOBUF_CONSTEXPR Expression_IfThen_IfClause::Expression_IfThen_IfClause(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.if__)*/nullptr
  , /*decltype(_impl_.then_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Expression_IfThen_IfClauseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_IfThen_IfClauseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_IfThen_IfClauseDefaultTypeInternal() {}
  union {
    Expression_IfThen_IfClause _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_IfThen_IfClauseDefaultTypeInternal _Expression_IfThen_IfClause_default_instance_;
PROTOBUF_CONSTEXPR Expression_IfThen::Expression_IfThen(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ifs_)*/{}
  , /*decltype(_impl_.else__)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Expression_IfThenDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_IfThenDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_IfThenDefaultTypeInternal() {}
  union {
    Expression_IfThen _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_IfThenDefaultTypeInternal _Expression_IfThen_default_instance_;
PROTOBUF_CONSTEXPR Expression_Cast::Expression_Cast(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/nullptr
  , /*decltype(_impl_.input_)*/nullptr
  , /*decltype(_impl_.failure_behavior_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Expression_CastDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_CastDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_CastDefaultTypeInternal() {}
  union {
    Expression_Cast _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_CastDefaultTypeInternal _Expression_Cast_default_instance_;
PROTOBUF_CONSTEXPR Expression_SwitchExpression_IfValue::Expression_SwitchExpression_IfValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.if__)*/nullptr
  , /*decltype(_impl_.then_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Expression_SwitchExpression_IfValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_SwitchExpression_IfValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_SwitchExpression_IfValueDefaultTypeInternal() {}
  union {
    Expression_SwitchExpression_IfValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_SwitchExpression_IfValueDefaultTypeInternal _Expression_SwitchExpression_IfValue_default_instance_;
PROTOBUF_CONSTEXPR Expression_SwitchExpression::Expression_SwitchExpression(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ifs_)*/{}
  , /*decltype(_impl_.else__)*/nullptr
  , /*decltype(_impl_.match_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Expression_SwitchExpressionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_SwitchExpressionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_SwitchExpressionDefaultTypeInternal() {}
  union {
    Expression_SwitchExpression _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_SwitchExpressionDefaultTypeInternal _Expression_SwitchExpression_default_instance_;
PROTOBUF_CONSTEXPR Expression_SingularOrList::Expression_SingularOrList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.options_)*/{}
  , /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Expression_SingularOrListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_SingularOrListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_SingularOrListDefaultTypeInternal() {}
  union {
    Expression_SingularOrList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_SingularOrListDefaultTypeInternal _Expression_SingularOrList_default_instance_;
PROTOBUF_CONSTEXPR Expression_MultiOrList_Record::Expression_MultiOrList_Record(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fields_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Expression_MultiOrList_RecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_MultiOrList_RecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_MultiOrList_RecordDefaultTypeInternal() {}
  union {
    Expression_MultiOrList_Record _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_MultiOrList_RecordDefaultTypeInternal _Expression_MultiOrList_Record_default_instance_;
PROTOBUF_CONSTEXPR Expression_MultiOrList::Expression_MultiOrList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_.options_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Expression_MultiOrListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_MultiOrListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_MultiOrListDefaultTypeInternal() {}
  union {
    Expression_MultiOrList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_MultiOrListDefaultTypeInternal _Expression_MultiOrList_default_instance_;
PROTOBUF_CONSTEXPR Expression_EmbeddedFunction_PythonPickleFunction::Expression_EmbeddedFunction_PythonPickleFunction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.prerequisite_)*/{}
  , /*decltype(_impl_.function_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Expression_EmbeddedFunction_PythonPickleFunctionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_EmbeddedFunction_PythonPickleFunctionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_EmbeddedFunction_PythonPickleFunctionDefaultTypeInternal() {}
  union {
    Expression_EmbeddedFunction_PythonPickleFunction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_EmbeddedFunction_PythonPickleFunctionDefaultTypeInternal _Expression_EmbeddedFunction_PythonPickleFunction_default_instance_;
PROTOBUF_CONSTEXPR Expression_EmbeddedFunction_WebAssemblyFunction::Expression_EmbeddedFunction_WebAssemblyFunction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.prerequisite_)*/{}
  , /*decltype(_impl_.script_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Expression_EmbeddedFunction_WebAssemblyFunctionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_EmbeddedFunction_WebAssemblyFunctionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_EmbeddedFunction_WebAssemblyFunctionDefaultTypeInternal() {}
  union {
    Expression_EmbeddedFunction_WebAssemblyFunction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_EmbeddedFunction_WebAssemblyFunctionDefaultTypeInternal _Expression_EmbeddedFunction_WebAssemblyFunction_default_instance_;
PROTOBUF_CONSTEXPR Expression_EmbeddedFunction::Expression_EmbeddedFunction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.arguments_)*/{}
  , /*decltype(_impl_.output_type_)*/nullptr
  , /*decltype(_impl_.kind_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct Expression_EmbeddedFunctionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_EmbeddedFunctionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_EmbeddedFunctionDefaultTypeInternal() {}
  union {
    Expression_EmbeddedFunction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_EmbeddedFunctionDefaultTypeInternal _Expression_EmbeddedFunction_default_instance_;
PROTOBUF_CONSTEXPR Expression_ReferenceSegment_MapKey::Expression_ReferenceSegment_MapKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.map_key_)*/nullptr
  , /*decltype(_impl_.child_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Expression_ReferenceSegment_MapKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_ReferenceSegment_MapKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_ReferenceSegment_MapKeyDefaultTypeInternal() {}
  union {
    Expression_ReferenceSegment_MapKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_ReferenceSegment_MapKeyDefaultTypeInternal _Expression_ReferenceSegment_MapKey_default_instance_;
PROTOBUF_CONSTEXPR Expression_ReferenceSegment_StructField::Expression_ReferenceSegment_StructField(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.child_)*/nullptr
  , /*decltype(_impl_.field_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Expression_ReferenceSegment_StructFieldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_ReferenceSegment_StructFieldDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_ReferenceSegment_StructFieldDefaultTypeInternal() {}
  union {
    Expression_ReferenceSegment_StructField _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_ReferenceSegment_StructFieldDefaultTypeInternal _Expression_ReferenceSegment_StructField_default_instance_;
PROTOBUF_CONSTEXPR Expression_ReferenceSegment_ListElement::Expression_ReferenceSegment_ListElement(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.child_)*/nullptr
  , /*decltype(_impl_.offset_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Expression_ReferenceSegment_ListElementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_ReferenceSegment_ListElementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_ReferenceSegment_ListElementDefaultTypeInternal() {}
  union {
    Expression_ReferenceSegment_ListElement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_ReferenceSegment_ListElementDefaultTypeInternal _Expression_ReferenceSegment_ListElement_default_instance_;
PROTOBUF_CONSTEXPR Expression_ReferenceSegment::Expression_ReferenceSegment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reference_type_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct Expression_ReferenceSegmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_ReferenceSegmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_ReferenceSegmentDefaultTypeInternal() {}
  union {
    Expression_ReferenceSegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_ReferenceSegmentDefaultTypeInternal _Expression_ReferenceSegment_default_instance_;
PROTOBUF_CONSTEXPR Expression_MaskExpression_Select::Expression_MaskExpression_Select(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct Expression_MaskExpression_SelectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_MaskExpression_SelectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_MaskExpression_SelectDefaultTypeInternal() {}
  union {
    Expression_MaskExpression_Select _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_MaskExpression_SelectDefaultTypeInternal _Expression_MaskExpression_Select_default_instance_;
PROTOBUF_CONSTEXPR Expression_MaskExpression_StructSelect::Expression_MaskExpression_StructSelect(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.struct_items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Expression_MaskExpression_StructSelectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_MaskExpression_StructSelectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_MaskExpression_StructSelectDefaultTypeInternal() {}
  union {
    Expression_MaskExpression_StructSelect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_MaskExpression_StructSelectDefaultTypeInternal _Expression_MaskExpression_StructSelect_default_instance_;
PROTOBUF_CONSTEXPR Expression_MaskExpression_StructItem::Expression_MaskExpression_StructItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.child_)*/nullptr
  , /*decltype(_impl_.field_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Expression_MaskExpression_StructItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_MaskExpression_StructItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_MaskExpression_StructItemDefaultTypeInternal() {}
  union {
    Expression_MaskExpression_StructItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_MaskExpression_StructItemDefaultTypeInternal _Expression_MaskExpression_StructItem_default_instance_;
PROTOBUF_CONSTEXPR Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.field_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Expression_MaskExpression_ListSelect_ListSelectItem_ListElementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_MaskExpression_ListSelect_ListSelectItem_ListElementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_MaskExpression_ListSelect_ListSelectItem_ListElementDefaultTypeInternal() {}
  union {
    Expression_MaskExpression_ListSelect_ListSelectItem_ListElement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_MaskExpression_ListSelect_ListSelectItem_ListElementDefaultTypeInternal _Expression_MaskExpression_ListSelect_ListSelectItem_ListElement_default_instance_;
PROTOBUF_CONSTEXPR Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.start_)*/0
  , /*decltype(_impl_.end_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Expression_MaskExpression_ListSelect_ListSelectItem_ListSliceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_MaskExpression_ListSelect_ListSelectItem_ListSliceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_MaskExpression_ListSelect_ListSelectItem_ListSliceDefaultTypeInternal() {}
  union {
    Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_MaskExpression_ListSelect_ListSelectItem_ListSliceDefaultTypeInternal _Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice_default_instance_;
PROTOBUF_CONSTEXPR Expression_MaskExpression_ListSelect_ListSelectItem::Expression_MaskExpression_ListSelect_ListSelectItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct Expression_MaskExpression_ListSelect_ListSelectItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_MaskExpression_ListSelect_ListSelectItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_MaskExpression_ListSelect_ListSelectItemDefaultTypeInternal() {}
  union {
    Expression_MaskExpression_ListSelect_ListSelectItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_MaskExpression_ListSelect_ListSelectItemDefaultTypeInternal _Expression_MaskExpression_ListSelect_ListSelectItem_default_instance_;
PROTOBUF_CONSTEXPR Expression_MaskExpression_ListSelect::Expression_MaskExpression_ListSelect(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.selection_)*/{}
  , /*decltype(_impl_.child_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Expression_MaskExpression_ListSelectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_MaskExpression_ListSelectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_MaskExpression_ListSelectDefaultTypeInternal() {}
  union {
    Expression_MaskExpression_ListSelect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_MaskExpression_ListSelectDefaultTypeInternal _Expression_MaskExpression_ListSelect_default_instance_;
PROTOBUF_CONSTEXPR Expression_MaskExpression_MapSelect_MapKey::Expression_MaskExpression_MapSelect_MapKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.map_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Expression_MaskExpression_MapSelect_MapKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_MaskExpression_MapSelect_MapKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_MaskExpression_MapSelect_MapKeyDefaultTypeInternal() {}
  union {
    Expression_MaskExpression_MapSelect_MapKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_MaskExpression_MapSelect_MapKeyDefaultTypeInternal _Expression_MaskExpression_MapSelect_MapKey_default_instance_;
PROTOBUF_CONSTEXPR Expression_MaskExpression_MapSelect_MapKeyExpression::Expression_MaskExpression_MapSelect_MapKeyExpression(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.map_key_expression_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Expression_MaskExpression_MapSelect_MapKeyExpressionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_MaskExpression_MapSelect_MapKeyExpressionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_MaskExpression_MapSelect_MapKeyExpressionDefaultTypeInternal() {}
  union {
    Expression_MaskExpression_MapSelect_MapKeyExpression _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_MaskExpression_MapSelect_MapKeyExpressionDefaultTypeInternal _Expression_MaskExpression_MapSelect_MapKeyExpression_default_instance_;
PROTOBUF_CONSTEXPR Expression_MaskExpression_MapSelect::Expression_MaskExpression_MapSelect(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.child_)*/nullptr
  , /*decltype(_impl_.select_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct Expression_MaskExpression_MapSelectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_MaskExpression_MapSelectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_MaskExpression_MapSelectDefaultTypeInternal() {}
  union {
    Expression_MaskExpression_MapSelect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_MaskExpression_MapSelectDefaultTypeInternal _Expression_MaskExpression_MapSelect_default_instance_;
PROTOBUF_CONSTEXPR Expression_MaskExpression::Expression_MaskExpression(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.select_)*/nullptr
  , /*decltype(_impl_.maintain_singular_struct_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Expression_MaskExpressionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_MaskExpressionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_MaskExpressionDefaultTypeInternal() {}
  union {
    Expression_MaskExpression _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_MaskExpressionDefaultTypeInternal _Expression_MaskExpression_default_instance_;
PROTOBUF_CONSTEXPR Expression_FieldReference_RootReference::Expression_FieldReference_RootReference(
    ::_pbi::ConstantInitialized) {}
struct Expression_FieldReference_RootReferenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_FieldReference_RootReferenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_FieldReference_RootReferenceDefaultTypeInternal() {}
  union {
    Expression_FieldReference_RootReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_FieldReference_RootReferenceDefaultTypeInternal _Expression_FieldReference_RootReference_default_instance_;
PROTOBUF_CONSTEXPR Expression_FieldReference_OuterReference::Expression_FieldReference_OuterReference(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.steps_out_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Expression_FieldReference_OuterReferenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_FieldReference_OuterReferenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_FieldReference_OuterReferenceDefaultTypeInternal() {}
  union {
    Expression_FieldReference_OuterReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_FieldReference_OuterReferenceDefaultTypeInternal _Expression_FieldReference_OuterReference_default_instance_;
PROTOBUF_CONSTEXPR Expression_FieldReference::Expression_FieldReference(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reference_type_)*/{}
  , /*decltype(_impl_.root_type_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct Expression_FieldReferenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_FieldReferenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_FieldReferenceDefaultTypeInternal() {}
  union {
    Expression_FieldReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_FieldReferenceDefaultTypeInternal _Expression_FieldReference_default_instance_;
PROTOBUF_CONSTEXPR Expression_Subquery_Scalar::Expression_Subquery_Scalar(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.input_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Expression_Subquery_ScalarDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_Subquery_ScalarDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_Subquery_ScalarDefaultTypeInternal() {}
  union {
    Expression_Subquery_Scalar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_Subquery_ScalarDefaultTypeInternal _Expression_Subquery_Scalar_default_instance_;
PROTOBUF_CONSTEXPR Expression_Subquery_InPredicate::Expression_Subquery_InPredicate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.needles_)*/{}
  , /*decltype(_impl_.haystack_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Expression_Subquery_InPredicateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_Subquery_InPredicateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_Subquery_InPredicateDefaultTypeInternal() {}
  union {
    Expression_Subquery_InPredicate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_Subquery_InPredicateDefaultTypeInternal _Expression_Subquery_InPredicate_default_instance_;
PROTOBUF_CONSTEXPR Expression_Subquery_SetPredicate::Expression_Subquery_SetPredicate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tuples_)*/nullptr
  , /*decltype(_impl_.predicate_op_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Expression_Subquery_SetPredicateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_Subquery_SetPredicateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_Subquery_SetPredicateDefaultTypeInternal() {}
  union {
    Expression_Subquery_SetPredicate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_Subquery_SetPredicateDefaultTypeInternal _Expression_Subquery_SetPredicate_default_instance_;
PROTOBUF_CONSTEXPR Expression_Subquery_SetComparison::Expression_Subquery_SetComparison(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.left_)*/nullptr
  , /*decltype(_impl_.right_)*/nullptr
  , /*decltype(_impl_.reduction_op_)*/0
  , /*decltype(_impl_.comparison_op_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Expression_Subquery_SetComparisonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_Subquery_SetComparisonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_Subquery_SetComparisonDefaultTypeInternal() {}
  union {
    Expression_Subquery_SetComparison _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_Subquery_SetComparisonDefaultTypeInternal _Expression_Subquery_SetComparison_default_instance_;
PROTOBUF_CONSTEXPR Expression_Subquery::Expression_Subquery(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subquery_type_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct Expression_SubqueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Expression_SubqueryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Expression_SubqueryDefaultTypeInternal() {}
  union {
    Expression_Subquery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Expression_SubqueryDefaultTypeInternal _Expression_Subquery_default_instance_;
PROTOBUF_CONSTEXPR Expression::Expression(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rex_type_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ExpressionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExpressionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExpressionDefaultTypeInternal() {}
  union {
    Expression _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExpressionDefaultTypeInternal _Expression_default_instance_;
PROTOBUF_CONSTEXPR SortField::SortField(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.expr_)*/nullptr
  , /*decltype(_impl_.sort_kind_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct SortFieldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SortFieldDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SortFieldDefaultTypeInternal() {}
  union {
    SortField _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SortFieldDefaultTypeInternal _SortField_default_instance_;
PROTOBUF_CONSTEXPR AggregateFunction_ReferenceRel::AggregateFunction_ReferenceRel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subtree_ordinal_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AggregateFunction_ReferenceRelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggregateFunction_ReferenceRelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggregateFunction_ReferenceRelDefaultTypeInternal() {}
  union {
    AggregateFunction_ReferenceRel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggregateFunction_ReferenceRelDefaultTypeInternal _AggregateFunction_ReferenceRel_default_instance_;
PROTOBUF_CONSTEXPR AggregateFunction::AggregateFunction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.args_)*/{}
  , /*decltype(_impl_.sorts_)*/{}
  , /*decltype(_impl_.arguments_)*/{}
  , /*decltype(_impl_.output_type_)*/nullptr
  , /*decltype(_impl_.function_reference_)*/0u
  , /*decltype(_impl_.phase_)*/0
  , /*decltype(_impl_.invocation_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AggregateFunctionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggregateFunctionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggregateFunctionDefaultTypeInternal() {}
  union {
    AggregateFunction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggregateFunctionDefaultTypeInternal _AggregateFunction_default_instance_;
}  // namespace substrait
static ::_pb::Metadata file_level_metadata_substrait_2falgebra_2eproto[101];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_substrait_2falgebra_2eproto[13];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_substrait_2falgebra_2eproto = nullptr;

const uint32_t TableStruct_substrait_2falgebra_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::RelCommon_Direct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::RelCommon_Emit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::RelCommon_Emit, _impl_.output_mapping_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::RelCommon_Hint_Stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::RelCommon_Hint_Stats, _impl_.row_count_),
  PROTOBUF_FIELD_OFFSET(::substrait::RelCommon_Hint_Stats, _impl_.record_size_),
  PROTOBUF_FIELD_OFFSET(::substrait::RelCommon_Hint_Stats, _impl_.advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::RelCommon_Hint_RuntimeConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::RelCommon_Hint_RuntimeConstraint, _impl_.advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::RelCommon_Hint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::RelCommon_Hint, _impl_.stats_),
  PROTOBUF_FIELD_OFFSET(::substrait::RelCommon_Hint, _impl_.constraint_),
  PROTOBUF_FIELD_OFFSET(::substrait::RelCommon_Hint, _impl_.advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::RelCommon, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::RelCommon, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::substrait::RelCommon, _impl_.hint_),
  PROTOBUF_FIELD_OFFSET(::substrait::RelCommon, _impl_.advanced_extension_),
  PROTOBUF_FIELD_OFFSET(::substrait::RelCommon, _impl_.emit_kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel_NamedTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel_NamedTable, _impl_.names_),
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel_NamedTable, _impl_.advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel_VirtualTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel_VirtualTable, _impl_.values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel_ExtensionTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel_ExtensionTable, _impl_.detail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel_LocalFiles_FileOrFiles, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel_LocalFiles_FileOrFiles, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel_LocalFiles_FileOrFiles, _impl_.partition_index_),
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel_LocalFiles_FileOrFiles, _impl_.start_),
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel_LocalFiles_FileOrFiles, _impl_.length_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel_LocalFiles_FileOrFiles, _impl_.path_type_),
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel_LocalFiles_FileOrFiles, _impl_.file_format_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel_LocalFiles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel_LocalFiles, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel_LocalFiles, _impl_.advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel, _impl_.common_),
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel, _impl_.base_schema_),
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel, _impl_.filter_),
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel, _impl_.projection_),
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel, _impl_.advanced_extension_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::substrait::ReadRel, _impl_.read_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::ProjectRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::ProjectRel, _impl_.common_),
  PROTOBUF_FIELD_OFFSET(::substrait::ProjectRel, _impl_.input_),
  PROTOBUF_FIELD_OFFSET(::substrait::ProjectRel, _impl_.expressions_),
  PROTOBUF_FIELD_OFFSET(::substrait::ProjectRel, _impl_.advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::JoinRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::JoinRel, _impl_.common_),
  PROTOBUF_FIELD_OFFSET(::substrait::JoinRel, _impl_.left_),
  PROTOBUF_FIELD_OFFSET(::substrait::JoinRel, _impl_.right_),
  PROTOBUF_FIELD_OFFSET(::substrait::JoinRel, _impl_.expression_),
  PROTOBUF_FIELD_OFFSET(::substrait::JoinRel, _impl_.post_join_filter_),
  PROTOBUF_FIELD_OFFSET(::substrait::JoinRel, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::substrait::JoinRel, _impl_.advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::CrossRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::CrossRel, _impl_.common_),
  PROTOBUF_FIELD_OFFSET(::substrait::CrossRel, _impl_.left_),
  PROTOBUF_FIELD_OFFSET(::substrait::CrossRel, _impl_.right_),
  PROTOBUF_FIELD_OFFSET(::substrait::CrossRel, _impl_.advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::FetchRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::FetchRel, _impl_.common_),
  PROTOBUF_FIELD_OFFSET(::substrait::FetchRel, _impl_.input_),
  PROTOBUF_FIELD_OFFSET(::substrait::FetchRel, _impl_.offset_),
  PROTOBUF_FIELD_OFFSET(::substrait::FetchRel, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::substrait::FetchRel, _impl_.advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::AggregateRel_Grouping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::AggregateRel_Grouping, _impl_.grouping_expressions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::AggregateRel_Measure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::AggregateRel_Measure, _impl_.measure_),
  PROTOBUF_FIELD_OFFSET(::substrait::AggregateRel_Measure, _impl_.filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::AggregateRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::AggregateRel, _impl_.common_),
  PROTOBUF_FIELD_OFFSET(::substrait::AggregateRel, _impl_.input_),
  PROTOBUF_FIELD_OFFSET(::substrait::AggregateRel, _impl_.groupings_),
  PROTOBUF_FIELD_OFFSET(::substrait::AggregateRel, _impl_.measures_),
  PROTOBUF_FIELD_OFFSET(::substrait::AggregateRel, _impl_.advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::SortRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::SortRel, _impl_.common_),
  PROTOBUF_FIELD_OFFSET(::substrait::SortRel, _impl_.input_),
  PROTOBUF_FIELD_OFFSET(::substrait::SortRel, _impl_.sorts_),
  PROTOBUF_FIELD_OFFSET(::substrait::SortRel, _impl_.advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::FilterRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::FilterRel, _impl_.common_),
  PROTOBUF_FIELD_OFFSET(::substrait::FilterRel, _impl_.input_),
  PROTOBUF_FIELD_OFFSET(::substrait::FilterRel, _impl_.condition_),
  PROTOBUF_FIELD_OFFSET(::substrait::FilterRel, _impl_.advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::SetRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::SetRel, _impl_.common_),
  PROTOBUF_FIELD_OFFSET(::substrait::SetRel, _impl_.inputs_),
  PROTOBUF_FIELD_OFFSET(::substrait::SetRel, _impl_.op_),
  PROTOBUF_FIELD_OFFSET(::substrait::SetRel, _impl_.advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::ExtensionSingleRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::ExtensionSingleRel, _impl_.common_),
  PROTOBUF_FIELD_OFFSET(::substrait::ExtensionSingleRel, _impl_.input_),
  PROTOBUF_FIELD_OFFSET(::substrait::ExtensionSingleRel, _impl_.detail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::ExtensionLeafRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::ExtensionLeafRel, _impl_.common_),
  PROTOBUF_FIELD_OFFSET(::substrait::ExtensionLeafRel, _impl_.detail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::ExtensionMultiRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::ExtensionMultiRel, _impl_.common_),
  PROTOBUF_FIELD_OFFSET(::substrait::ExtensionMultiRel, _impl_.inputs_),
  PROTOBUF_FIELD_OFFSET(::substrait::ExtensionMultiRel, _impl_.detail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::ExchangeRel_ScatterFields, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::ExchangeRel_ScatterFields, _impl_.fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::ExchangeRel_SingleBucketExpression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::ExchangeRel_SingleBucketExpression, _impl_.expression_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::ExchangeRel_MultiBucketExpression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::ExchangeRel_MultiBucketExpression, _impl_.expression_),
  PROTOBUF_FIELD_OFFSET(::substrait::ExchangeRel_MultiBucketExpression, _impl_.constrained_to_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::ExchangeRel_Broadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::ExchangeRel_RoundRobin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::ExchangeRel_RoundRobin, _impl_.exact_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::ExchangeRel_ExchangeTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::ExchangeRel_ExchangeTarget, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::ExchangeRel_ExchangeTarget, _impl_.partition_id_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::substrait::ExchangeRel_ExchangeTarget, _impl_.target_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::ExchangeRel, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::ExchangeRel, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::ExchangeRel, _impl_.common_),
  PROTOBUF_FIELD_OFFSET(::substrait::ExchangeRel, _impl_.input_),
  PROTOBUF_FIELD_OFFSET(::substrait::ExchangeRel, _impl_.partition_count_),
  PROTOBUF_FIELD_OFFSET(::substrait::ExchangeRel, _impl_.targets_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::substrait::ExchangeRel, _impl_.advanced_extension_),
  PROTOBUF_FIELD_OFFSET(::substrait::ExchangeRel, _impl_.exchange_kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::RelRoot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::RelRoot, _impl_.input_),
  PROTOBUF_FIELD_OFFSET(::substrait::RelRoot, _impl_.names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Rel, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::Rel, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::substrait::Rel, _impl_.rel_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::NamedObjectWrite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::NamedObjectWrite, _impl_.names_),
  PROTOBUF_FIELD_OFFSET(::substrait::NamedObjectWrite, _impl_.advanced_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::ExtensionObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::ExtensionObject, _impl_.detail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::DdlRel, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::DdlRel, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::substrait::DdlRel, _impl_.table_schema_),
  PROTOBUF_FIELD_OFFSET(::substrait::DdlRel, _impl_.table_defaults_),
  PROTOBUF_FIELD_OFFSET(::substrait::DdlRel, _impl_.object_),
  PROTOBUF_FIELD_OFFSET(::substrait::DdlRel, _impl_.op_),
  PROTOBUF_FIELD_OFFSET(::substrait::DdlRel, _impl_.view_definition_),
  PROTOBUF_FIELD_OFFSET(::substrait::DdlRel, _impl_.write_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::WriteRel, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::WriteRel, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::substrait::WriteRel, _impl_.table_schema_),
  PROTOBUF_FIELD_OFFSET(::substrait::WriteRel, _impl_.op_),
  PROTOBUF_FIELD_OFFSET(::substrait::WriteRel, _impl_.input_),
  PROTOBUF_FIELD_OFFSET(::substrait::WriteRel, _impl_.output_),
  PROTOBUF_FIELD_OFFSET(::substrait::WriteRel, _impl_.write_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::FunctionArgument_Enum, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::FunctionArgument_Enum, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::substrait::FunctionArgument_Enum, _impl_.enum_kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::FunctionArgument, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::FunctionArgument, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::substrait::FunctionArgument, _impl_.arg_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Enum_Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Enum, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Enum, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Enum, _impl_.enum_kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Literal_VarChar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Literal_VarChar, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Literal_VarChar, _impl_.length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Literal_Decimal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Literal_Decimal, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Literal_Decimal, _impl_.precision_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Literal_Decimal, _impl_.scale_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Literal_Map_KeyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Literal_Map_KeyValue, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Literal_Map_KeyValue, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Literal_Map, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Literal_Map, _impl_.key_values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Literal_IntervalYearToMonth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Literal_IntervalYearToMonth, _impl_.years_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Literal_IntervalYearToMonth, _impl_.months_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Literal_IntervalDayToSecond, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Literal_IntervalDayToSecond, _impl_.days_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Literal_IntervalDayToSecond, _impl_.seconds_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Literal_IntervalDayToSecond, _impl_.microseconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Literal_Struct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Literal_Struct, _impl_.fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Literal_List, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Literal_List, _impl_.values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Literal_UserDefined, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Literal_UserDefined, _impl_.type_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Literal_UserDefined, _impl_.type_parameters_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Literal_UserDefined, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Literal, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Literal, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Literal, _impl_.nullable_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Literal, _impl_.type_variation_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Literal, _impl_.literal_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_ScalarFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_ScalarFunction, _impl_.function_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_ScalarFunction, _impl_.arguments_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_ScalarFunction, _impl_.output_type_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_ScalarFunction, _impl_.args_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_WindowFunction_Bound_Preceding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_WindowFunction_Bound_Preceding, _impl_.offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_WindowFunction_Bound_Following, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_WindowFunction_Bound_Following, _impl_.offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_WindowFunction_Bound_CurrentRow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_WindowFunction_Bound_Unbounded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_WindowFunction_Bound, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_WindowFunction_Bound, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_WindowFunction_Bound, _impl_.kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_WindowFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_WindowFunction, _impl_.function_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_WindowFunction, _impl_.arguments_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_WindowFunction, _impl_.output_type_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_WindowFunction, _impl_.phase_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_WindowFunction, _impl_.sorts_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_WindowFunction, _impl_.invocation_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_WindowFunction, _impl_.partitions_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_WindowFunction, _impl_.lower_bound_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_WindowFunction, _impl_.upper_bound_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_WindowFunction, _impl_.args_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_IfThen_IfClause, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_IfThen_IfClause, _impl_.if__),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_IfThen_IfClause, _impl_.then_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_IfThen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_IfThen, _impl_.ifs_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_IfThen, _impl_.else__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Cast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Cast, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Cast, _impl_.input_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Cast, _impl_.failure_behavior_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_SwitchExpression_IfValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_SwitchExpression_IfValue, _impl_.if__),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_SwitchExpression_IfValue, _impl_.then_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_SwitchExpression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_SwitchExpression, _impl_.match_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_SwitchExpression, _impl_.ifs_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_SwitchExpression, _impl_.else__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_SingularOrList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_SingularOrList, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_SingularOrList, _impl_.options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_MultiOrList_Record, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_MultiOrList_Record, _impl_.fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_MultiOrList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_MultiOrList, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_MultiOrList, _impl_.options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_EmbeddedFunction_PythonPickleFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_EmbeddedFunction_PythonPickleFunction, _impl_.function_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_EmbeddedFunction_PythonPickleFunction, _impl_.prerequisite_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_EmbeddedFunction_WebAssemblyFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_EmbeddedFunction_WebAssemblyFunction, _impl_.script_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_EmbeddedFunction_WebAssemblyFunction, _impl_.prerequisite_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_EmbeddedFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_EmbeddedFunction, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_EmbeddedFunction, _impl_.arguments_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_EmbeddedFunction, _impl_.output_type_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_EmbeddedFunction, _impl_.kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_ReferenceSegment_MapKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_ReferenceSegment_MapKey, _impl_.map_key_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_ReferenceSegment_MapKey, _impl_.child_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_ReferenceSegment_StructField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_ReferenceSegment_StructField, _impl_.field_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_ReferenceSegment_StructField, _impl_.child_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_ReferenceSegment_ListElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_ReferenceSegment_ListElement, _impl_.offset_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_ReferenceSegment_ListElement, _impl_.child_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_ReferenceSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_ReferenceSegment, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_ReferenceSegment, _impl_.reference_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_MaskExpression_Select, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_MaskExpression_Select, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_MaskExpression_Select, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_MaskExpression_StructSelect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_MaskExpression_StructSelect, _impl_.struct_items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_MaskExpression_StructItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_MaskExpression_StructItem, _impl_.field_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_MaskExpression_StructItem, _impl_.child_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement, _impl_.field_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice, _impl_.start_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice, _impl_.end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_MaskExpression_ListSelect_ListSelectItem, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_MaskExpression_ListSelect_ListSelectItem, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_MaskExpression_ListSelect_ListSelectItem, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_MaskExpression_ListSelect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_MaskExpression_ListSelect, _impl_.selection_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_MaskExpression_ListSelect, _impl_.child_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_MaskExpression_MapSelect_MapKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_MaskExpression_MapSelect_MapKey, _impl_.map_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression, _impl_.map_key_expression_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_MaskExpression_MapSelect, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_MaskExpression_MapSelect, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_MaskExpression_MapSelect, _impl_.child_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_MaskExpression_MapSelect, _impl_.select_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_MaskExpression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_MaskExpression, _impl_.select_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_MaskExpression, _impl_.maintain_singular_struct_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_FieldReference_RootReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_FieldReference_OuterReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_FieldReference_OuterReference, _impl_.steps_out_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_FieldReference, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_FieldReference, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_FieldReference, _impl_.reference_type_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_FieldReference, _impl_.root_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Subquery_Scalar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Subquery_Scalar, _impl_.input_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Subquery_InPredicate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Subquery_InPredicate, _impl_.needles_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Subquery_InPredicate, _impl_.haystack_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Subquery_SetPredicate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Subquery_SetPredicate, _impl_.predicate_op_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Subquery_SetPredicate, _impl_.tuples_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Subquery_SetComparison, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Subquery_SetComparison, _impl_.reduction_op_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Subquery_SetComparison, _impl_.comparison_op_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Subquery_SetComparison, _impl_.left_),
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Subquery_SetComparison, _impl_.right_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Subquery, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Subquery, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::substrait::Expression_Subquery, _impl_.subquery_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::Expression, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::substrait::Expression, _impl_.rex_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::SortField, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::SortField, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::SortField, _impl_.expr_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::substrait::SortField, _impl_.sort_kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::AggregateFunction_ReferenceRel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::AggregateFunction_ReferenceRel, _impl_.subtree_ordinal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::AggregateFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::AggregateFunction, _impl_.function_reference_),
  PROTOBUF_FIELD_OFFSET(::substrait::AggregateFunction, _impl_.arguments_),
  PROTOBUF_FIELD_OFFSET(::substrait::AggregateFunction, _impl_.output_type_),
  PROTOBUF_FIELD_OFFSET(::substrait::AggregateFunction, _impl_.phase_),
  PROTOBUF_FIELD_OFFSET(::substrait::AggregateFunction, _impl_.sorts_),
  PROTOBUF_FIELD_OFFSET(::substrait::AggregateFunction, _impl_.invocation_),
  PROTOBUF_FIELD_OFFSET(::substrait::AggregateFunction, _impl_.args_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::substrait::RelCommon_Direct)},
  { 6, -1, -1, sizeof(::substrait::RelCommon_Emit)},
  { 13, -1, -1, sizeof(::substrait::RelCommon_Hint_Stats)},
  { 22, -1, -1, sizeof(::substrait::RelCommon_Hint_RuntimeConstraint)},
  { 29, -1, -1, sizeof(::substrait::RelCommon_Hint)},
  { 38, -1, -1, sizeof(::substrait::RelCommon)},
  { 49, -1, -1, sizeof(::substrait::ReadRel_NamedTable)},
  { 57, -1, -1, sizeof(::substrait::ReadRel_VirtualTable)},
  { 64, -1, -1, sizeof(::substrait::ReadRel_ExtensionTable)},
  { 71, -1, -1, sizeof(::substrait::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions)},
  { 77, -1, -1, sizeof(::substrait::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions)},
  { 83, -1, -1, sizeof(::substrait::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions)},
  { 89, -1, -1, sizeof(::substrait::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions)},
  { 95, -1, -1, sizeof(::substrait::ReadRel_LocalFiles_FileOrFiles)},
  { 115, -1, -1, sizeof(::substrait::ReadRel_LocalFiles)},
  { 123, -1, -1, sizeof(::substrait::ReadRel)},
  { 139, -1, -1, sizeof(::substrait::ProjectRel)},
  { 149, -1, -1, sizeof(::substrait::JoinRel)},
  { 162, -1, -1, sizeof(::substrait::CrossRel)},
  { 172, -1, -1, sizeof(::substrait::FetchRel)},
  { 183, -1, -1, sizeof(::substrait::AggregateRel_Grouping)},
  { 190, -1, -1, sizeof(::substrait::AggregateRel_Measure)},
  { 198, -1, -1, sizeof(::substrait::AggregateRel)},
  { 209, -1, -1, sizeof(::substrait::SortRel)},
  { 219, -1, -1, sizeof(::substrait::FilterRel)},
  { 229, -1, -1, sizeof(::substrait::SetRel)},
  { 239, -1, -1, sizeof(::substrait::ExtensionSingleRel)},
  { 248, -1, -1, sizeof(::substrait::ExtensionLeafRel)},
  { 256, -1, -1, sizeof(::substrait::ExtensionMultiRel)},
  { 265, -1, -1, sizeof(::substrait::ExchangeRel_ScatterFields)},
  { 272, -1, -1, sizeof(::substrait::ExchangeRel_SingleBucketExpression)},
  { 279, -1, -1, sizeof(::substrait::ExchangeRel_MultiBucketExpression)},
  { 287, -1, -1, sizeof(::substrait::ExchangeRel_Broadcast)},
  { 293, -1, -1, sizeof(::substrait::ExchangeRel_RoundRobin)},
  { 300, -1, -1, sizeof(::substrait::ExchangeRel_ExchangeTarget)},
  { 310, -1, -1, sizeof(::substrait::ExchangeRel)},
  { 327, -1, -1, sizeof(::substrait::RelRoot)},
  { 335, -1, -1, sizeof(::substrait::Rel)},
  { 355, -1, -1, sizeof(::substrait::NamedObjectWrite)},
  { 363, -1, -1, sizeof(::substrait::ExtensionObject)},
  { 370, -1, -1, sizeof(::substrait::DdlRel)},
  { 384, -1, -1, sizeof(::substrait::WriteRel)},
  { 397, -1, -1, sizeof(::substrait::FunctionArgument_Enum)},
  { 406, -1, -1, sizeof(::substrait::FunctionArgument)},
  { 416, -1, -1, sizeof(::substrait::Expression_Enum_Empty)},
  { 422, -1, -1, sizeof(::substrait::Expression_Enum)},
  { 431, -1, -1, sizeof(::substrait::Expression_Literal_VarChar)},
  { 439, -1, -1, sizeof(::substrait::Expression_Literal_Decimal)},
  { 448, -1, -1, sizeof(::substrait::Expression_Literal_Map_KeyValue)},
  { 456, -1, -1, sizeof(::substrait::Expression_Literal_Map)},
  { 463, -1, -1, sizeof(::substrait::Expression_Literal_IntervalYearToMonth)},
  { 471, -1, -1, sizeof(::substrait::Expression_Literal_IntervalDayToSecond)},
  { 480, -1, -1, sizeof(::substrait::Expression_Literal_Struct)},
  { 487, -1, -1, sizeof(::substrait::Expression_Literal_List)},
  { 494, -1, -1, sizeof(::substrait::Expression_Literal_UserDefined)},
  { 503, -1, -1, sizeof(::substrait::Expression_Literal)},
  { 539, -1, -1, sizeof(::substrait::Expression_ScalarFunction)},
  { 549, -1, -1, sizeof(::substrait::Expression_WindowFunction_Bound_Preceding)},
  { 556, -1, -1, sizeof(::substrait::Expression_WindowFunction_Bound_Following)},
  { 563, -1, -1, sizeof(::substrait::Expression_WindowFunction_Bound_CurrentRow)},
  { 569, -1, -1, sizeof(::substrait::Expression_WindowFunction_Bound_Unbounded)},
  { 575, -1, -1, sizeof(::substrait::Expression_WindowFunction_Bound)},
  { 586, -1, -1, sizeof(::substrait::Expression_WindowFunction)},
  { 602, -1, -1, sizeof(::substrait::Expression_IfThen_IfClause)},
  { 610, -1, -1, sizeof(::substrait::Expression_IfThen)},
  { 618, -1, -1, sizeof(::substrait::Expression_Cast)},
  { 627, -1, -1, sizeof(::substrait::Expression_SwitchExpression_IfValue)},
  { 635, -1, -1, sizeof(::substrait::Expression_SwitchExpression)},
  { 644, -1, -1, sizeof(::substrait::Expression_SingularOrList)},
  { 652, -1, -1, sizeof(::substrait::Expression_MultiOrList_Record)},
  { 659, -1, -1, sizeof(::substrait::Expression_MultiOrList)},
  { 667, -1, -1, sizeof(::substrait::Expression_EmbeddedFunction_PythonPickleFunction)},
  { 675, -1, -1, sizeof(::substrait::Expression_EmbeddedFunction_WebAssemblyFunction)},
  { 683, -1, -1, sizeof(::substrait::Expression_EmbeddedFunction)},
  { 694, -1, -1, sizeof(::substrait::Expression_ReferenceSegment_MapKey)},
  { 702, -1, -1, sizeof(::substrait::Expression_ReferenceSegment_StructField)},
  { 710, -1, -1, sizeof(::substrait::Expression_ReferenceSegment_ListElement)},
  { 718, -1, -1, sizeof(::substrait::Expression_ReferenceSegment)},
  { 728, -1, -1, sizeof(::substrait::Expression_MaskExpression_Select)},
  { 738, -1, -1, sizeof(::substrait::Expression_MaskExpression_StructSelect)},
  { 745, -1, -1, sizeof(::substrait::Expression_MaskExpression_StructItem)},
  { 753, -1, -1, sizeof(::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement)},
  { 760, -1, -1, sizeof(::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice)},
  { 768, -1, -1, sizeof(::substrait::Expression_MaskExpression_ListSelect_ListSelectItem)},
  { 777, -1, -1, sizeof(::substrait::Expression_MaskExpression_ListSelect)},
  { 785, -1, -1, sizeof(::substrait::Expression_MaskExpression_MapSelect_MapKey)},
  { 792, -1, -1, sizeof(::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression)},
  { 799, -1, -1, sizeof(::substrait::Expression_MaskExpression_MapSelect)},
  { 809, -1, -1, sizeof(::substrait::Expression_MaskExpression)},
  { 817, -1, -1, sizeof(::substrait::Expression_FieldReference_RootReference)},
  { 823, -1, -1, sizeof(::substrait::Expression_FieldReference_OuterReference)},
  { 830, -1, -1, sizeof(::substrait::Expression_FieldReference)},
  { 843, -1, -1, sizeof(::substrait::Expression_Subquery_Scalar)},
  { 850, -1, -1, sizeof(::substrait::Expression_Subquery_InPredicate)},
  { 858, -1, -1, sizeof(::substrait::Expression_Subquery_SetPredicate)},
  { 866, -1, -1, sizeof(::substrait::Expression_Subquery_SetComparison)},
  { 876, -1, -1, sizeof(::substrait::Expression_Subquery)},
  { 887, -1, -1, sizeof(::substrait::Expression)},
  { 905, -1, -1, sizeof(::substrait::SortField)},
  { 915, -1, -1, sizeof(::substrait::AggregateFunction_ReferenceRel)},
  { 922, -1, -1, sizeof(::substrait::AggregateFunction)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::substrait::_RelCommon_Direct_default_instance_._instance,
  &::substrait::_RelCommon_Emit_default_instance_._instance,
  &::substrait::_RelCommon_Hint_Stats_default_instance_._instance,
  &::substrait::_RelCommon_Hint_RuntimeConstraint_default_instance_._instance,
  &::substrait::_RelCommon_Hint_default_instance_._instance,
  &::substrait::_RelCommon_default_instance_._instance,
  &::substrait::_ReadRel_NamedTable_default_instance_._instance,
  &::substrait::_ReadRel_VirtualTable_default_instance_._instance,
  &::substrait::_ReadRel_ExtensionTable_default_instance_._instance,
  &::substrait::_ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions_default_instance_._instance,
  &::substrait::_ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions_default_instance_._instance,
  &::substrait::_ReadRel_LocalFiles_FileOrFiles_OrcReadOptions_default_instance_._instance,
  &::substrait::_ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions_default_instance_._instance,
  &::substrait::_ReadRel_LocalFiles_FileOrFiles_default_instance_._instance,
  &::substrait::_ReadRel_LocalFiles_default_instance_._instance,
  &::substrait::_ReadRel_default_instance_._instance,
  &::substrait::_ProjectRel_default_instance_._instance,
  &::substrait::_JoinRel_default_instance_._instance,
  &::substrait::_CrossRel_default_instance_._instance,
  &::substrait::_FetchRel_default_instance_._instance,
  &::substrait::_AggregateRel_Grouping_default_instance_._instance,
  &::substrait::_AggregateRel_Measure_default_instance_._instance,
  &::substrait::_AggregateRel_default_instance_._instance,
  &::substrait::_SortRel_default_instance_._instance,
  &::substrait::_FilterRel_default_instance_._instance,
  &::substrait::_SetRel_default_instance_._instance,
  &::substrait::_ExtensionSingleRel_default_instance_._instance,
  &::substrait::_ExtensionLeafRel_default_instance_._instance,
  &::substrait::_ExtensionMultiRel_default_instance_._instance,
  &::substrait::_ExchangeRel_ScatterFields_default_instance_._instance,
  &::substrait::_ExchangeRel_SingleBucketExpression_default_instance_._instance,
  &::substrait::_ExchangeRel_MultiBucketExpression_default_instance_._instance,
  &::substrait::_ExchangeRel_Broadcast_default_instance_._instance,
  &::substrait::_ExchangeRel_RoundRobin_default_instance_._instance,
  &::substrait::_ExchangeRel_ExchangeTarget_default_instance_._instance,
  &::substrait::_ExchangeRel_default_instance_._instance,
  &::substrait::_RelRoot_default_instance_._instance,
  &::substrait::_Rel_default_instance_._instance,
  &::substrait::_NamedObjectWrite_default_instance_._instance,
  &::substrait::_ExtensionObject_default_instance_._instance,
  &::substrait::_DdlRel_default_instance_._instance,
  &::substrait::_WriteRel_default_instance_._instance,
  &::substrait::_FunctionArgument_Enum_default_instance_._instance,
  &::substrait::_FunctionArgument_default_instance_._instance,
  &::substrait::_Expression_Enum_Empty_default_instance_._instance,
  &::substrait::_Expression_Enum_default_instance_._instance,
  &::substrait::_Expression_Literal_VarChar_default_instance_._instance,
  &::substrait::_Expression_Literal_Decimal_default_instance_._instance,
  &::substrait::_Expression_Literal_Map_KeyValue_default_instance_._instance,
  &::substrait::_Expression_Literal_Map_default_instance_._instance,
  &::substrait::_Expression_Literal_IntervalYearToMonth_default_instance_._instance,
  &::substrait::_Expression_Literal_IntervalDayToSecond_default_instance_._instance,
  &::substrait::_Expression_Literal_Struct_default_instance_._instance,
  &::substrait::_Expression_Literal_List_default_instance_._instance,
  &::substrait::_Expression_Literal_UserDefined_default_instance_._instance,
  &::substrait::_Expression_Literal_default_instance_._instance,
  &::substrait::_Expression_ScalarFunction_default_instance_._instance,
  &::substrait::_Expression_WindowFunction_Bound_Preceding_default_instance_._instance,
  &::substrait::_Expression_WindowFunction_Bound_Following_default_instance_._instance,
  &::substrait::_Expression_WindowFunction_Bound_CurrentRow_default_instance_._instance,
  &::substrait::_Expression_WindowFunction_Bound_Unbounded_default_instance_._instance,
  &::substrait::_Expression_WindowFunction_Bound_default_instance_._instance,
  &::substrait::_Expression_WindowFunction_default_instance_._instance,
  &::substrait::_Expression_IfThen_IfClause_default_instance_._instance,
  &::substrait::_Expression_IfThen_default_instance_._instance,
  &::substrait::_Expression_Cast_default_instance_._instance,
  &::substrait::_Expression_SwitchExpression_IfValue_default_instance_._instance,
  &::substrait::_Expression_SwitchExpression_default_instance_._instance,
  &::substrait::_Expression_SingularOrList_default_instance_._instance,
  &::substrait::_Expression_MultiOrList_Record_default_instance_._instance,
  &::substrait::_Expression_MultiOrList_default_instance_._instance,
  &::substrait::_Expression_EmbeddedFunction_PythonPickleFunction_default_instance_._instance,
  &::substrait::_Expression_EmbeddedFunction_WebAssemblyFunction_default_instance_._instance,
  &::substrait::_Expression_EmbeddedFunction_default_instance_._instance,
  &::substrait::_Expression_ReferenceSegment_MapKey_default_instance_._instance,
  &::substrait::_Expression_ReferenceSegment_StructField_default_instance_._instance,
  &::substrait::_Expression_ReferenceSegment_ListElement_default_instance_._instance,
  &::substrait::_Expression_ReferenceSegment_default_instance_._instance,
  &::substrait::_Expression_MaskExpression_Select_default_instance_._instance,
  &::substrait::_Expression_MaskExpression_StructSelect_default_instance_._instance,
  &::substrait::_Expression_MaskExpression_StructItem_default_instance_._instance,
  &::substrait::_Expression_MaskExpression_ListSelect_ListSelectItem_ListElement_default_instance_._instance,
  &::substrait::_Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice_default_instance_._instance,
  &::substrait::_Expression_MaskExpression_ListSelect_ListSelectItem_default_instance_._instance,
  &::substrait::_Expression_MaskExpression_ListSelect_default_instance_._instance,
  &::substrait::_Expression_MaskExpression_MapSelect_MapKey_default_instance_._instance,
  &::substrait::_Expression_MaskExpression_MapSelect_MapKeyExpression_default_instance_._instance,
  &::substrait::_Expression_MaskExpression_MapSelect_default_instance_._instance,
  &::substrait::_Expression_MaskExpression_default_instance_._instance,
  &::substrait::_Expression_FieldReference_RootReference_default_instance_._instance,
  &::substrait::_Expression_FieldReference_OuterReference_default_instance_._instance,
  &::substrait::_Expression_FieldReference_default_instance_._instance,
  &::substrait::_Expression_Subquery_Scalar_default_instance_._instance,
  &::substrait::_Expression_Subquery_InPredicate_default_instance_._instance,
  &::substrait::_Expression_Subquery_SetPredicate_default_instance_._instance,
  &::substrait::_Expression_Subquery_SetComparison_default_instance_._instance,
  &::substrait::_Expression_Subquery_default_instance_._instance,
  &::substrait::_Expression_default_instance_._instance,
  &::substrait::_SortField_default_instance_._instance,
  &::substrait::_AggregateFunction_ReferenceRel_default_instance_._instance,
  &::substrait::_AggregateFunction_default_instance_._instance,
};

const char descriptor_table_protodef_substrait_2falgebra_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027substrait/algebra.proto\022\tsubstrait\032\031go"
  "ogle/protobuf/any.proto\032\033google/protobuf"
  "/empty.proto\032%substrait/extensions/exten"
  "sions.proto\032\024substrait/type.proto\"\231\005\n\tRe"
  "lCommon\022-\n\006direct\030\001 \001(\0132\033.substrait.RelC"
  "ommon.DirectH\000\022)\n\004emit\030\002 \001(\0132\031.substrait"
  ".RelCommon.EmitH\000\022\'\n\004hint\030\003 \001(\0132\031.substr"
  "ait.RelCommon.Hint\022C\n\022advanced_extension"
  "\030\004 \001(\0132\'.substrait.extensions.AdvancedEx"
  "tension\032\010\n\006Direct\032\036\n\004Emit\022\026\n\016output_mapp"
  "ing\030\001 \003(\005\032\214\003\n\004Hint\022.\n\005stats\030\001 \001(\0132\037.subs"
  "trait.RelCommon.Hint.Stats\022\?\n\nconstraint"
  "\030\002 \001(\0132+.substrait.RelCommon.Hint.Runtim"
  "eConstraint\022C\n\022advanced_extension\030\n \001(\0132"
  "\'.substrait.extensions.AdvancedExtension"
  "\032t\n\005Stats\022\021\n\trow_count\030\001 \001(\001\022\023\n\013record_s"
  "ize\030\002 \001(\001\022C\n\022advanced_extension\030\n \001(\0132\'."
  "substrait.extensions.AdvancedExtension\032X"
  "\n\021RuntimeConstraint\022C\n\022advanced_extensio"
  "n\030\n \001(\0132\'.substrait.extensions.AdvancedE"
  "xtensionB\013\n\temit_kind\"\326\013\n\007ReadRel\022$\n\006com"
  "mon\030\001 \001(\0132\024.substrait.RelCommon\022+\n\013base_"
  "schema\030\002 \001(\0132\026.substrait.NamedStruct\022%\n\006"
  "filter\030\003 \001(\0132\025.substrait.Expression\0228\n\np"
  "rojection\030\004 \001(\0132$.substrait.Expression.M"
  "askExpression\022C\n\022advanced_extension\030\n \001("
  "\0132\'.substrait.extensions.AdvancedExtensi"
  "on\0228\n\rvirtual_table\030\005 \001(\0132\037.substrait.Re"
  "adRel.VirtualTableH\000\0224\n\013local_files\030\006 \001("
  "\0132\035.substrait.ReadRel.LocalFilesH\000\0224\n\013na"
  "med_table\030\007 \001(\0132\035.substrait.ReadRel.Name"
  "dTableH\000\022<\n\017extension_table\030\010 \001(\0132!.subs"
  "trait.ReadRel.ExtensionTableH\000\032`\n\nNamedT"
  "able\022\r\n\005names\030\001 \003(\t\022C\n\022advanced_extensio"
  "n\030\n \001(\0132\'.substrait.extensions.AdvancedE"
  "xtension\032D\n\014VirtualTable\0224\n\006values\030\001 \003(\013"
  "2$.substrait.Expression.Literal.Struct\0326"
  "\n\016ExtensionTable\022$\n\006detail\030\001 \001(\0132\024.googl"
  "e.protobuf.Any\032\200\006\n\nLocalFiles\0228\n\005items\030\001"
  " \003(\0132).substrait.ReadRel.LocalFiles.File"
  "OrFiles\022C\n\022advanced_extension\030\n \001(\0132\'.su"
  "bstrait.extensions.AdvancedExtension\032\362\004\n"
  "\013FileOrFiles\022\022\n\010uri_path\030\001 \001(\tH\000\022\027\n\ruri_"
  "path_glob\030\002 \001(\tH\000\022\022\n\010uri_file\030\003 \001(\tH\000\022\024\n"
  "\nuri_folder\030\004 \001(\tH\000\022\027\n\017partition_index\030\006"
  " \001(\004\022\r\n\005start\030\007 \001(\004\022\016\n\006length\030\010 \001(\004\022O\n\007p"
  "arquet\030\t \001(\0132<.substrait.ReadRel.LocalFi"
  "les.FileOrFiles.ParquetReadOptionsH\001\022K\n\005"
  "arrow\030\n \001(\0132:.substrait.ReadRel.LocalFil"
  "es.FileOrFiles.ArrowReadOptionsH\001\022G\n\003orc"
  "\030\013 \001(\01328.substrait.ReadRel.LocalFiles.Fi"
  "leOrFiles.OrcReadOptionsH\001\022)\n\textension\030"
  "\014 \001(\0132\024.google.protobuf.AnyH\001\022I\n\004dwrf\030\r "
  "\001(\01329.substrait.ReadRel.LocalFiles.FileO"
  "rFiles.DwrfReadOptionsH\001\032\024\n\022ParquetReadO"
  "ptions\032\022\n\020ArrowReadOptions\032\020\n\016OrcReadOpt"
  "ions\032\021\n\017DwrfReadOptionsB\013\n\tpath_typeB\r\n\013"
  "file_formatJ\004\010\005\020\006R\006formatB\013\n\tread_type\"\302"
  "\001\n\nProjectRel\022$\n\006common\030\001 \001(\0132\024.substrai"
  "t.RelCommon\022\035\n\005input\030\002 \001(\0132\016.substrait.R"
  "el\022*\n\013expressions\030\003 \003(\0132\025.substrait.Expr"
  "ession\022C\n\022advanced_extension\030\n \001(\0132\'.sub"
  "strait.extensions.AdvancedExtension\"\361\003\n\007"
  "JoinRel\022$\n\006common\030\001 \001(\0132\024.substrait.RelC"
  "ommon\022\034\n\004left\030\002 \001(\0132\016.substrait.Rel\022\035\n\005r"
  "ight\030\003 \001(\0132\016.substrait.Rel\022)\n\nexpression"
  "\030\004 \001(\0132\025.substrait.Expression\022/\n\020post_jo"
  "in_filter\030\005 \001(\0132\025.substrait.Expression\022)"
  "\n\004type\030\006 \001(\0162\033.substrait.JoinRel.JoinTyp"
  "e\022C\n\022advanced_extension\030\n \001(\0132\'.substrai"
  "t.extensions.AdvancedExtension\"\266\001\n\010JoinT"
  "ype\022\031\n\025JOIN_TYPE_UNSPECIFIED\020\000\022\023\n\017JOIN_T"
  "YPE_INNER\020\001\022\023\n\017JOIN_TYPE_OUTER\020\002\022\022\n\016JOIN"
  "_TYPE_LEFT\020\003\022\023\n\017JOIN_TYPE_RIGHT\020\004\022\022\n\016JOI"
  "N_TYPE_SEMI\020\005\022\022\n\016JOIN_TYPE_ANTI\020\006\022\024\n\020JOI"
  "N_TYPE_SINGLE\020\007\"\262\001\n\010CrossRel\022$\n\006common\030\001"
  " \001(\0132\024.substrait.RelCommon\022\034\n\004left\030\002 \001(\013"
  "2\016.substrait.Rel\022\035\n\005right\030\003 \001(\0132\016.substr"
  "ait.Rel\022C\n\022advanced_extension\030\n \001(\0132\'.su"
  "bstrait.extensions.AdvancedExtension\"\263\001\n"
  "\010FetchRel\022$\n\006common\030\001 \001(\0132\024.substrait.Re"
  "lCommon\022\035\n\005input\030\002 \001(\0132\016.substrait.Rel\022\016"
  "\n\006offset\030\003 \001(\003\022\r\n\005count\030\004 \001(\003\022C\n\022advance"
  "d_extension\030\n \001(\0132\'.substrait.extensions"
  ".AdvancedExtension\"\242\003\n\014AggregateRel\022$\n\006c"
  "ommon\030\001 \001(\0132\024.substrait.RelCommon\022\035\n\005inp"
  "ut\030\002 \001(\0132\016.substrait.Rel\0223\n\tgroupings\030\003 "
  "\003(\0132 .substrait.AggregateRel.Grouping\0221\n"
  "\010measures\030\004 \003(\0132\037.substrait.AggregateRel"
  ".Measure\022C\n\022advanced_extension\030\n \001(\0132\'.s"
  "ubstrait.extensions.AdvancedExtension\032\?\n"
  "\010Grouping\0223\n\024grouping_expressions\030\001 \003(\0132"
  "\025.substrait.Expression\032_\n\007Measure\022-\n\007mea"
  "sure\030\001 \001(\0132\034.substrait.AggregateFunction"
  "\022%\n\006filter\030\002 \001(\0132\025.substrait.Expression\""
  "\270\001\n\007SortRel\022$\n\006common\030\001 \001(\0132\024.substrait."
  "RelCommon\022\035\n\005input\030\002 \001(\0132\016.substrait.Rel"
  "\022#\n\005sorts\030\003 \003(\0132\024.substrait.SortField\022C\n"
  "\022advanced_extension\030\n \001(\0132\'.substrait.ex"
  "tensions.AdvancedExtension\"\277\001\n\tFilterRel"
  "\022$\n\006common\030\001 \001(\0132\024.substrait.RelCommon\022\035"
  "\n\005input\030\002 \001(\0132\016.substrait.Rel\022(\n\tconditi"
  "on\030\003 \001(\0132\025.substrait.Expression\022C\n\022advan"
  "ced_extension\030\n \001(\0132\'.substrait.extensio"
  "ns.AdvancedExtension\"\203\003\n\006SetRel\022$\n\006commo"
  "n\030\001 \001(\0132\024.substrait.RelCommon\022\036\n\006inputs\030"
  "\002 \003(\0132\016.substrait.Rel\022#\n\002op\030\003 \001(\0162\027.subs"
  "trait.SetRel.SetOp\022C\n\022advanced_extension"
  "\030\n \001(\0132\'.substrait.extensions.AdvancedEx"
  "tension\"\310\001\n\005SetOp\022\026\n\022SET_OP_UNSPECIFIED\020"
  "\000\022\030\n\024SET_OP_MINUS_PRIMARY\020\001\022\031\n\025SET_OP_MI"
  "NUS_MULTISET\020\002\022\037\n\033SET_OP_INTERSECTION_PR"
  "IMARY\020\003\022 \n\034SET_OP_INTERSECTION_MULTISET\020"
  "\004\022\031\n\025SET_OP_UNION_DISTINCT\020\005\022\024\n\020SET_OP_U"
  "NION_ALL\020\006\"\177\n\022ExtensionSingleRel\022$\n\006comm"
  "on\030\001 \001(\0132\024.substrait.RelCommon\022\035\n\005input\030"
  "\002 \001(\0132\016.substrait.Rel\022$\n\006detail\030\003 \001(\0132\024."
  "google.protobuf.Any\"^\n\020ExtensionLeafRel\022"
  "$\n\006common\030\001 \001(\0132\024.substrait.RelCommon\022$\n"
  "\006detail\030\002 \001(\0132\024.google.protobuf.Any\"\177\n\021E"
  "xtensionMultiRel\022$\n\006common\030\001 \001(\0132\024.subst"
  "rait.RelCommon\022\036\n\006inputs\030\002 \003(\0132\016.substra"
  "it.Rel\022$\n\006detail\030\003 \001(\0132\024.google.protobuf"
  ".Any\"\303\007\n\013ExchangeRel\022$\n\006common\030\001 \001(\0132\024.s"
  "ubstrait.RelCommon\022\035\n\005input\030\002 \001(\0132\016.subs"
  "trait.Rel\022\027\n\017partition_count\030\003 \001(\005\0226\n\007ta"
  "rgets\030\004 \003(\0132%.substrait.ExchangeRel.Exch"
  "angeTarget\022A\n\021scatter_by_fields\030\005 \001(\0132$."
  "substrait.ExchangeRel.ScatterFieldsH\000\022F\n"
  "\rsingle_target\030\006 \001(\0132-.substrait.Exchang"
  "eRel.SingleBucketExpressionH\000\022D\n\014multi_t"
  "arget\030\007 \001(\0132,.substrait.ExchangeRel.Mult"
  "iBucketExpressionH\000\0228\n\013round_robin\030\010 \001(\013"
  "2!.substrait.ExchangeRel.RoundRobinH\000\0225\n"
  "\tbroadcast\030\t \001(\0132 .substrait.ExchangeRel"
  ".BroadcastH\000\022C\n\022advanced_extension\030\n \001(\013"
  "2\'.substrait.extensions.AdvancedExtensio"
  "n\032E\n\rScatterFields\0224\n\006fields\030\001 \003(\0132$.sub"
  "strait.Expression.FieldReference\032C\n\026Sing"
  "leBucketExpression\022)\n\nexpression\030\001 \001(\0132\025"
  ".substrait.Expression\032`\n\025MultiBucketExpr"
  "ession\022)\n\nexpression\030\001 \001(\0132\025.substrait.E"
  "xpression\022\034\n\024constrained_to_count\030\002 \001(\010\032"
  "\013\n\tBroadcast\032\033\n\nRoundRobin\022\r\n\005exact\030\001 \001("
  "\010\032n\n\016ExchangeTarget\022\024\n\014partition_id\030\001 \003("
  "\005\022\r\n\003uri\030\002 \001(\tH\000\022(\n\010extended\030\003 \001(\0132\024.goo"
  "gle.protobuf.AnyH\000B\r\n\013target_typeB\017\n\rexc"
  "hange_kind\"7\n\007RelRoot\022\035\n\005input\030\001 \001(\0132\016.s"
  "ubstrait.Rel\022\r\n\005names\030\002 \003(\t\"\302\004\n\003Rel\022\"\n\004r"
  "ead\030\001 \001(\0132\022.substrait.ReadRelH\000\022&\n\006filte"
  "r\030\002 \001(\0132\024.substrait.FilterRelH\000\022$\n\005fetch"
  "\030\003 \001(\0132\023.substrait.FetchRelH\000\022,\n\taggrega"
  "te\030\004 \001(\0132\027.substrait.AggregateRelH\000\022\"\n\004s"
  "ort\030\005 \001(\0132\022.substrait.SortRelH\000\022\"\n\004join\030"
  "\006 \001(\0132\022.substrait.JoinRelH\000\022(\n\007project\030\007"
  " \001(\0132\025.substrait.ProjectRelH\000\022 \n\003set\030\010 \001"
  "(\0132\021.substrait.SetRelH\000\0229\n\020extension_sin"
  "gle\030\t \001(\0132\035.substrait.ExtensionSingleRel"
  "H\000\0227\n\017extension_multi\030\n \001(\0132\034.substrait."
  "ExtensionMultiRelH\000\0225\n\016extension_leaf\030\013 "
  "\001(\0132\033.substrait.ExtensionLeafRelH\000\022$\n\005cr"
  "oss\030\014 \001(\0132\023.substrait.CrossRelH\000\022*\n\010exch"
  "ange\030\r \001(\0132\026.substrait.ExchangeRelH\000B\n\n\010"
  "rel_type\"f\n\020NamedObjectWrite\022\r\n\005names\030\001 "
  "\003(\t\022C\n\022advanced_extension\030\n \001(\0132\'.substr"
  "ait.extensions.AdvancedExtension\"7\n\017Exte"
  "nsionObject\022$\n\006detail\030\001 \001(\0132\024.google.pro"
  "tobuf.Any\"\316\004\n\006DdlRel\0223\n\014named_object\030\001 \001"
  "(\0132\033.substrait.NamedObjectWriteH\000\0226\n\020ext"
  "ension_object\030\002 \001(\0132\032.substrait.Extensio"
  "nObjectH\000\022,\n\014table_schema\030\003 \001(\0132\026.substr"
  "ait.NamedStruct\022<\n\016table_defaults\030\004 \001(\0132"
  "$.substrait.Expression.Literal.Struct\022+\n"
  "\006object\030\005 \001(\0162\033.substrait.DdlRel.DdlObje"
  "ct\022#\n\002op\030\006 \001(\0162\027.substrait.DdlRel.DdlOp\022"
  "\'\n\017view_definition\030\007 \001(\0132\016.substrait.Rel"
  "\"R\n\tDdlObject\022\032\n\026DDL_OBJECT_UNSPECIFIED\020"
  "\000\022\024\n\020DDL_OBJECT_TABLE\020\001\022\023\n\017DDL_OBJECT_VI"
  "EW\020\002\"\215\001\n\005DdlOp\022\026\n\022DDL_OP_UNSPECIFIED\020\000\022\021"
  "\n\rDDL_OP_CREATE\020\001\022\034\n\030DDL_OP_CREATE_OR_RE"
  "PLACE\020\002\022\020\n\014DDL_OP_ALTER\020\003\022\017\n\013DDL_OP_DROP"
  "\020\004\022\030\n\024DDL_OP_DROP_IF_EXIST\020\005B\014\n\nwrite_ty"
  "pe\"\207\004\n\010WriteRel\0222\n\013named_table\030\001 \001(\0132\033.s"
  "ubstrait.NamedObjectWriteH\000\0225\n\017extension"
  "_table\030\002 \001(\0132\032.substrait.ExtensionObject"
  "H\000\022,\n\014table_schema\030\003 \001(\0132\026.substrait.Nam"
  "edStruct\022\'\n\002op\030\004 \001(\0162\033.substrait.WriteRe"
  "l.WriteOp\022\035\n\005input\030\005 \001(\0132\016.substrait.Rel"
  "\022.\n\006output\030\006 \001(\0162\036.substrait.WriteRel.Ou"
  "tputMode\"u\n\007WriteOp\022\030\n\024WRITE_OP_UNSPECIF"
  "IED\020\000\022\023\n\017WRITE_OP_INSERT\020\001\022\023\n\017WRITE_OP_D"
  "ELETE\020\002\022\023\n\017WRITE_OP_UPDATE\020\003\022\021\n\rWRITE_OP"
  "_CTAS\020\004\"e\n\nOutputMode\022\033\n\027OUTPUT_MODE_UNS"
  "PECIFIED\020\000\022\031\n\025OUTPUT_MODE_NO_OUTPUT\020\001\022\037\n"
  "\033OUTPUT_MODE_MODIFIED_TUPLES\020\002B\014\n\nwrite_"
  "type\"\362\001\n\020FunctionArgument\0220\n\004enum\030\001 \001(\0132"
  " .substrait.FunctionArgument.EnumH\000\022\037\n\004t"
  "ype\030\002 \001(\0132\017.substrait.TypeH\000\022&\n\005value\030\003 "
  "\001(\0132\025.substrait.ExpressionH\000\032W\n\004Enum\022\023\n\t"
  "specified\030\001 \001(\tH\000\022-\n\013unspecified\030\002 \001(\0132\026"
  ".google.protobuf.EmptyH\000B\013\n\tenum_kindB\n\n"
  "\010arg_type\"\342@\n\nExpression\0220\n\007literal\030\001 \001("
  "\0132\035.substrait.Expression.LiteralH\000\0229\n\tse"
  "lection\030\002 \001(\0132$.substrait.Expression.Fie"
  "ldReferenceH\000\022\?\n\017scalar_function\030\003 \001(\0132$"
  ".substrait.Expression.ScalarFunctionH\000\022\?"
  "\n\017window_function\030\005 \001(\0132$.substrait.Expr"
  "ession.WindowFunctionH\000\022/\n\007if_then\030\006 \001(\013"
  "2\034.substrait.Expression.IfThenH\000\022C\n\021swit"
  "ch_expression\030\007 \001(\0132&.substrait.Expressi"
  "on.SwitchExpressionH\000\022@\n\020singular_or_lis"
  "t\030\010 \001(\0132$.substrait.Expression.SingularO"
  "rListH\000\022:\n\rmulti_or_list\030\t \001(\0132!.substra"
  "it.Expression.MultiOrListH\000\022*\n\004cast\030\013 \001("
  "\0132\032.substrait.Expression.CastH\000\0222\n\010subqu"
  "ery\030\014 \001(\0132\036.substrait.Expression.Subquer"
  "yH\000\022.\n\004enum\030\n \001(\0132\032.substrait.Expression"
  ".EnumB\002\030\001H\000\032r\n\004Enum\022\023\n\tspecified\030\001 \001(\tH\000"
  "\0227\n\013unspecified\030\002 \001(\0132 .substrait.Expres"
  "sion.Enum.EmptyH\000\032\013\n\005Empty:\002\030\001:\002\030\001B\013\n\ten"
  "um_kind\032\347\014\n\007Literal\022\021\n\007boolean\030\001 \001(\010H\000\022\014"
  "\n\002i8\030\002 \001(\005H\000\022\r\n\003i16\030\003 \001(\005H\000\022\r\n\003i32\030\005 \001(\005"
  "H\000\022\r\n\003i64\030\007 \001(\003H\000\022\016\n\004fp32\030\n \001(\002H\000\022\016\n\004fp6"
  "4\030\013 \001(\001H\000\022\020\n\006string\030\014 \001(\tH\000\022\020\n\006binary\030\r "
  "\001(\014H\000\022\023\n\ttimestamp\030\016 \001(\003H\000\022\016\n\004date\030\020 \001(\005"
  "H\000\022\016\n\004time\030\021 \001(\003H\000\022S\n\026interval_year_to_m"
  "onth\030\023 \001(\01321.substrait.Expression.Litera"
  "l.IntervalYearToMonthH\000\022S\n\026interval_day_"
  "to_second\030\024 \001(\01321.substrait.Expression.L"
  "iteral.IntervalDayToSecondH\000\022\024\n\nfixed_ch"
  "ar\030\025 \001(\tH\000\0229\n\010var_char\030\026 \001(\0132%.substrait"
  ".Expression.Literal.VarCharH\000\022\026\n\014fixed_b"
  "inary\030\027 \001(\014H\000\0228\n\007decimal\030\030 \001(\0132%.substra"
  "it.Expression.Literal.DecimalH\000\0226\n\006struc"
  "t\030\031 \001(\0132$.substrait.Expression.Literal.S"
  "tructH\000\0220\n\003map\030\032 \001(\0132!.substrait.Express"
  "ion.Literal.MapH\000\022\026\n\014timestamp_tz\030\033 \001(\003H"
  "\000\022\016\n\004uuid\030\034 \001(\014H\000\022\037\n\004null\030\035 \001(\0132\017.substr"
  "ait.TypeH\000\0222\n\004list\030\036 \001(\0132\".substrait.Exp"
  "ression.Literal.ListH\000\022*\n\nempty_list\030\037 \001"
  "(\0132\024.substrait.Type.ListH\000\022(\n\tempty_map\030"
  "  \001(\0132\023.substrait.Type.MapH\000\022A\n\014user_def"
  "ined\030! \001(\0132).substrait.Expression.Litera"
  "l.UserDefinedH\000\022\020\n\010nullable\0302 \001(\010\022 \n\030typ"
  "e_variation_reference\0303 \001(\r\032(\n\007VarChar\022\r"
  "\n\005value\030\001 \001(\t\022\016\n\006length\030\002 \001(\r\032:\n\007Decimal"
  "\022\r\n\005value\030\001 \001(\014\022\021\n\tprecision\030\002 \001(\005\022\r\n\005sc"
  "ale\030\003 \001(\005\032\253\001\n\003Map\022>\n\nkey_values\030\001 \003(\0132*."
  "substrait.Expression.Literal.Map.KeyValu"
  "e\032d\n\010KeyValue\022*\n\003key\030\001 \001(\0132\035.substrait.E"
  "xpression.Literal\022,\n\005value\030\002 \001(\0132\035.subst"
  "rait.Expression.Literal\0324\n\023IntervalYearT"
  "oMonth\022\r\n\005years\030\001 \001(\005\022\016\n\006months\030\002 \001(\005\032J\n"
  "\023IntervalDayToSecond\022\014\n\004days\030\001 \001(\005\022\017\n\007se"
  "conds\030\002 \001(\005\022\024\n\014microseconds\030\003 \001(\005\0327\n\006Str"
  "uct\022-\n\006fields\030\001 \003(\0132\035.substrait.Expressi"
  "on.Literal\0325\n\004List\022-\n\006values\030\001 \003(\0132\035.sub"
  "strait.Expression.Literal\032~\n\013UserDefined"
  "\022\026\n\016type_reference\030\001 \001(\r\0222\n\017type_paramet"
  "ers\030\003 \003(\0132\031.substrait.Type.Parameter\022#\n\005"
  "value\030\002 \001(\0132\024.google.protobuf.AnyB\016\n\014lit"
  "eral_type\032\253\001\n\016ScalarFunction\022\032\n\022function"
  "_reference\030\001 \001(\r\022.\n\targuments\030\004 \003(\0132\033.su"
  "bstrait.FunctionArgument\022$\n\013output_type\030"
  "\003 \001(\0132\017.substrait.Type\022\'\n\004args\030\002 \003(\0132\025.s"
  "ubstrait.ExpressionB\002\030\001\032\207\007\n\016WindowFuncti"
  "on\022\032\n\022function_reference\030\001 \001(\r\022.\n\targume"
  "nts\030\t \003(\0132\033.substrait.FunctionArgument\022$"
  "\n\013output_type\030\007 \001(\0132\017.substrait.Type\022*\n\005"
  "phase\030\006 \001(\0162\033.substrait.AggregationPhase"
  "\022#\n\005sorts\030\003 \003(\0132\024.substrait.SortField\022F\n"
  "\ninvocation\030\n \001(\01622.substrait.AggregateF"
  "unction.AggregationInvocation\022)\n\npartiti"
  "ons\030\002 \003(\0132\025.substrait.Expression\022\?\n\013lowe"
  "r_bound\030\005 \001(\0132*.substrait.Expression.Win"
  "dowFunction.Bound\022\?\n\013upper_bound\030\004 \001(\0132*"
  ".substrait.Expression.WindowFunction.Bou"
  "nd\022\'\n\004args\030\010 \003(\0132\025.substrait.ExpressionB"
  "\002\030\001\032\223\003\n\005Bound\022I\n\tpreceding\030\001 \001(\01324.subst"
  "rait.Expression.WindowFunction.Bound.Pre"
  "cedingH\000\022I\n\tfollowing\030\002 \001(\01324.substrait."
  "Expression.WindowFunction.Bound.Followin"
  "gH\000\022L\n\013current_row\030\003 \001(\01325.substrait.Exp"
  "ression.WindowFunction.Bound.CurrentRowH"
  "\000\022I\n\tunbounded\030\004 \001(\01324.substrait.Express"
  "ion.WindowFunction.Bound.UnboundedH\000\032\033\n\t"
  "Preceding\022\016\n\006offset\030\001 \001(\003\032\033\n\tFollowing\022\016"
  "\n\006offset\030\001 \001(\003\032\014\n\nCurrentRow\032\013\n\tUnbounde"
  "dB\006\n\004kind\032\265\001\n\006IfThen\0222\n\003ifs\030\001 \003(\0132%.subs"
  "trait.Expression.IfThen.IfClause\022#\n\004else"
  "\030\002 \001(\0132\025.substrait.Expression\032R\n\010IfClaus"
  "e\022!\n\002if\030\001 \001(\0132\025.substrait.Expression\022#\n\004"
  "then\030\002 \001(\0132\025.substrait.Expression\032\216\002\n\004Ca"
  "st\022\035\n\004type\030\001 \001(\0132\017.substrait.Type\022$\n\005inp"
  "ut\030\002 \001(\0132\025.substrait.Expression\022D\n\020failu"
  "re_behavior\030\003 \001(\0162*.substrait.Expression"
  ".Cast.FailureBehavior\"{\n\017FailureBehavior"
  "\022 \n\034FAILURE_BEHAVIOR_UNSPECIFIED\020\000\022 \n\034FA"
  "ILURE_BEHAVIOR_RETURN_NULL\020\001\022$\n FAILURE_"
  "BEHAVIOR_THROW_EXCEPTION\020\002\032\365\001\n\020SwitchExp"
  "ression\022$\n\005match\030\003 \001(\0132\025.substrait.Expre"
  "ssion\022;\n\003ifs\030\001 \003(\0132..substrait.Expressio"
  "n.SwitchExpression.IfValue\022#\n\004else\030\002 \001(\013"
  "2\025.substrait.Expression\032Y\n\007IfValue\022)\n\002if"
  "\030\001 \001(\0132\035.substrait.Expression.Literal\022#\n"
  "\004then\030\002 \001(\0132\025.substrait.Expression\032^\n\016Si"
  "ngularOrList\022$\n\005value\030\001 \001(\0132\025.substrait."
  "Expression\022&\n\007options\030\002 \003(\0132\025.substrait."
  "Expression\032\237\001\n\013MultiOrList\022$\n\005value\030\001 \003("
  "\0132\025.substrait.Expression\0229\n\007options\030\002 \003("
  "\0132(.substrait.Expression.MultiOrList.Rec"
  "ord\032/\n\006Record\022%\n\006fields\030\001 \003(\0132\025.substrai"
  "t.Expression\032\243\003\n\020EmbeddedFunction\022(\n\targ"
  "uments\030\001 \003(\0132\025.substrait.Expression\022$\n\013o"
  "utput_type\030\002 \001(\0132\017.substrait.Type\022]\n\026pyt"
  "hon_pickle_function\030\003 \001(\0132;.substrait.Ex"
  "pression.EmbeddedFunction.PythonPickleFu"
  "nctionH\000\022[\n\025web_assembly_function\030\004 \001(\0132"
  ":.substrait.Expression.EmbeddedFunction."
  "WebAssemblyFunctionH\000\032>\n\024PythonPickleFun"
  "ction\022\020\n\010function\030\001 \001(\014\022\024\n\014prerequisite\030"
  "\002 \003(\t\032;\n\023WebAssemblyFunction\022\016\n\006script\030\001"
  " \001(\014\022\024\n\014prerequisite\030\002 \003(\tB\006\n\004kind\032\232\004\n\020R"
  "eferenceSegment\022@\n\007map_key\030\001 \001(\0132-.subst"
  "rait.Expression.ReferenceSegment.MapKeyH"
  "\000\022J\n\014struct_field\030\002 \001(\01322.substrait.Expr"
  "ession.ReferenceSegment.StructFieldH\000\022J\n"
  "\014list_element\030\003 \001(\01322.substrait.Expressi"
  "on.ReferenceSegment.ListElementH\000\032o\n\006Map"
  "Key\022.\n\007map_key\030\001 \001(\0132\035.substrait.Express"
  "ion.Literal\0225\n\005child\030\002 \001(\0132&.substrait.E"
  "xpression.ReferenceSegment\032S\n\013StructFiel"
  "d\022\r\n\005field\030\001 \001(\005\0225\n\005child\030\002 \001(\0132&.substr"
  "ait.Expression.ReferenceSegment\032T\n\013ListE"
  "lement\022\016\n\006offset\030\001 \001(\005\0225\n\005child\030\002 \001(\0132&."
  "substrait.Expression.ReferenceSegmentB\020\n"
  "\016reference_type\032\360\t\n\016MaskExpression\022A\n\006se"
  "lect\030\001 \001(\01321.substrait.Expression.MaskEx"
  "pression.StructSelect\022 \n\030maintain_singul"
  "ar_struct\030\002 \001(\010\032\325\001\n\006Select\022C\n\006struct\030\001 \001"
  "(\01321.substrait.Expression.MaskExpression"
  ".StructSelectH\000\022\?\n\004list\030\002 \001(\0132/.substrai"
  "t.Expression.MaskExpression.ListSelectH\000"
  "\022=\n\003map\030\003 \001(\0132..substrait.Expression.Mas"
  "kExpression.MapSelectH\000B\006\n\004type\032U\n\014Struc"
  "tSelect\022E\n\014struct_items\030\001 \003(\0132/.substrai"
  "t.Expression.MaskExpression.StructItem\032W"
  "\n\nStructItem\022\r\n\005field\030\001 \001(\005\022:\n\005child\030\002 \001"
  "(\0132+.substrait.Expression.MaskExpression"
  ".Select\032\264\003\n\nListSelect\022Q\n\tselection\030\001 \003("
  "\0132>.substrait.Expression.MaskExpression."
  "ListSelect.ListSelectItem\022:\n\005child\030\002 \001(\013"
  "2+.substrait.Expression.MaskExpression.S"
  "elect\032\226\002\n\016ListSelectItem\022Z\n\004item\030\001 \001(\0132J"
  ".substrait.Expression.MaskExpression.Lis"
  "tSelect.ListSelectItem.ListElementH\000\022Y\n\005"
  "slice\030\002 \001(\0132H.substrait.Expression.MaskE"
  "xpression.ListSelect.ListSelectItem.List"
  "SliceH\000\032\034\n\013ListElement\022\r\n\005field\030\001 \001(\005\032\'\n"
  "\tListSlice\022\r\n\005start\030\001 \001(\005\022\013\n\003end\030\002 \001(\005B\006"
  "\n\004type\032\271\002\n\tMapSelect\022D\n\003key\030\001 \001(\01325.subs"
  "trait.Expression.MaskExpression.MapSelec"
  "t.MapKeyH\000\022U\n\nexpression\030\002 \001(\0132\?.substra"
  "it.Expression.MaskExpression.MapSelect.M"
  "apKeyExpressionH\000\022:\n\005child\030\003 \001(\0132+.subst"
  "rait.Expression.MaskExpression.Select\032\031\n"
  "\006MapKey\022\017\n\007map_key\030\001 \001(\t\032.\n\020MapKeyExpres"
  "sion\022\032\n\022map_key_expression\030\001 \001(\tB\010\n\006sele"
  "ct\032\266\003\n\016FieldReference\022B\n\020direct_referenc"
  "e\030\001 \001(\0132&.substrait.Expression.Reference"
  "SegmentH\000\022@\n\020masked_reference\030\002 \001(\0132$.su"
  "bstrait.Expression.MaskExpressionH\000\022+\n\ne"
  "xpression\030\003 \001(\0132\025.substrait.ExpressionH\001"
  "\022L\n\016root_reference\030\004 \001(\01322.substrait.Exp"
  "ression.FieldReference.RootReferenceH\001\022N"
  "\n\017outer_reference\030\005 \001(\01323.substrait.Expr"
  "ession.FieldReference.OuterReferenceH\001\032\017"
  "\n\rRootReference\032#\n\016OuterReference\022\021\n\tste"
  "ps_out\030\001 \001(\rB\020\n\016reference_typeB\013\n\troot_t"
  "ype\032\214\t\n\010Subquery\0227\n\006scalar\030\001 \001(\0132%.subst"
  "rait.Expression.Subquery.ScalarH\000\022B\n\014in_"
  "predicate\030\002 \001(\0132*.substrait.Expression.S"
  "ubquery.InPredicateH\000\022D\n\rset_predicate\030\003"
  " \001(\0132+.substrait.Expression.Subquery.Set"
  "PredicateH\000\022F\n\016set_comparison\030\004 \001(\0132,.su"
  "bstrait.Expression.Subquery.SetCompariso"
  "nH\000\032\'\n\006Scalar\022\035\n\005input\030\001 \001(\0132\016.substrait"
  ".Rel\032W\n\013InPredicate\022&\n\007needles\030\001 \003(\0132\025.s"
  "ubstrait.Expression\022 \n\010haystack\030\002 \001(\0132\016."
  "substrait.Rel\032\334\001\n\014SetPredicate\022M\n\014predic"
  "ate_op\030\001 \001(\01627.substrait.Expression.Subq"
  "uery.SetPredicate.PredicateOp\022\036\n\006tuples\030"
  "\002 \001(\0132\016.substrait.Rel\"]\n\013PredicateOp\022\034\n\030"
  "PREDICATE_OP_UNSPECIFIED\020\000\022\027\n\023PREDICATE_"
  "OP_EXISTS\020\001\022\027\n\023PREDICATE_OP_UNIQUE\020\002\032\202\004\n"
  "\rSetComparison\022N\n\014reduction_op\030\001 \001(\01628.s"
  "ubstrait.Expression.Subquery.SetComparis"
  "on.ReductionOp\022P\n\rcomparison_op\030\002 \001(\01629."
  "substrait.Expression.Subquery.SetCompari"
  "son.ComparisonOp\022#\n\004left\030\003 \001(\0132\025.substra"
  "it.Expression\022\035\n\005right\030\004 \001(\0132\016.substrait"
  ".Rel\"\261\001\n\014ComparisonOp\022\035\n\031COMPARISON_OP_U"
  "NSPECIFIED\020\000\022\024\n\020COMPARISON_OP_EQ\020\001\022\024\n\020CO"
  "MPARISON_OP_NE\020\002\022\024\n\020COMPARISON_OP_LT\020\003\022\024"
  "\n\020COMPARISON_OP_GT\020\004\022\024\n\020COMPARISON_OP_LE"
  "\020\005\022\024\n\020COMPARISON_OP_GE\020\006\"W\n\013ReductionOp\022"
  "\034\n\030REDUCTION_OP_UNSPECIFIED\020\000\022\024\n\020REDUCTI"
  "ON_OP_ANY\020\001\022\024\n\020REDUCTION_OP_ALL\020\002B\017\n\rsub"
  "query_typeB\n\n\010rex_type\"\377\002\n\tSortField\022#\n\004"
  "expr\030\001 \001(\0132\025.substrait.Expression\0227\n\tdir"
  "ection\030\002 \001(\0162\".substrait.SortField.SortD"
  "irectionH\000\022\'\n\035comparison_function_refere"
  "nce\030\003 \001(\rH\000\"\335\001\n\rSortDirection\022\036\n\032SORT_DI"
  "RECTION_UNSPECIFIED\020\000\022\"\n\036SORT_DIRECTION_"
  "ASC_NULLS_FIRST\020\001\022!\n\035SORT_DIRECTION_ASC_"
  "NULLS_LAST\020\002\022#\n\037SORT_DIRECTION_DESC_NULL"
  "S_FIRST\020\003\022\"\n\036SORT_DIRECTION_DESC_NULLS_L"
  "AST\020\004\022\034\n\030SORT_DIRECTION_CLUSTERED\020\005B\013\n\ts"
  "ort_kind\"\367\003\n\021AggregateFunction\022\032\n\022functi"
  "on_reference\030\001 \001(\r\022.\n\targuments\030\007 \003(\0132\033."
  "substrait.FunctionArgument\022$\n\013output_typ"
  "e\030\005 \001(\0132\017.substrait.Type\022*\n\005phase\030\004 \001(\0162"
  "\033.substrait.AggregationPhase\022#\n\005sorts\030\003 "
  "\003(\0132\024.substrait.SortField\022F\n\ninvocation\030"
  "\006 \001(\01622.substrait.AggregateFunction.Aggr"
  "egationInvocation\022\'\n\004args\030\002 \003(\0132\025.substr"
  "ait.ExpressionB\002\030\001\032\'\n\014ReferenceRel\022\027\n\017su"
  "btree_ordinal\030\001 \001(\005\"\204\001\n\025AggregationInvoc"
  "ation\022&\n\"AGGREGATION_INVOCATION_UNSPECIF"
  "IED\020\000\022\036\n\032AGGREGATION_INVOCATION_ALL\020\001\022#\n"
  "\037AGGREGATION_INVOCATION_DISTINCT\020\002*\357\001\n\020A"
  "ggregationPhase\022!\n\035AGGREGATION_PHASE_UNS"
  "PECIFIED\020\000\022-\n)AGGREGATION_PHASE_INITIAL_"
  "TO_INTERMEDIATE\020\001\0222\n.AGGREGATION_PHASE_I"
  "NTERMEDIATE_TO_INTERMEDIATE\020\002\022\'\n#AGGREGA"
  "TION_PHASE_INITIAL_TO_RESULT\020\003\022,\n(AGGREG"
  "ATION_PHASE_INTERMEDIATE_TO_RESULT\020\004BW\n\022"
  "io.substrait.protoP\001Z*github.com/substra"
  "it-io/substrait-go/proto\252\002\022Substrait.Pro"
  "tobufb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_substrait_2falgebra_2eproto_deps[4] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_substrait_2fextensions_2fextensions_2eproto,
  &::descriptor_table_substrait_2ftype_2eproto,
};
static ::_pbi::once_flag descriptor_table_substrait_2falgebra_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_substrait_2falgebra_2eproto = {
    false, false, 17573, descriptor_table_protodef_substrait_2falgebra_2eproto,
    "substrait/algebra.proto",
    &descriptor_table_substrait_2falgebra_2eproto_once, descriptor_table_substrait_2falgebra_2eproto_deps, 4, 101,
    schemas, file_default_instances, TableStruct_substrait_2falgebra_2eproto::offsets,
    file_level_metadata_substrait_2falgebra_2eproto, file_level_enum_descriptors_substrait_2falgebra_2eproto,
    file_level_service_descriptors_substrait_2falgebra_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_substrait_2falgebra_2eproto_getter() {
  return &descriptor_table_substrait_2falgebra_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_substrait_2falgebra_2eproto(&descriptor_table_substrait_2falgebra_2eproto);
namespace substrait {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JoinRel_JoinType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_substrait_2falgebra_2eproto);
  return file_level_enum_descriptors_substrait_2falgebra_2eproto[0];
}
bool JoinRel_JoinType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr JoinRel_JoinType JoinRel::JOIN_TYPE_UNSPECIFIED;
constexpr JoinRel_JoinType JoinRel::JOIN_TYPE_INNER;
constexpr JoinRel_JoinType JoinRel::JOIN_TYPE_OUTER;
constexpr JoinRel_JoinType JoinRel::JOIN_TYPE_LEFT;
constexpr JoinRel_JoinType JoinRel::JOIN_TYPE_RIGHT;
constexpr JoinRel_JoinType JoinRel::JOIN_TYPE_SEMI;
constexpr JoinRel_JoinType JoinRel::JOIN_TYPE_ANTI;
constexpr JoinRel_JoinType JoinRel::JOIN_TYPE_SINGLE;
constexpr JoinRel_JoinType JoinRel::JoinType_MIN;
constexpr JoinRel_JoinType JoinRel::JoinType_MAX;
constexpr int JoinRel::JoinType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetRel_SetOp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_substrait_2falgebra_2eproto);
  return file_level_enum_descriptors_substrait_2falgebra_2eproto[1];
}
bool SetRel_SetOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SetRel_SetOp SetRel::SET_OP_UNSPECIFIED;
constexpr SetRel_SetOp SetRel::SET_OP_MINUS_PRIMARY;
constexpr SetRel_SetOp SetRel::SET_OP_MINUS_MULTISET;
constexpr SetRel_SetOp SetRel::SET_OP_INTERSECTION_PRIMARY;
constexpr SetRel_SetOp SetRel::SET_OP_INTERSECTION_MULTISET;
constexpr SetRel_SetOp SetRel::SET_OP_UNION_DISTINCT;
constexpr SetRel_SetOp SetRel::SET_OP_UNION_ALL;
constexpr SetRel_SetOp SetRel::SetOp_MIN;
constexpr SetRel_SetOp SetRel::SetOp_MAX;
constexpr int SetRel::SetOp_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DdlRel_DdlObject_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_substrait_2falgebra_2eproto);
  return file_level_enum_descriptors_substrait_2falgebra_2eproto[2];
}
bool DdlRel_DdlObject_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DdlRel_DdlObject DdlRel::DDL_OBJECT_UNSPECIFIED;
constexpr DdlRel_DdlObject DdlRel::DDL_OBJECT_TABLE;
constexpr DdlRel_DdlObject DdlRel::DDL_OBJECT_VIEW;
constexpr DdlRel_DdlObject DdlRel::DdlObject_MIN;
constexpr DdlRel_DdlObject DdlRel::DdlObject_MAX;
constexpr int DdlRel::DdlObject_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DdlRel_DdlOp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_substrait_2falgebra_2eproto);
  return file_level_enum_descriptors_substrait_2falgebra_2eproto[3];
}
bool DdlRel_DdlOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DdlRel_DdlOp DdlRel::DDL_OP_UNSPECIFIED;
constexpr DdlRel_DdlOp DdlRel::DDL_OP_CREATE;
constexpr DdlRel_DdlOp DdlRel::DDL_OP_CREATE_OR_REPLACE;
constexpr DdlRel_DdlOp DdlRel::DDL_OP_ALTER;
constexpr DdlRel_DdlOp DdlRel::DDL_OP_DROP;
constexpr DdlRel_DdlOp DdlRel::DDL_OP_DROP_IF_EXIST;
constexpr DdlRel_DdlOp DdlRel::DdlOp_MIN;
constexpr DdlRel_DdlOp DdlRel::DdlOp_MAX;
constexpr int DdlRel::DdlOp_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WriteRel_WriteOp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_substrait_2falgebra_2eproto);
  return file_level_enum_descriptors_substrait_2falgebra_2eproto[4];
}
bool WriteRel_WriteOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WriteRel_WriteOp WriteRel::WRITE_OP_UNSPECIFIED;
constexpr WriteRel_WriteOp WriteRel::WRITE_OP_INSERT;
constexpr WriteRel_WriteOp WriteRel::WRITE_OP_DELETE;
constexpr WriteRel_WriteOp WriteRel::WRITE_OP_UPDATE;
constexpr WriteRel_WriteOp WriteRel::WRITE_OP_CTAS;
constexpr WriteRel_WriteOp WriteRel::WriteOp_MIN;
constexpr WriteRel_WriteOp WriteRel::WriteOp_MAX;
constexpr int WriteRel::WriteOp_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WriteRel_OutputMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_substrait_2falgebra_2eproto);
  return file_level_enum_descriptors_substrait_2falgebra_2eproto[5];
}
bool WriteRel_OutputMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WriteRel_OutputMode WriteRel::OUTPUT_MODE_UNSPECIFIED;
constexpr WriteRel_OutputMode WriteRel::OUTPUT_MODE_NO_OUTPUT;
constexpr WriteRel_OutputMode WriteRel::OUTPUT_MODE_MODIFIED_TUPLES;
constexpr WriteRel_OutputMode WriteRel::OutputMode_MIN;
constexpr WriteRel_OutputMode WriteRel::OutputMode_MAX;
constexpr int WriteRel::OutputMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Expression_Cast_FailureBehavior_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_substrait_2falgebra_2eproto);
  return file_level_enum_descriptors_substrait_2falgebra_2eproto[6];
}
bool Expression_Cast_FailureBehavior_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Expression_Cast_FailureBehavior Expression_Cast::FAILURE_BEHAVIOR_UNSPECIFIED;
constexpr Expression_Cast_FailureBehavior Expression_Cast::FAILURE_BEHAVIOR_RETURN_NULL;
constexpr Expression_Cast_FailureBehavior Expression_Cast::FAILURE_BEHAVIOR_THROW_EXCEPTION;
constexpr Expression_Cast_FailureBehavior Expression_Cast::FailureBehavior_MIN;
constexpr Expression_Cast_FailureBehavior Expression_Cast::FailureBehavior_MAX;
constexpr int Expression_Cast::FailureBehavior_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Expression_Subquery_SetPredicate_PredicateOp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_substrait_2falgebra_2eproto);
  return file_level_enum_descriptors_substrait_2falgebra_2eproto[7];
}
bool Expression_Subquery_SetPredicate_PredicateOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Expression_Subquery_SetPredicate_PredicateOp Expression_Subquery_SetPredicate::PREDICATE_OP_UNSPECIFIED;
constexpr Expression_Subquery_SetPredicate_PredicateOp Expression_Subquery_SetPredicate::PREDICATE_OP_EXISTS;
constexpr Expression_Subquery_SetPredicate_PredicateOp Expression_Subquery_SetPredicate::PREDICATE_OP_UNIQUE;
constexpr Expression_Subquery_SetPredicate_PredicateOp Expression_Subquery_SetPredicate::PredicateOp_MIN;
constexpr Expression_Subquery_SetPredicate_PredicateOp Expression_Subquery_SetPredicate::PredicateOp_MAX;
constexpr int Expression_Subquery_SetPredicate::PredicateOp_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Expression_Subquery_SetComparison_ComparisonOp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_substrait_2falgebra_2eproto);
  return file_level_enum_descriptors_substrait_2falgebra_2eproto[8];
}
bool Expression_Subquery_SetComparison_ComparisonOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Expression_Subquery_SetComparison_ComparisonOp Expression_Subquery_SetComparison::COMPARISON_OP_UNSPECIFIED;
constexpr Expression_Subquery_SetComparison_ComparisonOp Expression_Subquery_SetComparison::COMPARISON_OP_EQ;
constexpr Expression_Subquery_SetComparison_ComparisonOp Expression_Subquery_SetComparison::COMPARISON_OP_NE;
constexpr Expression_Subquery_SetComparison_ComparisonOp Expression_Subquery_SetComparison::COMPARISON_OP_LT;
constexpr Expression_Subquery_SetComparison_ComparisonOp Expression_Subquery_SetComparison::COMPARISON_OP_GT;
constexpr Expression_Subquery_SetComparison_ComparisonOp Expression_Subquery_SetComparison::COMPARISON_OP_LE;
constexpr Expression_Subquery_SetComparison_ComparisonOp Expression_Subquery_SetComparison::COMPARISON_OP_GE;
constexpr Expression_Subquery_SetComparison_ComparisonOp Expression_Subquery_SetComparison::ComparisonOp_MIN;
constexpr Expression_Subquery_SetComparison_ComparisonOp Expression_Subquery_SetComparison::ComparisonOp_MAX;
constexpr int Expression_Subquery_SetComparison::ComparisonOp_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Expression_Subquery_SetComparison_ReductionOp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_substrait_2falgebra_2eproto);
  return file_level_enum_descriptors_substrait_2falgebra_2eproto[9];
}
bool Expression_Subquery_SetComparison_ReductionOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Expression_Subquery_SetComparison_ReductionOp Expression_Subquery_SetComparison::REDUCTION_OP_UNSPECIFIED;
constexpr Expression_Subquery_SetComparison_ReductionOp Expression_Subquery_SetComparison::REDUCTION_OP_ANY;
constexpr Expression_Subquery_SetComparison_ReductionOp Expression_Subquery_SetComparison::REDUCTION_OP_ALL;
constexpr Expression_Subquery_SetComparison_ReductionOp Expression_Subquery_SetComparison::ReductionOp_MIN;
constexpr Expression_Subquery_SetComparison_ReductionOp Expression_Subquery_SetComparison::ReductionOp_MAX;
constexpr int Expression_Subquery_SetComparison::ReductionOp_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SortField_SortDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_substrait_2falgebra_2eproto);
  return file_level_enum_descriptors_substrait_2falgebra_2eproto[10];
}
bool SortField_SortDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SortField_SortDirection SortField::SORT_DIRECTION_UNSPECIFIED;
constexpr SortField_SortDirection SortField::SORT_DIRECTION_ASC_NULLS_FIRST;
constexpr SortField_SortDirection SortField::SORT_DIRECTION_ASC_NULLS_LAST;
constexpr SortField_SortDirection SortField::SORT_DIRECTION_DESC_NULLS_FIRST;
constexpr SortField_SortDirection SortField::SORT_DIRECTION_DESC_NULLS_LAST;
constexpr SortField_SortDirection SortField::SORT_DIRECTION_CLUSTERED;
constexpr SortField_SortDirection SortField::SortDirection_MIN;
constexpr SortField_SortDirection SortField::SortDirection_MAX;
constexpr int SortField::SortDirection_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AggregateFunction_AggregationInvocation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_substrait_2falgebra_2eproto);
  return file_level_enum_descriptors_substrait_2falgebra_2eproto[11];
}
bool AggregateFunction_AggregationInvocation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AggregateFunction_AggregationInvocation AggregateFunction::AGGREGATION_INVOCATION_UNSPECIFIED;
constexpr AggregateFunction_AggregationInvocation AggregateFunction::AGGREGATION_INVOCATION_ALL;
constexpr AggregateFunction_AggregationInvocation AggregateFunction::AGGREGATION_INVOCATION_DISTINCT;
constexpr AggregateFunction_AggregationInvocation AggregateFunction::AggregationInvocation_MIN;
constexpr AggregateFunction_AggregationInvocation AggregateFunction::AggregationInvocation_MAX;
constexpr int AggregateFunction::AggregationInvocation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AggregationPhase_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_substrait_2falgebra_2eproto);
  return file_level_enum_descriptors_substrait_2falgebra_2eproto[12];
}
bool AggregationPhase_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class RelCommon_Direct::_Internal {
 public:
};

RelCommon_Direct::RelCommon_Direct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:substrait.RelCommon.Direct)
}
RelCommon_Direct::RelCommon_Direct(const RelCommon_Direct& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  RelCommon_Direct* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.RelCommon.Direct)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RelCommon_Direct::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RelCommon_Direct::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RelCommon_Direct::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[0]);
}

// ===================================================================

class RelCommon_Emit::_Internal {
 public:
};

RelCommon_Emit::RelCommon_Emit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.RelCommon.Emit)
}
RelCommon_Emit::RelCommon_Emit(const RelCommon_Emit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RelCommon_Emit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.output_mapping_){from._impl_.output_mapping_}
    , /*decltype(_impl_._output_mapping_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.RelCommon.Emit)
}

inline void RelCommon_Emit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.output_mapping_){arena}
    , /*decltype(_impl_._output_mapping_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RelCommon_Emit::~RelCommon_Emit() {
  // @@protoc_insertion_point(destructor:substrait.RelCommon.Emit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RelCommon_Emit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.output_mapping_.~RepeatedField();
}

void RelCommon_Emit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RelCommon_Emit::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.RelCommon.Emit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.output_mapping_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelCommon_Emit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 output_mapping = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_output_mapping(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_output_mapping(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RelCommon_Emit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.RelCommon.Emit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 output_mapping = 1;
  {
    int byte_size = _impl_._output_mapping_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_output_mapping(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.RelCommon.Emit)
  return target;
}

size_t RelCommon_Emit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.RelCommon.Emit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 output_mapping = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.output_mapping_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._output_mapping_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RelCommon_Emit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RelCommon_Emit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RelCommon_Emit::GetClassData() const { return &_class_data_; }


void RelCommon_Emit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RelCommon_Emit*>(&to_msg);
  auto& from = static_cast<const RelCommon_Emit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.RelCommon.Emit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.output_mapping_.MergeFrom(from._impl_.output_mapping_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RelCommon_Emit::CopyFrom(const RelCommon_Emit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.RelCommon.Emit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelCommon_Emit::IsInitialized() const {
  return true;
}

void RelCommon_Emit::InternalSwap(RelCommon_Emit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.output_mapping_.InternalSwap(&other->_impl_.output_mapping_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RelCommon_Emit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[1]);
}

// ===================================================================

class RelCommon_Hint_Stats::_Internal {
 public:
  static const ::substrait::extensions::AdvancedExtension& advanced_extension(const RelCommon_Hint_Stats* msg);
};

const ::substrait::extensions::AdvancedExtension&
RelCommon_Hint_Stats::_Internal::advanced_extension(const RelCommon_Hint_Stats* msg) {
  return *msg->_impl_.advanced_extension_;
}
void RelCommon_Hint_Stats::clear_advanced_extension() {
  if (GetArenaForAllocation() == nullptr && _impl_.advanced_extension_ != nullptr) {
    delete _impl_.advanced_extension_;
  }
  _impl_.advanced_extension_ = nullptr;
}
RelCommon_Hint_Stats::RelCommon_Hint_Stats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.RelCommon.Hint.Stats)
}
RelCommon_Hint_Stats::RelCommon_Hint_Stats(const RelCommon_Hint_Stats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RelCommon_Hint_Stats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.advanced_extension_){nullptr}
    , decltype(_impl_.row_count_){}
    , decltype(_impl_.record_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_advanced_extension()) {
    _this->_impl_.advanced_extension_ = new ::substrait::extensions::AdvancedExtension(*from._impl_.advanced_extension_);
  }
  ::memcpy(&_impl_.row_count_, &from._impl_.row_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.record_size_) -
    reinterpret_cast<char*>(&_impl_.row_count_)) + sizeof(_impl_.record_size_));
  // @@protoc_insertion_point(copy_constructor:substrait.RelCommon.Hint.Stats)
}

inline void RelCommon_Hint_Stats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.advanced_extension_){nullptr}
    , decltype(_impl_.row_count_){0}
    , decltype(_impl_.record_size_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RelCommon_Hint_Stats::~RelCommon_Hint_Stats() {
  // @@protoc_insertion_point(destructor:substrait.RelCommon.Hint.Stats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RelCommon_Hint_Stats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.advanced_extension_;
}

void RelCommon_Hint_Stats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RelCommon_Hint_Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.RelCommon.Hint.Stats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.advanced_extension_ != nullptr) {
    delete _impl_.advanced_extension_;
  }
  _impl_.advanced_extension_ = nullptr;
  ::memset(&_impl_.row_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.record_size_) -
      reinterpret_cast<char*>(&_impl_.row_count_)) + sizeof(_impl_.record_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelCommon_Hint_Stats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double row_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double record_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.record_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .substrait.extensions.AdvancedExtension advanced_extension = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RelCommon_Hint_Stats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.RelCommon.Hint.Stats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double row_count = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_row_count = this->_internal_row_count();
  uint64_t raw_row_count;
  memcpy(&raw_row_count, &tmp_row_count, sizeof(tmp_row_count));
  if (raw_row_count != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_row_count(), target);
  }

  // double record_size = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_record_size = this->_internal_record_size();
  uint64_t raw_record_size;
  memcpy(&raw_record_size, &tmp_record_size, sizeof(tmp_record_size));
  if (raw_record_size != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_record_size(), target);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10;
  if (this->_internal_has_advanced_extension()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::advanced_extension(this),
        _Internal::advanced_extension(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.RelCommon.Hint.Stats)
  return target;
}

size_t RelCommon_Hint_Stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.RelCommon.Hint.Stats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.extensions.AdvancedExtension advanced_extension = 10;
  if (this->_internal_has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.advanced_extension_);
  }

  // double row_count = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_row_count = this->_internal_row_count();
  uint64_t raw_row_count;
  memcpy(&raw_row_count, &tmp_row_count, sizeof(tmp_row_count));
  if (raw_row_count != 0) {
    total_size += 1 + 8;
  }

  // double record_size = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_record_size = this->_internal_record_size();
  uint64_t raw_record_size;
  memcpy(&raw_record_size, &tmp_record_size, sizeof(tmp_record_size));
  if (raw_record_size != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RelCommon_Hint_Stats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RelCommon_Hint_Stats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RelCommon_Hint_Stats::GetClassData() const { return &_class_data_; }


void RelCommon_Hint_Stats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RelCommon_Hint_Stats*>(&to_msg);
  auto& from = static_cast<const RelCommon_Hint_Stats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.RelCommon.Hint.Stats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_advanced_extension()) {
    _this->_internal_mutable_advanced_extension()->::substrait::extensions::AdvancedExtension::MergeFrom(
        from._internal_advanced_extension());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_row_count = from._internal_row_count();
  uint64_t raw_row_count;
  memcpy(&raw_row_count, &tmp_row_count, sizeof(tmp_row_count));
  if (raw_row_count != 0) {
    _this->_internal_set_row_count(from._internal_row_count());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_record_size = from._internal_record_size();
  uint64_t raw_record_size;
  memcpy(&raw_record_size, &tmp_record_size, sizeof(tmp_record_size));
  if (raw_record_size != 0) {
    _this->_internal_set_record_size(from._internal_record_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RelCommon_Hint_Stats::CopyFrom(const RelCommon_Hint_Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.RelCommon.Hint.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelCommon_Hint_Stats::IsInitialized() const {
  return true;
}

void RelCommon_Hint_Stats::InternalSwap(RelCommon_Hint_Stats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RelCommon_Hint_Stats, _impl_.record_size_)
      + sizeof(RelCommon_Hint_Stats::_impl_.record_size_)
      - PROTOBUF_FIELD_OFFSET(RelCommon_Hint_Stats, _impl_.advanced_extension_)>(
          reinterpret_cast<char*>(&_impl_.advanced_extension_),
          reinterpret_cast<char*>(&other->_impl_.advanced_extension_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RelCommon_Hint_Stats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[2]);
}

// ===================================================================

class RelCommon_Hint_RuntimeConstraint::_Internal {
 public:
  static const ::substrait::extensions::AdvancedExtension& advanced_extension(const RelCommon_Hint_RuntimeConstraint* msg);
};

const ::substrait::extensions::AdvancedExtension&
RelCommon_Hint_RuntimeConstraint::_Internal::advanced_extension(const RelCommon_Hint_RuntimeConstraint* msg) {
  return *msg->_impl_.advanced_extension_;
}
void RelCommon_Hint_RuntimeConstraint::clear_advanced_extension() {
  if (GetArenaForAllocation() == nullptr && _impl_.advanced_extension_ != nullptr) {
    delete _impl_.advanced_extension_;
  }
  _impl_.advanced_extension_ = nullptr;
}
RelCommon_Hint_RuntimeConstraint::RelCommon_Hint_RuntimeConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.RelCommon.Hint.RuntimeConstraint)
}
RelCommon_Hint_RuntimeConstraint::RelCommon_Hint_RuntimeConstraint(const RelCommon_Hint_RuntimeConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RelCommon_Hint_RuntimeConstraint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.advanced_extension_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_advanced_extension()) {
    _this->_impl_.advanced_extension_ = new ::substrait::extensions::AdvancedExtension(*from._impl_.advanced_extension_);
  }
  // @@protoc_insertion_point(copy_constructor:substrait.RelCommon.Hint.RuntimeConstraint)
}

inline void RelCommon_Hint_RuntimeConstraint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.advanced_extension_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RelCommon_Hint_RuntimeConstraint::~RelCommon_Hint_RuntimeConstraint() {
  // @@protoc_insertion_point(destructor:substrait.RelCommon.Hint.RuntimeConstraint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RelCommon_Hint_RuntimeConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.advanced_extension_;
}

void RelCommon_Hint_RuntimeConstraint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RelCommon_Hint_RuntimeConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.RelCommon.Hint.RuntimeConstraint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.advanced_extension_ != nullptr) {
    delete _impl_.advanced_extension_;
  }
  _impl_.advanced_extension_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelCommon_Hint_RuntimeConstraint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.extensions.AdvancedExtension advanced_extension = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RelCommon_Hint_RuntimeConstraint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.RelCommon.Hint.RuntimeConstraint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.extensions.AdvancedExtension advanced_extension = 10;
  if (this->_internal_has_advanced_extension()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::advanced_extension(this),
        _Internal::advanced_extension(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.RelCommon.Hint.RuntimeConstraint)
  return target;
}

size_t RelCommon_Hint_RuntimeConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.RelCommon.Hint.RuntimeConstraint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.extensions.AdvancedExtension advanced_extension = 10;
  if (this->_internal_has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.advanced_extension_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RelCommon_Hint_RuntimeConstraint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RelCommon_Hint_RuntimeConstraint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RelCommon_Hint_RuntimeConstraint::GetClassData() const { return &_class_data_; }


void RelCommon_Hint_RuntimeConstraint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RelCommon_Hint_RuntimeConstraint*>(&to_msg);
  auto& from = static_cast<const RelCommon_Hint_RuntimeConstraint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.RelCommon.Hint.RuntimeConstraint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_advanced_extension()) {
    _this->_internal_mutable_advanced_extension()->::substrait::extensions::AdvancedExtension::MergeFrom(
        from._internal_advanced_extension());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RelCommon_Hint_RuntimeConstraint::CopyFrom(const RelCommon_Hint_RuntimeConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.RelCommon.Hint.RuntimeConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelCommon_Hint_RuntimeConstraint::IsInitialized() const {
  return true;
}

void RelCommon_Hint_RuntimeConstraint::InternalSwap(RelCommon_Hint_RuntimeConstraint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.advanced_extension_, other->_impl_.advanced_extension_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RelCommon_Hint_RuntimeConstraint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[3]);
}

// ===================================================================

class RelCommon_Hint::_Internal {
 public:
  static const ::substrait::RelCommon_Hint_Stats& stats(const RelCommon_Hint* msg);
  static const ::substrait::RelCommon_Hint_RuntimeConstraint& constraint(const RelCommon_Hint* msg);
  static const ::substrait::extensions::AdvancedExtension& advanced_extension(const RelCommon_Hint* msg);
};

const ::substrait::RelCommon_Hint_Stats&
RelCommon_Hint::_Internal::stats(const RelCommon_Hint* msg) {
  return *msg->_impl_.stats_;
}
const ::substrait::RelCommon_Hint_RuntimeConstraint&
RelCommon_Hint::_Internal::constraint(const RelCommon_Hint* msg) {
  return *msg->_impl_.constraint_;
}
const ::substrait::extensions::AdvancedExtension&
RelCommon_Hint::_Internal::advanced_extension(const RelCommon_Hint* msg) {
  return *msg->_impl_.advanced_extension_;
}
void RelCommon_Hint::clear_advanced_extension() {
  if (GetArenaForAllocation() == nullptr && _impl_.advanced_extension_ != nullptr) {
    delete _impl_.advanced_extension_;
  }
  _impl_.advanced_extension_ = nullptr;
}
RelCommon_Hint::RelCommon_Hint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.RelCommon.Hint)
}
RelCommon_Hint::RelCommon_Hint(const RelCommon_Hint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RelCommon_Hint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){nullptr}
    , decltype(_impl_.constraint_){nullptr}
    , decltype(_impl_.advanced_extension_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stats()) {
    _this->_impl_.stats_ = new ::substrait::RelCommon_Hint_Stats(*from._impl_.stats_);
  }
  if (from._internal_has_constraint()) {
    _this->_impl_.constraint_ = new ::substrait::RelCommon_Hint_RuntimeConstraint(*from._impl_.constraint_);
  }
  if (from._internal_has_advanced_extension()) {
    _this->_impl_.advanced_extension_ = new ::substrait::extensions::AdvancedExtension(*from._impl_.advanced_extension_);
  }
  // @@protoc_insertion_point(copy_constructor:substrait.RelCommon.Hint)
}

inline void RelCommon_Hint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){nullptr}
    , decltype(_impl_.constraint_){nullptr}
    , decltype(_impl_.advanced_extension_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RelCommon_Hint::~RelCommon_Hint() {
  // @@protoc_insertion_point(destructor:substrait.RelCommon.Hint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RelCommon_Hint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.stats_;
  if (this != internal_default_instance()) delete _impl_.constraint_;
  if (this != internal_default_instance()) delete _impl_.advanced_extension_;
}

void RelCommon_Hint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RelCommon_Hint::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.RelCommon.Hint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.stats_ != nullptr) {
    delete _impl_.stats_;
  }
  _impl_.stats_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.constraint_ != nullptr) {
    delete _impl_.constraint_;
  }
  _impl_.constraint_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.advanced_extension_ != nullptr) {
    delete _impl_.advanced_extension_;
  }
  _impl_.advanced_extension_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelCommon_Hint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.RelCommon.Hint.Stats stats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.RelCommon.Hint.RuntimeConstraint constraint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_constraint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.extensions.AdvancedExtension advanced_extension = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RelCommon_Hint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.RelCommon.Hint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.RelCommon.Hint.Stats stats = 1;
  if (this->_internal_has_stats()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::stats(this),
        _Internal::stats(this).GetCachedSize(), target, stream);
  }

  // .substrait.RelCommon.Hint.RuntimeConstraint constraint = 2;
  if (this->_internal_has_constraint()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::constraint(this),
        _Internal::constraint(this).GetCachedSize(), target, stream);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10;
  if (this->_internal_has_advanced_extension()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::advanced_extension(this),
        _Internal::advanced_extension(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.RelCommon.Hint)
  return target;
}

size_t RelCommon_Hint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.RelCommon.Hint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.RelCommon.Hint.Stats stats = 1;
  if (this->_internal_has_stats()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stats_);
  }

  // .substrait.RelCommon.Hint.RuntimeConstraint constraint = 2;
  if (this->_internal_has_constraint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.constraint_);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10;
  if (this->_internal_has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.advanced_extension_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RelCommon_Hint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RelCommon_Hint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RelCommon_Hint::GetClassData() const { return &_class_data_; }


void RelCommon_Hint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RelCommon_Hint*>(&to_msg);
  auto& from = static_cast<const RelCommon_Hint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.RelCommon.Hint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_stats()) {
    _this->_internal_mutable_stats()->::substrait::RelCommon_Hint_Stats::MergeFrom(
        from._internal_stats());
  }
  if (from._internal_has_constraint()) {
    _this->_internal_mutable_constraint()->::substrait::RelCommon_Hint_RuntimeConstraint::MergeFrom(
        from._internal_constraint());
  }
  if (from._internal_has_advanced_extension()) {
    _this->_internal_mutable_advanced_extension()->::substrait::extensions::AdvancedExtension::MergeFrom(
        from._internal_advanced_extension());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RelCommon_Hint::CopyFrom(const RelCommon_Hint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.RelCommon.Hint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelCommon_Hint::IsInitialized() const {
  return true;
}

void RelCommon_Hint::InternalSwap(RelCommon_Hint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RelCommon_Hint, _impl_.advanced_extension_)
      + sizeof(RelCommon_Hint::_impl_.advanced_extension_)
      - PROTOBUF_FIELD_OFFSET(RelCommon_Hint, _impl_.stats_)>(
          reinterpret_cast<char*>(&_impl_.stats_),
          reinterpret_cast<char*>(&other->_impl_.stats_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RelCommon_Hint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[4]);
}

// ===================================================================

class RelCommon::_Internal {
 public:
  static const ::substrait::RelCommon_Direct& direct(const RelCommon* msg);
  static const ::substrait::RelCommon_Emit& emit(const RelCommon* msg);
  static const ::substrait::RelCommon_Hint& hint(const RelCommon* msg);
  static const ::substrait::extensions::AdvancedExtension& advanced_extension(const RelCommon* msg);
};

const ::substrait::RelCommon_Direct&
RelCommon::_Internal::direct(const RelCommon* msg) {
  return *msg->_impl_.emit_kind_.direct_;
}
const ::substrait::RelCommon_Emit&
RelCommon::_Internal::emit(const RelCommon* msg) {
  return *msg->_impl_.emit_kind_.emit_;
}
const ::substrait::RelCommon_Hint&
RelCommon::_Internal::hint(const RelCommon* msg) {
  return *msg->_impl_.hint_;
}
const ::substrait::extensions::AdvancedExtension&
RelCommon::_Internal::advanced_extension(const RelCommon* msg) {
  return *msg->_impl_.advanced_extension_;
}
void RelCommon::set_allocated_direct(::substrait::RelCommon_Direct* direct) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_emit_kind();
  if (direct) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(direct);
    if (message_arena != submessage_arena) {
      direct = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direct, submessage_arena);
    }
    set_has_direct();
    _impl_.emit_kind_.direct_ = direct;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.RelCommon.direct)
}
void RelCommon::set_allocated_emit(::substrait::RelCommon_Emit* emit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_emit_kind();
  if (emit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(emit);
    if (message_arena != submessage_arena) {
      emit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emit, submessage_arena);
    }
    set_has_emit();
    _impl_.emit_kind_.emit_ = emit;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.RelCommon.emit)
}
void RelCommon::clear_advanced_extension() {
  if (GetArenaForAllocation() == nullptr && _impl_.advanced_extension_ != nullptr) {
    delete _impl_.advanced_extension_;
  }
  _impl_.advanced_extension_ = nullptr;
}
RelCommon::RelCommon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.RelCommon)
}
RelCommon::RelCommon(const RelCommon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RelCommon* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hint_){nullptr}
    , decltype(_impl_.advanced_extension_){nullptr}
    , decltype(_impl_.emit_kind_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hint()) {
    _this->_impl_.hint_ = new ::substrait::RelCommon_Hint(*from._impl_.hint_);
  }
  if (from._internal_has_advanced_extension()) {
    _this->_impl_.advanced_extension_ = new ::substrait::extensions::AdvancedExtension(*from._impl_.advanced_extension_);
  }
  clear_has_emit_kind();
  switch (from.emit_kind_case()) {
    case kDirect: {
      _this->_internal_mutable_direct()->::substrait::RelCommon_Direct::MergeFrom(
          from._internal_direct());
      break;
    }
    case kEmit: {
      _this->_internal_mutable_emit()->::substrait::RelCommon_Emit::MergeFrom(
          from._internal_emit());
      break;
    }
    case EMIT_KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.RelCommon)
}

inline void RelCommon::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hint_){nullptr}
    , decltype(_impl_.advanced_extension_){nullptr}
    , decltype(_impl_.emit_kind_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_emit_kind();
}

RelCommon::~RelCommon() {
  // @@protoc_insertion_point(destructor:substrait.RelCommon)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RelCommon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.hint_;
  if (this != internal_default_instance()) delete _impl_.advanced_extension_;
  if (has_emit_kind()) {
    clear_emit_kind();
  }
}

void RelCommon::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RelCommon::clear_emit_kind() {
// @@protoc_insertion_point(one_of_clear_start:substrait.RelCommon)
  switch (emit_kind_case()) {
    case kDirect: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.emit_kind_.direct_;
      }
      break;
    }
    case kEmit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.emit_kind_.emit_;
      }
      break;
    }
    case EMIT_KIND_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = EMIT_KIND_NOT_SET;
}


void RelCommon::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.RelCommon)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.hint_ != nullptr) {
    delete _impl_.hint_;
  }
  _impl_.hint_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.advanced_extension_ != nullptr) {
    delete _impl_.advanced_extension_;
  }
  _impl_.advanced_extension_ = nullptr;
  clear_emit_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelCommon::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.RelCommon.Direct direct = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_direct(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.RelCommon.Emit emit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_emit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.RelCommon.Hint hint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_hint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.extensions.AdvancedExtension advanced_extension = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RelCommon::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.RelCommon)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.RelCommon.Direct direct = 1;
  if (_internal_has_direct()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::direct(this),
        _Internal::direct(this).GetCachedSize(), target, stream);
  }

  // .substrait.RelCommon.Emit emit = 2;
  if (_internal_has_emit()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::emit(this),
        _Internal::emit(this).GetCachedSize(), target, stream);
  }

  // .substrait.RelCommon.Hint hint = 3;
  if (this->_internal_has_hint()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::hint(this),
        _Internal::hint(this).GetCachedSize(), target, stream);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 4;
  if (this->_internal_has_advanced_extension()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::advanced_extension(this),
        _Internal::advanced_extension(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.RelCommon)
  return target;
}

size_t RelCommon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.RelCommon)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.RelCommon.Hint hint = 3;
  if (this->_internal_has_hint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hint_);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 4;
  if (this->_internal_has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.advanced_extension_);
  }

  switch (emit_kind_case()) {
    // .substrait.RelCommon.Direct direct = 1;
    case kDirect: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.emit_kind_.direct_);
      break;
    }
    // .substrait.RelCommon.Emit emit = 2;
    case kEmit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.emit_kind_.emit_);
      break;
    }
    case EMIT_KIND_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RelCommon::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RelCommon::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RelCommon::GetClassData() const { return &_class_data_; }


void RelCommon::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RelCommon*>(&to_msg);
  auto& from = static_cast<const RelCommon&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.RelCommon)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hint()) {
    _this->_internal_mutable_hint()->::substrait::RelCommon_Hint::MergeFrom(
        from._internal_hint());
  }
  if (from._internal_has_advanced_extension()) {
    _this->_internal_mutable_advanced_extension()->::substrait::extensions::AdvancedExtension::MergeFrom(
        from._internal_advanced_extension());
  }
  switch (from.emit_kind_case()) {
    case kDirect: {
      _this->_internal_mutable_direct()->::substrait::RelCommon_Direct::MergeFrom(
          from._internal_direct());
      break;
    }
    case kEmit: {
      _this->_internal_mutable_emit()->::substrait::RelCommon_Emit::MergeFrom(
          from._internal_emit());
      break;
    }
    case EMIT_KIND_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RelCommon::CopyFrom(const RelCommon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.RelCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelCommon::IsInitialized() const {
  return true;
}

void RelCommon::InternalSwap(RelCommon* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RelCommon, _impl_.advanced_extension_)
      + sizeof(RelCommon::_impl_.advanced_extension_)
      - PROTOBUF_FIELD_OFFSET(RelCommon, _impl_.hint_)>(
          reinterpret_cast<char*>(&_impl_.hint_),
          reinterpret_cast<char*>(&other->_impl_.hint_));
  swap(_impl_.emit_kind_, other->_impl_.emit_kind_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RelCommon::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[5]);
}

// ===================================================================

class ReadRel_NamedTable::_Internal {
 public:
  static const ::substrait::extensions::AdvancedExtension& advanced_extension(const ReadRel_NamedTable* msg);
};

const ::substrait::extensions::AdvancedExtension&
ReadRel_NamedTable::_Internal::advanced_extension(const ReadRel_NamedTable* msg) {
  return *msg->_impl_.advanced_extension_;
}
void ReadRel_NamedTable::clear_advanced_extension() {
  if (GetArenaForAllocation() == nullptr && _impl_.advanced_extension_ != nullptr) {
    delete _impl_.advanced_extension_;
  }
  _impl_.advanced_extension_ = nullptr;
}
ReadRel_NamedTable::ReadRel_NamedTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.ReadRel.NamedTable)
}
ReadRel_NamedTable::ReadRel_NamedTable(const ReadRel_NamedTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReadRel_NamedTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.names_){from._impl_.names_}
    , decltype(_impl_.advanced_extension_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_advanced_extension()) {
    _this->_impl_.advanced_extension_ = new ::substrait::extensions::AdvancedExtension(*from._impl_.advanced_extension_);
  }
  // @@protoc_insertion_point(copy_constructor:substrait.ReadRel.NamedTable)
}

inline void ReadRel_NamedTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.names_){arena}
    , decltype(_impl_.advanced_extension_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReadRel_NamedTable::~ReadRel_NamedTable() {
  // @@protoc_insertion_point(destructor:substrait.ReadRel.NamedTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReadRel_NamedTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.names_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.advanced_extension_;
}

void ReadRel_NamedTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReadRel_NamedTable::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.ReadRel.NamedTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.names_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.advanced_extension_ != nullptr) {
    delete _impl_.advanced_extension_;
  }
  _impl_.advanced_extension_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadRel_NamedTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string names = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "substrait.ReadRel.NamedTable.names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .substrait.extensions.AdvancedExtension advanced_extension = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadRel_NamedTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.ReadRel.NamedTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string names = 1;
  for (int i = 0, n = this->_internal_names_size(); i < n; i++) {
    const auto& s = this->_internal_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.ReadRel.NamedTable.names");
    target = stream->WriteString(1, s, target);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10;
  if (this->_internal_has_advanced_extension()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::advanced_extension(this),
        _Internal::advanced_extension(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.ReadRel.NamedTable)
  return target;
}

size_t ReadRel_NamedTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.ReadRel.NamedTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string names = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.names_.size());
  for (int i = 0, n = _impl_.names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.names_.Get(i));
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10;
  if (this->_internal_has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.advanced_extension_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadRel_NamedTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReadRel_NamedTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadRel_NamedTable::GetClassData() const { return &_class_data_; }


void ReadRel_NamedTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReadRel_NamedTable*>(&to_msg);
  auto& from = static_cast<const ReadRel_NamedTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.ReadRel.NamedTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.names_.MergeFrom(from._impl_.names_);
  if (from._internal_has_advanced_extension()) {
    _this->_internal_mutable_advanced_extension()->::substrait::extensions::AdvancedExtension::MergeFrom(
        from._internal_advanced_extension());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadRel_NamedTable::CopyFrom(const ReadRel_NamedTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.ReadRel.NamedTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRel_NamedTable::IsInitialized() const {
  return true;
}

void ReadRel_NamedTable::InternalSwap(ReadRel_NamedTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.names_.InternalSwap(&other->_impl_.names_);
  swap(_impl_.advanced_extension_, other->_impl_.advanced_extension_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadRel_NamedTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[6]);
}

// ===================================================================

class ReadRel_VirtualTable::_Internal {
 public:
};

ReadRel_VirtualTable::ReadRel_VirtualTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.ReadRel.VirtualTable)
}
ReadRel_VirtualTable::ReadRel_VirtualTable(const ReadRel_VirtualTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReadRel_VirtualTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.ReadRel.VirtualTable)
}

inline void ReadRel_VirtualTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReadRel_VirtualTable::~ReadRel_VirtualTable() {
  // @@protoc_insertion_point(destructor:substrait.ReadRel.VirtualTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReadRel_VirtualTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedPtrField();
}

void ReadRel_VirtualTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReadRel_VirtualTable::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.ReadRel.VirtualTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadRel_VirtualTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .substrait.Expression.Literal.Struct values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadRel_VirtualTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.ReadRel.VirtualTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.Expression.Literal.Struct values = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.ReadRel.VirtualTable)
  return target;
}

size_t ReadRel_VirtualTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.ReadRel.VirtualTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.Expression.Literal.Struct values = 1;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->_impl_.values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadRel_VirtualTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReadRel_VirtualTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadRel_VirtualTable::GetClassData() const { return &_class_data_; }


void ReadRel_VirtualTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReadRel_VirtualTable*>(&to_msg);
  auto& from = static_cast<const ReadRel_VirtualTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.ReadRel.VirtualTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadRel_VirtualTable::CopyFrom(const ReadRel_VirtualTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.ReadRel.VirtualTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRel_VirtualTable::IsInitialized() const {
  return true;
}

void ReadRel_VirtualTable::InternalSwap(ReadRel_VirtualTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadRel_VirtualTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[7]);
}

// ===================================================================

class ReadRel_ExtensionTable::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& detail(const ReadRel_ExtensionTable* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
ReadRel_ExtensionTable::_Internal::detail(const ReadRel_ExtensionTable* msg) {
  return *msg->_impl_.detail_;
}
void ReadRel_ExtensionTable::clear_detail() {
  if (GetArenaForAllocation() == nullptr && _impl_.detail_ != nullptr) {
    delete _impl_.detail_;
  }
  _impl_.detail_ = nullptr;
}
ReadRel_ExtensionTable::ReadRel_ExtensionTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.ReadRel.ExtensionTable)
}
ReadRel_ExtensionTable::ReadRel_ExtensionTable(const ReadRel_ExtensionTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReadRel_ExtensionTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.detail_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_detail()) {
    _this->_impl_.detail_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.detail_);
  }
  // @@protoc_insertion_point(copy_constructor:substrait.ReadRel.ExtensionTable)
}

inline void ReadRel_ExtensionTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.detail_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReadRel_ExtensionTable::~ReadRel_ExtensionTable() {
  // @@protoc_insertion_point(destructor:substrait.ReadRel.ExtensionTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReadRel_ExtensionTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.detail_;
}

void ReadRel_ExtensionTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReadRel_ExtensionTable::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.ReadRel.ExtensionTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.detail_ != nullptr) {
    delete _impl_.detail_;
  }
  _impl_.detail_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadRel_ExtensionTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Any detail = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_detail(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadRel_ExtensionTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.ReadRel.ExtensionTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any detail = 1;
  if (this->_internal_has_detail()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::detail(this),
        _Internal::detail(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.ReadRel.ExtensionTable)
  return target;
}

size_t ReadRel_ExtensionTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.ReadRel.ExtensionTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any detail = 1;
  if (this->_internal_has_detail()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.detail_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadRel_ExtensionTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReadRel_ExtensionTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadRel_ExtensionTable::GetClassData() const { return &_class_data_; }


void ReadRel_ExtensionTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReadRel_ExtensionTable*>(&to_msg);
  auto& from = static_cast<const ReadRel_ExtensionTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.ReadRel.ExtensionTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_detail()) {
    _this->_internal_mutable_detail()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_detail());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadRel_ExtensionTable::CopyFrom(const ReadRel_ExtensionTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.ReadRel.ExtensionTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRel_ExtensionTable::IsInitialized() const {
  return true;
}

void ReadRel_ExtensionTable::InternalSwap(ReadRel_ExtensionTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.detail_, other->_impl_.detail_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadRel_ExtensionTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[8]);
}

// ===================================================================

class ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions::_Internal {
 public:
};

ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:substrait.ReadRel.LocalFiles.FileOrFiles.ParquetReadOptions)
}
ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions(const ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.ReadRel.LocalFiles.FileOrFiles.ParquetReadOptions)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[9]);
}

// ===================================================================

class ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions::_Internal {
 public:
};

ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:substrait.ReadRel.LocalFiles.FileOrFiles.ArrowReadOptions)
}
ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions(const ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.ReadRel.LocalFiles.FileOrFiles.ArrowReadOptions)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[10]);
}

// ===================================================================

class ReadRel_LocalFiles_FileOrFiles_OrcReadOptions::_Internal {
 public:
};

ReadRel_LocalFiles_FileOrFiles_OrcReadOptions::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:substrait.ReadRel.LocalFiles.FileOrFiles.OrcReadOptions)
}
ReadRel_LocalFiles_FileOrFiles_OrcReadOptions::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions(const ReadRel_LocalFiles_FileOrFiles_OrcReadOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.ReadRel.LocalFiles.FileOrFiles.OrcReadOptions)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadRel_LocalFiles_FileOrFiles_OrcReadOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadRel_LocalFiles_FileOrFiles_OrcReadOptions::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ReadRel_LocalFiles_FileOrFiles_OrcReadOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[11]);
}

// ===================================================================

class ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions::_Internal {
 public:
};

ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:substrait.ReadRel.LocalFiles.FileOrFiles.DwrfReadOptions)
}
ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions(const ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.ReadRel.LocalFiles.FileOrFiles.DwrfReadOptions)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[12]);
}

// ===================================================================

class ReadRel_LocalFiles_FileOrFiles::_Internal {
 public:
  static const ::substrait::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions& parquet(const ReadRel_LocalFiles_FileOrFiles* msg);
  static const ::substrait::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions& arrow(const ReadRel_LocalFiles_FileOrFiles* msg);
  static const ::substrait::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions& orc(const ReadRel_LocalFiles_FileOrFiles* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Any& extension(const ReadRel_LocalFiles_FileOrFiles* msg);
  static const ::substrait::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions& dwrf(const ReadRel_LocalFiles_FileOrFiles* msg);
};

const ::substrait::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions&
ReadRel_LocalFiles_FileOrFiles::_Internal::parquet(const ReadRel_LocalFiles_FileOrFiles* msg) {
  return *msg->_impl_.file_format_.parquet_;
}
const ::substrait::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions&
ReadRel_LocalFiles_FileOrFiles::_Internal::arrow(const ReadRel_LocalFiles_FileOrFiles* msg) {
  return *msg->_impl_.file_format_.arrow_;
}
const ::substrait::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions&
ReadRel_LocalFiles_FileOrFiles::_Internal::orc(const ReadRel_LocalFiles_FileOrFiles* msg) {
  return *msg->_impl_.file_format_.orc_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
ReadRel_LocalFiles_FileOrFiles::_Internal::extension(const ReadRel_LocalFiles_FileOrFiles* msg) {
  return *msg->_impl_.file_format_.extension_;
}
const ::substrait::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions&
ReadRel_LocalFiles_FileOrFiles::_Internal::dwrf(const ReadRel_LocalFiles_FileOrFiles* msg) {
  return *msg->_impl_.file_format_.dwrf_;
}
void ReadRel_LocalFiles_FileOrFiles::set_allocated_parquet(::substrait::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* parquet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_file_format();
  if (parquet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(parquet);
    if (message_arena != submessage_arena) {
      parquet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parquet, submessage_arena);
    }
    set_has_parquet();
    _impl_.file_format_.parquet_ = parquet;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.ReadRel.LocalFiles.FileOrFiles.parquet)
}
void ReadRel_LocalFiles_FileOrFiles::set_allocated_arrow(::substrait::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* arrow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_file_format();
  if (arrow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(arrow);
    if (message_arena != submessage_arena) {
      arrow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arrow, submessage_arena);
    }
    set_has_arrow();
    _impl_.file_format_.arrow_ = arrow;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.ReadRel.LocalFiles.FileOrFiles.arrow)
}
void ReadRel_LocalFiles_FileOrFiles::set_allocated_orc(::substrait::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* orc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_file_format();
  if (orc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(orc);
    if (message_arena != submessage_arena) {
      orc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orc, submessage_arena);
    }
    set_has_orc();
    _impl_.file_format_.orc_ = orc;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.ReadRel.LocalFiles.FileOrFiles.orc)
}
void ReadRel_LocalFiles_FileOrFiles::set_allocated_extension(::PROTOBUF_NAMESPACE_ID::Any* extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_file_format();
  if (extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extension));
    if (message_arena != submessage_arena) {
      extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension, submessage_arena);
    }
    set_has_extension();
    _impl_.file_format_.extension_ = extension;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.ReadRel.LocalFiles.FileOrFiles.extension)
}
void ReadRel_LocalFiles_FileOrFiles::clear_extension() {
  if (_internal_has_extension()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.file_format_.extension_;
    }
    clear_has_file_format();
  }
}
void ReadRel_LocalFiles_FileOrFiles::set_allocated_dwrf(::substrait::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* dwrf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_file_format();
  if (dwrf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dwrf);
    if (message_arena != submessage_arena) {
      dwrf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dwrf, submessage_arena);
    }
    set_has_dwrf();
    _impl_.file_format_.dwrf_ = dwrf;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.ReadRel.LocalFiles.FileOrFiles.dwrf)
}
ReadRel_LocalFiles_FileOrFiles::ReadRel_LocalFiles_FileOrFiles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.ReadRel.LocalFiles.FileOrFiles)
}
ReadRel_LocalFiles_FileOrFiles::ReadRel_LocalFiles_FileOrFiles(const ReadRel_LocalFiles_FileOrFiles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReadRel_LocalFiles_FileOrFiles* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.partition_index_){}
    , decltype(_impl_.start_){}
    , decltype(_impl_.length_){}
    , decltype(_impl_.path_type_){}
    , decltype(_impl_.file_format_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.partition_index_, &from._impl_.partition_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.length_) -
    reinterpret_cast<char*>(&_impl_.partition_index_)) + sizeof(_impl_.length_));
  clear_has_path_type();
  switch (from.path_type_case()) {
    case kUriPath: {
      _this->_internal_set_uri_path(from._internal_uri_path());
      break;
    }
    case kUriPathGlob: {
      _this->_internal_set_uri_path_glob(from._internal_uri_path_glob());
      break;
    }
    case kUriFile: {
      _this->_internal_set_uri_file(from._internal_uri_file());
      break;
    }
    case kUriFolder: {
      _this->_internal_set_uri_folder(from._internal_uri_folder());
      break;
    }
    case PATH_TYPE_NOT_SET: {
      break;
    }
  }
  clear_has_file_format();
  switch (from.file_format_case()) {
    case kParquet: {
      _this->_internal_mutable_parquet()->::substrait::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions::MergeFrom(
          from._internal_parquet());
      break;
    }
    case kArrow: {
      _this->_internal_mutable_arrow()->::substrait::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions::MergeFrom(
          from._internal_arrow());
      break;
    }
    case kOrc: {
      _this->_internal_mutable_orc()->::substrait::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions::MergeFrom(
          from._internal_orc());
      break;
    }
    case kExtension: {
      _this->_internal_mutable_extension()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
          from._internal_extension());
      break;
    }
    case kDwrf: {
      _this->_internal_mutable_dwrf()->::substrait::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions::MergeFrom(
          from._internal_dwrf());
      break;
    }
    case FILE_FORMAT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.ReadRel.LocalFiles.FileOrFiles)
}

inline void ReadRel_LocalFiles_FileOrFiles::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.partition_index_){uint64_t{0u}}
    , decltype(_impl_.start_){uint64_t{0u}}
    , decltype(_impl_.length_){uint64_t{0u}}
    , decltype(_impl_.path_type_){}
    , decltype(_impl_.file_format_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_path_type();
  clear_has_file_format();
}

ReadRel_LocalFiles_FileOrFiles::~ReadRel_LocalFiles_FileOrFiles() {
  // @@protoc_insertion_point(destructor:substrait.ReadRel.LocalFiles.FileOrFiles)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReadRel_LocalFiles_FileOrFiles::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_path_type()) {
    clear_path_type();
  }
  if (has_file_format()) {
    clear_file_format();
  }
}

void ReadRel_LocalFiles_FileOrFiles::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReadRel_LocalFiles_FileOrFiles::clear_path_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.ReadRel.LocalFiles.FileOrFiles)
  switch (path_type_case()) {
    case kUriPath: {
      _impl_.path_type_.uri_path_.Destroy();
      break;
    }
    case kUriPathGlob: {
      _impl_.path_type_.uri_path_glob_.Destroy();
      break;
    }
    case kUriFile: {
      _impl_.path_type_.uri_file_.Destroy();
      break;
    }
    case kUriFolder: {
      _impl_.path_type_.uri_folder_.Destroy();
      break;
    }
    case PATH_TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PATH_TYPE_NOT_SET;
}

void ReadRel_LocalFiles_FileOrFiles::clear_file_format() {
// @@protoc_insertion_point(one_of_clear_start:substrait.ReadRel.LocalFiles.FileOrFiles)
  switch (file_format_case()) {
    case kParquet: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.file_format_.parquet_;
      }
      break;
    }
    case kArrow: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.file_format_.arrow_;
      }
      break;
    }
    case kOrc: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.file_format_.orc_;
      }
      break;
    }
    case kExtension: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.file_format_.extension_;
      }
      break;
    }
    case kDwrf: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.file_format_.dwrf_;
      }
      break;
    }
    case FILE_FORMAT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = FILE_FORMAT_NOT_SET;
}


void ReadRel_LocalFiles_FileOrFiles::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.ReadRel.LocalFiles.FileOrFiles)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.partition_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.length_) -
      reinterpret_cast<char*>(&_impl_.partition_index_)) + sizeof(_impl_.length_));
  clear_path_type();
  clear_file_format();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadRel_LocalFiles_FileOrFiles::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uri_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uri_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "substrait.ReadRel.LocalFiles.FileOrFiles.uri_path"));
        } else
          goto handle_unusual;
        continue;
      // string uri_path_glob = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_uri_path_glob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "substrait.ReadRel.LocalFiles.FileOrFiles.uri_path_glob"));
        } else
          goto handle_unusual;
        continue;
      // string uri_file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_uri_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "substrait.ReadRel.LocalFiles.FileOrFiles.uri_file"));
        } else
          goto handle_unusual;
        continue;
      // string uri_folder = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_uri_folder();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "substrait.ReadRel.LocalFiles.FileOrFiles.uri_folder"));
        } else
          goto handle_unusual;
        continue;
      // uint64 partition_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.partition_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 start = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 length = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.ReadRel.LocalFiles.FileOrFiles.ParquetReadOptions parquet = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_parquet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.ReadRel.LocalFiles.FileOrFiles.ArrowReadOptions arrow = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_arrow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.ReadRel.LocalFiles.FileOrFiles.OrcReadOptions orc = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_orc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any extension = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_extension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.ReadRel.LocalFiles.FileOrFiles.DwrfReadOptions dwrf = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_dwrf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadRel_LocalFiles_FileOrFiles::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.ReadRel.LocalFiles.FileOrFiles)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri_path = 1;
  if (_internal_has_uri_path()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri_path().data(), static_cast<int>(this->_internal_uri_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.ReadRel.LocalFiles.FileOrFiles.uri_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uri_path(), target);
  }

  // string uri_path_glob = 2;
  if (_internal_has_uri_path_glob()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri_path_glob().data(), static_cast<int>(this->_internal_uri_path_glob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.ReadRel.LocalFiles.FileOrFiles.uri_path_glob");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uri_path_glob(), target);
  }

  // string uri_file = 3;
  if (_internal_has_uri_file()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri_file().data(), static_cast<int>(this->_internal_uri_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.ReadRel.LocalFiles.FileOrFiles.uri_file");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_uri_file(), target);
  }

  // string uri_folder = 4;
  if (_internal_has_uri_folder()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri_folder().data(), static_cast<int>(this->_internal_uri_folder().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.ReadRel.LocalFiles.FileOrFiles.uri_folder");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_uri_folder(), target);
  }

  // uint64 partition_index = 6;
  if (this->_internal_partition_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_partition_index(), target);
  }

  // uint64 start = 7;
  if (this->_internal_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_start(), target);
  }

  // uint64 length = 8;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_length(), target);
  }

  // .substrait.ReadRel.LocalFiles.FileOrFiles.ParquetReadOptions parquet = 9;
  if (_internal_has_parquet()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::parquet(this),
        _Internal::parquet(this).GetCachedSize(), target, stream);
  }

  // .substrait.ReadRel.LocalFiles.FileOrFiles.ArrowReadOptions arrow = 10;
  if (_internal_has_arrow()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::arrow(this),
        _Internal::arrow(this).GetCachedSize(), target, stream);
  }

  // .substrait.ReadRel.LocalFiles.FileOrFiles.OrcReadOptions orc = 11;
  if (_internal_has_orc()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::orc(this),
        _Internal::orc(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Any extension = 12;
  if (_internal_has_extension()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::extension(this),
        _Internal::extension(this).GetCachedSize(), target, stream);
  }

  // .substrait.ReadRel.LocalFiles.FileOrFiles.DwrfReadOptions dwrf = 13;
  if (_internal_has_dwrf()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::dwrf(this),
        _Internal::dwrf(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.ReadRel.LocalFiles.FileOrFiles)
  return target;
}

size_t ReadRel_LocalFiles_FileOrFiles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.ReadRel.LocalFiles.FileOrFiles)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 partition_index = 6;
  if (this->_internal_partition_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_partition_index());
  }

  // uint64 start = 7;
  if (this->_internal_start() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_start());
  }

  // uint64 length = 8;
  if (this->_internal_length() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_length());
  }

  switch (path_type_case()) {
    // string uri_path = 1;
    case kUriPath: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uri_path());
      break;
    }
    // string uri_path_glob = 2;
    case kUriPathGlob: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uri_path_glob());
      break;
    }
    // string uri_file = 3;
    case kUriFile: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uri_file());
      break;
    }
    // string uri_folder = 4;
    case kUriFolder: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uri_folder());
      break;
    }
    case PATH_TYPE_NOT_SET: {
      break;
    }
  }
  switch (file_format_case()) {
    // .substrait.ReadRel.LocalFiles.FileOrFiles.ParquetReadOptions parquet = 9;
    case kParquet: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.file_format_.parquet_);
      break;
    }
    // .substrait.ReadRel.LocalFiles.FileOrFiles.ArrowReadOptions arrow = 10;
    case kArrow: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.file_format_.arrow_);
      break;
    }
    // .substrait.ReadRel.LocalFiles.FileOrFiles.OrcReadOptions orc = 11;
    case kOrc: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.file_format_.orc_);
      break;
    }
    // .google.protobuf.Any extension = 12;
    case kExtension: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.file_format_.extension_);
      break;
    }
    // .substrait.ReadRel.LocalFiles.FileOrFiles.DwrfReadOptions dwrf = 13;
    case kDwrf: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.file_format_.dwrf_);
      break;
    }
    case FILE_FORMAT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadRel_LocalFiles_FileOrFiles::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReadRel_LocalFiles_FileOrFiles::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadRel_LocalFiles_FileOrFiles::GetClassData() const { return &_class_data_; }


void ReadRel_LocalFiles_FileOrFiles::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReadRel_LocalFiles_FileOrFiles*>(&to_msg);
  auto& from = static_cast<const ReadRel_LocalFiles_FileOrFiles&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.ReadRel.LocalFiles.FileOrFiles)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_partition_index() != 0) {
    _this->_internal_set_partition_index(from._internal_partition_index());
  }
  if (from._internal_start() != 0) {
    _this->_internal_set_start(from._internal_start());
  }
  if (from._internal_length() != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  switch (from.path_type_case()) {
    case kUriPath: {
      _this->_internal_set_uri_path(from._internal_uri_path());
      break;
    }
    case kUriPathGlob: {
      _this->_internal_set_uri_path_glob(from._internal_uri_path_glob());
      break;
    }
    case kUriFile: {
      _this->_internal_set_uri_file(from._internal_uri_file());
      break;
    }
    case kUriFolder: {
      _this->_internal_set_uri_folder(from._internal_uri_folder());
      break;
    }
    case PATH_TYPE_NOT_SET: {
      break;
    }
  }
  switch (from.file_format_case()) {
    case kParquet: {
      _this->_internal_mutable_parquet()->::substrait::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions::MergeFrom(
          from._internal_parquet());
      break;
    }
    case kArrow: {
      _this->_internal_mutable_arrow()->::substrait::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions::MergeFrom(
          from._internal_arrow());
      break;
    }
    case kOrc: {
      _this->_internal_mutable_orc()->::substrait::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions::MergeFrom(
          from._internal_orc());
      break;
    }
    case kExtension: {
      _this->_internal_mutable_extension()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
          from._internal_extension());
      break;
    }
    case kDwrf: {
      _this->_internal_mutable_dwrf()->::substrait::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions::MergeFrom(
          from._internal_dwrf());
      break;
    }
    case FILE_FORMAT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadRel_LocalFiles_FileOrFiles::CopyFrom(const ReadRel_LocalFiles_FileOrFiles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.ReadRel.LocalFiles.FileOrFiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRel_LocalFiles_FileOrFiles::IsInitialized() const {
  return true;
}

void ReadRel_LocalFiles_FileOrFiles::InternalSwap(ReadRel_LocalFiles_FileOrFiles* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadRel_LocalFiles_FileOrFiles, _impl_.length_)
      + sizeof(ReadRel_LocalFiles_FileOrFiles::_impl_.length_)
      - PROTOBUF_FIELD_OFFSET(ReadRel_LocalFiles_FileOrFiles, _impl_.partition_index_)>(
          reinterpret_cast<char*>(&_impl_.partition_index_),
          reinterpret_cast<char*>(&other->_impl_.partition_index_));
  swap(_impl_.path_type_, other->_impl_.path_type_);
  swap(_impl_.file_format_, other->_impl_.file_format_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadRel_LocalFiles_FileOrFiles::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[13]);
}

// ===================================================================

class ReadRel_LocalFiles::_Internal {
 public:
  static const ::substrait::extensions::AdvancedExtension& advanced_extension(const ReadRel_LocalFiles* msg);
};

const ::substrait::extensions::AdvancedExtension&
ReadRel_LocalFiles::_Internal::advanced_extension(const ReadRel_LocalFiles* msg) {
  return *msg->_impl_.advanced_extension_;
}
void ReadRel_LocalFiles::clear_advanced_extension() {
  if (GetArenaForAllocation() == nullptr && _impl_.advanced_extension_ != nullptr) {
    delete _impl_.advanced_extension_;
  }
  _impl_.advanced_extension_ = nullptr;
}
ReadRel_LocalFiles::ReadRel_LocalFiles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.ReadRel.LocalFiles)
}
ReadRel_LocalFiles::ReadRel_LocalFiles(const ReadRel_LocalFiles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReadRel_LocalFiles* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.advanced_extension_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_advanced_extension()) {
    _this->_impl_.advanced_extension_ = new ::substrait::extensions::AdvancedExtension(*from._impl_.advanced_extension_);
  }
  // @@protoc_insertion_point(copy_constructor:substrait.ReadRel.LocalFiles)
}

inline void ReadRel_LocalFiles::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.advanced_extension_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReadRel_LocalFiles::~ReadRel_LocalFiles() {
  // @@protoc_insertion_point(destructor:substrait.ReadRel.LocalFiles)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReadRel_LocalFiles::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.advanced_extension_;
}

void ReadRel_LocalFiles::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReadRel_LocalFiles::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.ReadRel.LocalFiles)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.advanced_extension_ != nullptr) {
    delete _impl_.advanced_extension_;
  }
  _impl_.advanced_extension_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadRel_LocalFiles::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .substrait.ReadRel.LocalFiles.FileOrFiles items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .substrait.extensions.AdvancedExtension advanced_extension = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadRel_LocalFiles::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.ReadRel.LocalFiles)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.ReadRel.LocalFiles.FileOrFiles items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10;
  if (this->_internal_has_advanced_extension()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::advanced_extension(this),
        _Internal::advanced_extension(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.ReadRel.LocalFiles)
  return target;
}

size_t ReadRel_LocalFiles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.ReadRel.LocalFiles)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.ReadRel.LocalFiles.FileOrFiles items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10;
  if (this->_internal_has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.advanced_extension_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadRel_LocalFiles::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReadRel_LocalFiles::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadRel_LocalFiles::GetClassData() const { return &_class_data_; }


void ReadRel_LocalFiles::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReadRel_LocalFiles*>(&to_msg);
  auto& from = static_cast<const ReadRel_LocalFiles&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.ReadRel.LocalFiles)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_has_advanced_extension()) {
    _this->_internal_mutable_advanced_extension()->::substrait::extensions::AdvancedExtension::MergeFrom(
        from._internal_advanced_extension());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadRel_LocalFiles::CopyFrom(const ReadRel_LocalFiles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.ReadRel.LocalFiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRel_LocalFiles::IsInitialized() const {
  return true;
}

void ReadRel_LocalFiles::InternalSwap(ReadRel_LocalFiles* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.advanced_extension_, other->_impl_.advanced_extension_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadRel_LocalFiles::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[14]);
}

// ===================================================================

class ReadRel::_Internal {
 public:
  static const ::substrait::RelCommon& common(const ReadRel* msg);
  static const ::substrait::NamedStruct& base_schema(const ReadRel* msg);
  static const ::substrait::Expression& filter(const ReadRel* msg);
  static const ::substrait::Expression_MaskExpression& projection(const ReadRel* msg);
  static const ::substrait::extensions::AdvancedExtension& advanced_extension(const ReadRel* msg);
  static const ::substrait::ReadRel_VirtualTable& virtual_table(const ReadRel* msg);
  static const ::substrait::ReadRel_LocalFiles& local_files(const ReadRel* msg);
  static const ::substrait::ReadRel_NamedTable& named_table(const ReadRel* msg);
  static const ::substrait::ReadRel_ExtensionTable& extension_table(const ReadRel* msg);
};

const ::substrait::RelCommon&
ReadRel::_Internal::common(const ReadRel* msg) {
  return *msg->_impl_.common_;
}
const ::substrait::NamedStruct&
ReadRel::_Internal::base_schema(const ReadRel* msg) {
  return *msg->_impl_.base_schema_;
}
const ::substrait::Expression&
ReadRel::_Internal::filter(const ReadRel* msg) {
  return *msg->_impl_.filter_;
}
const ::substrait::Expression_MaskExpression&
ReadRel::_Internal::projection(const ReadRel* msg) {
  return *msg->_impl_.projection_;
}
const ::substrait::extensions::AdvancedExtension&
ReadRel::_Internal::advanced_extension(const ReadRel* msg) {
  return *msg->_impl_.advanced_extension_;
}
const ::substrait::ReadRel_VirtualTable&
ReadRel::_Internal::virtual_table(const ReadRel* msg) {
  return *msg->_impl_.read_type_.virtual_table_;
}
const ::substrait::ReadRel_LocalFiles&
ReadRel::_Internal::local_files(const ReadRel* msg) {
  return *msg->_impl_.read_type_.local_files_;
}
const ::substrait::ReadRel_NamedTable&
ReadRel::_Internal::named_table(const ReadRel* msg) {
  return *msg->_impl_.read_type_.named_table_;
}
const ::substrait::ReadRel_ExtensionTable&
ReadRel::_Internal::extension_table(const ReadRel* msg) {
  return *msg->_impl_.read_type_.extension_table_;
}
void ReadRel::clear_base_schema() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_schema_ != nullptr) {
    delete _impl_.base_schema_;
  }
  _impl_.base_schema_ = nullptr;
}
void ReadRel::clear_advanced_extension() {
  if (GetArenaForAllocation() == nullptr && _impl_.advanced_extension_ != nullptr) {
    delete _impl_.advanced_extension_;
  }
  _impl_.advanced_extension_ = nullptr;
}
void ReadRel::set_allocated_virtual_table(::substrait::ReadRel_VirtualTable* virtual_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_read_type();
  if (virtual_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(virtual_table);
    if (message_arena != submessage_arena) {
      virtual_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, virtual_table, submessage_arena);
    }
    set_has_virtual_table();
    _impl_.read_type_.virtual_table_ = virtual_table;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.ReadRel.virtual_table)
}
void ReadRel::set_allocated_local_files(::substrait::ReadRel_LocalFiles* local_files) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_read_type();
  if (local_files) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(local_files);
    if (message_arena != submessage_arena) {
      local_files = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_files, submessage_arena);
    }
    set_has_local_files();
    _impl_.read_type_.local_files_ = local_files;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.ReadRel.local_files)
}
void ReadRel::set_allocated_named_table(::substrait::ReadRel_NamedTable* named_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_read_type();
  if (named_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(named_table);
    if (message_arena != submessage_arena) {
      named_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, named_table, submessage_arena);
    }
    set_has_named_table();
    _impl_.read_type_.named_table_ = named_table;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.ReadRel.named_table)
}
void ReadRel::set_allocated_extension_table(::substrait::ReadRel_ExtensionTable* extension_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_read_type();
  if (extension_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(extension_table);
    if (message_arena != submessage_arena) {
      extension_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension_table, submessage_arena);
    }
    set_has_extension_table();
    _impl_.read_type_.extension_table_ = extension_table;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.ReadRel.extension_table)
}
ReadRel::ReadRel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.ReadRel)
}
ReadRel::ReadRel(const ReadRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReadRel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.common_){nullptr}
    , decltype(_impl_.base_schema_){nullptr}
    , decltype(_impl_.filter_){nullptr}
    , decltype(_impl_.projection_){nullptr}
    , decltype(_impl_.advanced_extension_){nullptr}
    , decltype(_impl_.read_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    _this->_impl_.common_ = new ::substrait::RelCommon(*from._impl_.common_);
  }
  if (from._internal_has_base_schema()) {
    _this->_impl_.base_schema_ = new ::substrait::NamedStruct(*from._impl_.base_schema_);
  }
  if (from._internal_has_filter()) {
    _this->_impl_.filter_ = new ::substrait::Expression(*from._impl_.filter_);
  }
  if (from._internal_has_projection()) {
    _this->_impl_.projection_ = new ::substrait::Expression_MaskExpression(*from._impl_.projection_);
  }
  if (from._internal_has_advanced_extension()) {
    _this->_impl_.advanced_extension_ = new ::substrait::extensions::AdvancedExtension(*from._impl_.advanced_extension_);
  }
  clear_has_read_type();
  switch (from.read_type_case()) {
    case kVirtualTable: {
      _this->_internal_mutable_virtual_table()->::substrait::ReadRel_VirtualTable::MergeFrom(
          from._internal_virtual_table());
      break;
    }
    case kLocalFiles: {
      _this->_internal_mutable_local_files()->::substrait::ReadRel_LocalFiles::MergeFrom(
          from._internal_local_files());
      break;
    }
    case kNamedTable: {
      _this->_internal_mutable_named_table()->::substrait::ReadRel_NamedTable::MergeFrom(
          from._internal_named_table());
      break;
    }
    case kExtensionTable: {
      _this->_internal_mutable_extension_table()->::substrait::ReadRel_ExtensionTable::MergeFrom(
          from._internal_extension_table());
      break;
    }
    case READ_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.ReadRel)
}

inline void ReadRel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.common_){nullptr}
    , decltype(_impl_.base_schema_){nullptr}
    , decltype(_impl_.filter_){nullptr}
    , decltype(_impl_.projection_){nullptr}
    , decltype(_impl_.advanced_extension_){nullptr}
    , decltype(_impl_.read_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_read_type();
}

ReadRel::~ReadRel() {
  // @@protoc_insertion_point(destructor:substrait.ReadRel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReadRel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.common_;
  if (this != internal_default_instance()) delete _impl_.base_schema_;
  if (this != internal_default_instance()) delete _impl_.filter_;
  if (this != internal_default_instance()) delete _impl_.projection_;
  if (this != internal_default_instance()) delete _impl_.advanced_extension_;
  if (has_read_type()) {
    clear_read_type();
  }
}

void ReadRel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReadRel::clear_read_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.ReadRel)
  switch (read_type_case()) {
    case kVirtualTable: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.read_type_.virtual_table_;
      }
      break;
    }
    case kLocalFiles: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.read_type_.local_files_;
      }
      break;
    }
    case kNamedTable: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.read_type_.named_table_;
      }
      break;
    }
    case kExtensionTable: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.read_type_.extension_table_;
      }
      break;
    }
    case READ_TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = READ_TYPE_NOT_SET;
}


void ReadRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.ReadRel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.common_ != nullptr) {
    delete _impl_.common_;
  }
  _impl_.common_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.base_schema_ != nullptr) {
    delete _impl_.base_schema_;
  }
  _impl_.base_schema_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.filter_ != nullptr) {
    delete _impl_.filter_;
  }
  _impl_.filter_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.projection_ != nullptr) {
    delete _impl_.projection_;
  }
  _impl_.projection_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.advanced_extension_ != nullptr) {
    delete _impl_.advanced_extension_;
  }
  _impl_.advanced_extension_ = nullptr;
  clear_read_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadRel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.RelCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.NamedStruct base_schema = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_schema(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression filter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.MaskExpression projection = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_projection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.ReadRel.VirtualTable virtual_table = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_virtual_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.ReadRel.LocalFiles local_files = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_files(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.ReadRel.NamedTable named_table = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_named_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.ReadRel.ExtensionTable extension_table = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_extension_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.extensions.AdvancedExtension advanced_extension = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadRel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.ReadRel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.RelCommon common = 1;
  if (this->_internal_has_common()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::common(this),
        _Internal::common(this).GetCachedSize(), target, stream);
  }

  // .substrait.NamedStruct base_schema = 2;
  if (this->_internal_has_base_schema()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::base_schema(this),
        _Internal::base_schema(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression filter = 3;
  if (this->_internal_has_filter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::filter(this),
        _Internal::filter(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression.MaskExpression projection = 4;
  if (this->_internal_has_projection()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::projection(this),
        _Internal::projection(this).GetCachedSize(), target, stream);
  }

  // .substrait.ReadRel.VirtualTable virtual_table = 5;
  if (_internal_has_virtual_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::virtual_table(this),
        _Internal::virtual_table(this).GetCachedSize(), target, stream);
  }

  // .substrait.ReadRel.LocalFiles local_files = 6;
  if (_internal_has_local_files()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::local_files(this),
        _Internal::local_files(this).GetCachedSize(), target, stream);
  }

  // .substrait.ReadRel.NamedTable named_table = 7;
  if (_internal_has_named_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::named_table(this),
        _Internal::named_table(this).GetCachedSize(), target, stream);
  }

  // .substrait.ReadRel.ExtensionTable extension_table = 8;
  if (_internal_has_extension_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::extension_table(this),
        _Internal::extension_table(this).GetCachedSize(), target, stream);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10;
  if (this->_internal_has_advanced_extension()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::advanced_extension(this),
        _Internal::advanced_extension(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.ReadRel)
  return target;
}

size_t ReadRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.ReadRel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.RelCommon common = 1;
  if (this->_internal_has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.common_);
  }

  // .substrait.NamedStruct base_schema = 2;
  if (this->_internal_has_base_schema()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_schema_);
  }

  // .substrait.Expression filter = 3;
  if (this->_internal_has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.filter_);
  }

  // .substrait.Expression.MaskExpression projection = 4;
  if (this->_internal_has_projection()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.projection_);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10;
  if (this->_internal_has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.advanced_extension_);
  }

  switch (read_type_case()) {
    // .substrait.ReadRel.VirtualTable virtual_table = 5;
    case kVirtualTable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.read_type_.virtual_table_);
      break;
    }
    // .substrait.ReadRel.LocalFiles local_files = 6;
    case kLocalFiles: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.read_type_.local_files_);
      break;
    }
    // .substrait.ReadRel.NamedTable named_table = 7;
    case kNamedTable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.read_type_.named_table_);
      break;
    }
    // .substrait.ReadRel.ExtensionTable extension_table = 8;
    case kExtensionTable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.read_type_.extension_table_);
      break;
    }
    case READ_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadRel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReadRel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadRel::GetClassData() const { return &_class_data_; }


void ReadRel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReadRel*>(&to_msg);
  auto& from = static_cast<const ReadRel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.ReadRel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_common()) {
    _this->_internal_mutable_common()->::substrait::RelCommon::MergeFrom(
        from._internal_common());
  }
  if (from._internal_has_base_schema()) {
    _this->_internal_mutable_base_schema()->::substrait::NamedStruct::MergeFrom(
        from._internal_base_schema());
  }
  if (from._internal_has_filter()) {
    _this->_internal_mutable_filter()->::substrait::Expression::MergeFrom(
        from._internal_filter());
  }
  if (from._internal_has_projection()) {
    _this->_internal_mutable_projection()->::substrait::Expression_MaskExpression::MergeFrom(
        from._internal_projection());
  }
  if (from._internal_has_advanced_extension()) {
    _this->_internal_mutable_advanced_extension()->::substrait::extensions::AdvancedExtension::MergeFrom(
        from._internal_advanced_extension());
  }
  switch (from.read_type_case()) {
    case kVirtualTable: {
      _this->_internal_mutable_virtual_table()->::substrait::ReadRel_VirtualTable::MergeFrom(
          from._internal_virtual_table());
      break;
    }
    case kLocalFiles: {
      _this->_internal_mutable_local_files()->::substrait::ReadRel_LocalFiles::MergeFrom(
          from._internal_local_files());
      break;
    }
    case kNamedTable: {
      _this->_internal_mutable_named_table()->::substrait::ReadRel_NamedTable::MergeFrom(
          from._internal_named_table());
      break;
    }
    case kExtensionTable: {
      _this->_internal_mutable_extension_table()->::substrait::ReadRel_ExtensionTable::MergeFrom(
          from._internal_extension_table());
      break;
    }
    case READ_TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadRel::CopyFrom(const ReadRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.ReadRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRel::IsInitialized() const {
  return true;
}

void ReadRel::InternalSwap(ReadRel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadRel, _impl_.advanced_extension_)
      + sizeof(ReadRel::_impl_.advanced_extension_)
      - PROTOBUF_FIELD_OFFSET(ReadRel, _impl_.common_)>(
          reinterpret_cast<char*>(&_impl_.common_),
          reinterpret_cast<char*>(&other->_impl_.common_));
  swap(_impl_.read_type_, other->_impl_.read_type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadRel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[15]);
}

// ===================================================================

class ProjectRel::_Internal {
 public:
  static const ::substrait::RelCommon& common(const ProjectRel* msg);
  static const ::substrait::Rel& input(const ProjectRel* msg);
  static const ::substrait::extensions::AdvancedExtension& advanced_extension(const ProjectRel* msg);
};

const ::substrait::RelCommon&
ProjectRel::_Internal::common(const ProjectRel* msg) {
  return *msg->_impl_.common_;
}
const ::substrait::Rel&
ProjectRel::_Internal::input(const ProjectRel* msg) {
  return *msg->_impl_.input_;
}
const ::substrait::extensions::AdvancedExtension&
ProjectRel::_Internal::advanced_extension(const ProjectRel* msg) {
  return *msg->_impl_.advanced_extension_;
}
void ProjectRel::clear_advanced_extension() {
  if (GetArenaForAllocation() == nullptr && _impl_.advanced_extension_ != nullptr) {
    delete _impl_.advanced_extension_;
  }
  _impl_.advanced_extension_ = nullptr;
}
ProjectRel::ProjectRel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.ProjectRel)
}
ProjectRel::ProjectRel(const ProjectRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProjectRel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.expressions_){from._impl_.expressions_}
    , decltype(_impl_.common_){nullptr}
    , decltype(_impl_.input_){nullptr}
    , decltype(_impl_.advanced_extension_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    _this->_impl_.common_ = new ::substrait::RelCommon(*from._impl_.common_);
  }
  if (from._internal_has_input()) {
    _this->_impl_.input_ = new ::substrait::Rel(*from._impl_.input_);
  }
  if (from._internal_has_advanced_extension()) {
    _this->_impl_.advanced_extension_ = new ::substrait::extensions::AdvancedExtension(*from._impl_.advanced_extension_);
  }
  // @@protoc_insertion_point(copy_constructor:substrait.ProjectRel)
}

inline void ProjectRel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.expressions_){arena}
    , decltype(_impl_.common_){nullptr}
    , decltype(_impl_.input_){nullptr}
    , decltype(_impl_.advanced_extension_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProjectRel::~ProjectRel() {
  // @@protoc_insertion_point(destructor:substrait.ProjectRel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProjectRel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.expressions_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.common_;
  if (this != internal_default_instance()) delete _impl_.input_;
  if (this != internal_default_instance()) delete _impl_.advanced_extension_;
}

void ProjectRel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProjectRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.ProjectRel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.expressions_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.common_ != nullptr) {
    delete _impl_.common_;
  }
  _impl_.common_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.input_ != nullptr) {
    delete _impl_.input_;
  }
  _impl_.input_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.advanced_extension_ != nullptr) {
    delete _impl_.advanced_extension_;
  }
  _impl_.advanced_extension_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProjectRel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.RelCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Rel input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .substrait.Expression expressions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_expressions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .substrait.extensions.AdvancedExtension advanced_extension = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProjectRel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.ProjectRel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.RelCommon common = 1;
  if (this->_internal_has_common()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::common(this),
        _Internal::common(this).GetCachedSize(), target, stream);
  }

  // .substrait.Rel input = 2;
  if (this->_internal_has_input()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::input(this),
        _Internal::input(this).GetCachedSize(), target, stream);
  }

  // repeated .substrait.Expression expressions = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_expressions_size()); i < n; i++) {
    const auto& repfield = this->_internal_expressions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10;
  if (this->_internal_has_advanced_extension()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::advanced_extension(this),
        _Internal::advanced_extension(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.ProjectRel)
  return target;
}

size_t ProjectRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.ProjectRel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.Expression expressions = 3;
  total_size += 1UL * this->_internal_expressions_size();
  for (const auto& msg : this->_impl_.expressions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.RelCommon common = 1;
  if (this->_internal_has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.common_);
  }

  // .substrait.Rel input = 2;
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.input_);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10;
  if (this->_internal_has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.advanced_extension_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProjectRel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProjectRel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProjectRel::GetClassData() const { return &_class_data_; }


void ProjectRel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProjectRel*>(&to_msg);
  auto& from = static_cast<const ProjectRel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.ProjectRel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.expressions_.MergeFrom(from._impl_.expressions_);
  if (from._internal_has_common()) {
    _this->_internal_mutable_common()->::substrait::RelCommon::MergeFrom(
        from._internal_common());
  }
  if (from._internal_has_input()) {
    _this->_internal_mutable_input()->::substrait::Rel::MergeFrom(
        from._internal_input());
  }
  if (from._internal_has_advanced_extension()) {
    _this->_internal_mutable_advanced_extension()->::substrait::extensions::AdvancedExtension::MergeFrom(
        from._internal_advanced_extension());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProjectRel::CopyFrom(const ProjectRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.ProjectRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectRel::IsInitialized() const {
  return true;
}

void ProjectRel::InternalSwap(ProjectRel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.expressions_.InternalSwap(&other->_impl_.expressions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProjectRel, _impl_.advanced_extension_)
      + sizeof(ProjectRel::_impl_.advanced_extension_)
      - PROTOBUF_FIELD_OFFSET(ProjectRel, _impl_.common_)>(
          reinterpret_cast<char*>(&_impl_.common_),
          reinterpret_cast<char*>(&other->_impl_.common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjectRel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[16]);
}

// ===================================================================

class JoinRel::_Internal {
 public:
  static const ::substrait::RelCommon& common(const JoinRel* msg);
  static const ::substrait::Rel& left(const JoinRel* msg);
  static const ::substrait::Rel& right(const JoinRel* msg);
  static const ::substrait::Expression& expression(const JoinRel* msg);
  static const ::substrait::Expression& post_join_filter(const JoinRel* msg);
  static const ::substrait::extensions::AdvancedExtension& advanced_extension(const JoinRel* msg);
};

const ::substrait::RelCommon&
JoinRel::_Internal::common(const JoinRel* msg) {
  return *msg->_impl_.common_;
}
const ::substrait::Rel&
JoinRel::_Internal::left(const JoinRel* msg) {
  return *msg->_impl_.left_;
}
const ::substrait::Rel&
JoinRel::_Internal::right(const JoinRel* msg) {
  return *msg->_impl_.right_;
}
const ::substrait::Expression&
JoinRel::_Internal::expression(const JoinRel* msg) {
  return *msg->_impl_.expression_;
}
const ::substrait::Expression&
JoinRel::_Internal::post_join_filter(const JoinRel* msg) {
  return *msg->_impl_.post_join_filter_;
}
const ::substrait::extensions::AdvancedExtension&
JoinRel::_Internal::advanced_extension(const JoinRel* msg) {
  return *msg->_impl_.advanced_extension_;
}
void JoinRel::clear_advanced_extension() {
  if (GetArenaForAllocation() == nullptr && _impl_.advanced_extension_ != nullptr) {
    delete _impl_.advanced_extension_;
  }
  _impl_.advanced_extension_ = nullptr;
}
JoinRel::JoinRel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.JoinRel)
}
JoinRel::JoinRel(const JoinRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JoinRel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.common_){nullptr}
    , decltype(_impl_.left_){nullptr}
    , decltype(_impl_.right_){nullptr}
    , decltype(_impl_.expression_){nullptr}
    , decltype(_impl_.post_join_filter_){nullptr}
    , decltype(_impl_.advanced_extension_){nullptr}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    _this->_impl_.common_ = new ::substrait::RelCommon(*from._impl_.common_);
  }
  if (from._internal_has_left()) {
    _this->_impl_.left_ = new ::substrait::Rel(*from._impl_.left_);
  }
  if (from._internal_has_right()) {
    _this->_impl_.right_ = new ::substrait::Rel(*from._impl_.right_);
  }
  if (from._internal_has_expression()) {
    _this->_impl_.expression_ = new ::substrait::Expression(*from._impl_.expression_);
  }
  if (from._internal_has_post_join_filter()) {
    _this->_impl_.post_join_filter_ = new ::substrait::Expression(*from._impl_.post_join_filter_);
  }
  if (from._internal_has_advanced_extension()) {
    _this->_impl_.advanced_extension_ = new ::substrait::extensions::AdvancedExtension(*from._impl_.advanced_extension_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:substrait.JoinRel)
}

inline void JoinRel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.common_){nullptr}
    , decltype(_impl_.left_){nullptr}
    , decltype(_impl_.right_){nullptr}
    , decltype(_impl_.expression_){nullptr}
    , decltype(_impl_.post_join_filter_){nullptr}
    , decltype(_impl_.advanced_extension_){nullptr}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

JoinRel::~JoinRel() {
  // @@protoc_insertion_point(destructor:substrait.JoinRel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JoinRel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.common_;
  if (this != internal_default_instance()) delete _impl_.left_;
  if (this != internal_default_instance()) delete _impl_.right_;
  if (this != internal_default_instance()) delete _impl_.expression_;
  if (this != internal_default_instance()) delete _impl_.post_join_filter_;
  if (this != internal_default_instance()) delete _impl_.advanced_extension_;
}

void JoinRel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JoinRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.JoinRel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.common_ != nullptr) {
    delete _impl_.common_;
  }
  _impl_.common_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.left_ != nullptr) {
    delete _impl_.left_;
  }
  _impl_.left_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.right_ != nullptr) {
    delete _impl_.right_;
  }
  _impl_.right_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.expression_ != nullptr) {
    delete _impl_.expression_;
  }
  _impl_.expression_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.post_join_filter_ != nullptr) {
    delete _impl_.post_join_filter_;
  }
  _impl_.post_join_filter_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.advanced_extension_ != nullptr) {
    delete _impl_.advanced_extension_;
  }
  _impl_.advanced_extension_ = nullptr;
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinRel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.RelCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Rel left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_left(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Rel right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_right(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression expression = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_expression(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression post_join_filter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_post_join_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.JoinRel.JoinType type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::substrait::JoinRel_JoinType>(val));
        } else
          goto handle_unusual;
        continue;
      // .substrait.extensions.AdvancedExtension advanced_extension = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JoinRel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.JoinRel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.RelCommon common = 1;
  if (this->_internal_has_common()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::common(this),
        _Internal::common(this).GetCachedSize(), target, stream);
  }

  // .substrait.Rel left = 2;
  if (this->_internal_has_left()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::left(this),
        _Internal::left(this).GetCachedSize(), target, stream);
  }

  // .substrait.Rel right = 3;
  if (this->_internal_has_right()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::right(this),
        _Internal::right(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression expression = 4;
  if (this->_internal_has_expression()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::expression(this),
        _Internal::expression(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression post_join_filter = 5;
  if (this->_internal_has_post_join_filter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::post_join_filter(this),
        _Internal::post_join_filter(this).GetCachedSize(), target, stream);
  }

  // .substrait.JoinRel.JoinType type = 6;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_type(), target);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10;
  if (this->_internal_has_advanced_extension()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::advanced_extension(this),
        _Internal::advanced_extension(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.JoinRel)
  return target;
}

size_t JoinRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.JoinRel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.RelCommon common = 1;
  if (this->_internal_has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.common_);
  }

  // .substrait.Rel left = 2;
  if (this->_internal_has_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.left_);
  }

  // .substrait.Rel right = 3;
  if (this->_internal_has_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.right_);
  }

  // .substrait.Expression expression = 4;
  if (this->_internal_has_expression()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expression_);
  }

  // .substrait.Expression post_join_filter = 5;
  if (this->_internal_has_post_join_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.post_join_filter_);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10;
  if (this->_internal_has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.advanced_extension_);
  }

  // .substrait.JoinRel.JoinType type = 6;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JoinRel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JoinRel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JoinRel::GetClassData() const { return &_class_data_; }


void JoinRel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JoinRel*>(&to_msg);
  auto& from = static_cast<const JoinRel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.JoinRel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_common()) {
    _this->_internal_mutable_common()->::substrait::RelCommon::MergeFrom(
        from._internal_common());
  }
  if (from._internal_has_left()) {
    _this->_internal_mutable_left()->::substrait::Rel::MergeFrom(
        from._internal_left());
  }
  if (from._internal_has_right()) {
    _this->_internal_mutable_right()->::substrait::Rel::MergeFrom(
        from._internal_right());
  }
  if (from._internal_has_expression()) {
    _this->_internal_mutable_expression()->::substrait::Expression::MergeFrom(
        from._internal_expression());
  }
  if (from._internal_has_post_join_filter()) {
    _this->_internal_mutable_post_join_filter()->::substrait::Expression::MergeFrom(
        from._internal_post_join_filter());
  }
  if (from._internal_has_advanced_extension()) {
    _this->_internal_mutable_advanced_extension()->::substrait::extensions::AdvancedExtension::MergeFrom(
        from._internal_advanced_extension());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JoinRel::CopyFrom(const JoinRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.JoinRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinRel::IsInitialized() const {
  return true;
}

void JoinRel::InternalSwap(JoinRel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JoinRel, _impl_.type_)
      + sizeof(JoinRel::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(JoinRel, _impl_.common_)>(
          reinterpret_cast<char*>(&_impl_.common_),
          reinterpret_cast<char*>(&other->_impl_.common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinRel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[17]);
}

// ===================================================================

class CrossRel::_Internal {
 public:
  static const ::substrait::RelCommon& common(const CrossRel* msg);
  static const ::substrait::Rel& left(const CrossRel* msg);
  static const ::substrait::Rel& right(const CrossRel* msg);
  static const ::substrait::extensions::AdvancedExtension& advanced_extension(const CrossRel* msg);
};

const ::substrait::RelCommon&
CrossRel::_Internal::common(const CrossRel* msg) {
  return *msg->_impl_.common_;
}
const ::substrait::Rel&
CrossRel::_Internal::left(const CrossRel* msg) {
  return *msg->_impl_.left_;
}
const ::substrait::Rel&
CrossRel::_Internal::right(const CrossRel* msg) {
  return *msg->_impl_.right_;
}
const ::substrait::extensions::AdvancedExtension&
CrossRel::_Internal::advanced_extension(const CrossRel* msg) {
  return *msg->_impl_.advanced_extension_;
}
void CrossRel::clear_advanced_extension() {
  if (GetArenaForAllocation() == nullptr && _impl_.advanced_extension_ != nullptr) {
    delete _impl_.advanced_extension_;
  }
  _impl_.advanced_extension_ = nullptr;
}
CrossRel::CrossRel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.CrossRel)
}
CrossRel::CrossRel(const CrossRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CrossRel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.common_){nullptr}
    , decltype(_impl_.left_){nullptr}
    , decltype(_impl_.right_){nullptr}
    , decltype(_impl_.advanced_extension_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    _this->_impl_.common_ = new ::substrait::RelCommon(*from._impl_.common_);
  }
  if (from._internal_has_left()) {
    _this->_impl_.left_ = new ::substrait::Rel(*from._impl_.left_);
  }
  if (from._internal_has_right()) {
    _this->_impl_.right_ = new ::substrait::Rel(*from._impl_.right_);
  }
  if (from._internal_has_advanced_extension()) {
    _this->_impl_.advanced_extension_ = new ::substrait::extensions::AdvancedExtension(*from._impl_.advanced_extension_);
  }
  // @@protoc_insertion_point(copy_constructor:substrait.CrossRel)
}

inline void CrossRel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.common_){nullptr}
    , decltype(_impl_.left_){nullptr}
    , decltype(_impl_.right_){nullptr}
    , decltype(_impl_.advanced_extension_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CrossRel::~CrossRel() {
  // @@protoc_insertion_point(destructor:substrait.CrossRel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CrossRel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.common_;
  if (this != internal_default_instance()) delete _impl_.left_;
  if (this != internal_default_instance()) delete _impl_.right_;
  if (this != internal_default_instance()) delete _impl_.advanced_extension_;
}

void CrossRel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CrossRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.CrossRel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.common_ != nullptr) {
    delete _impl_.common_;
  }
  _impl_.common_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.left_ != nullptr) {
    delete _impl_.left_;
  }
  _impl_.left_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.right_ != nullptr) {
    delete _impl_.right_;
  }
  _impl_.right_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.advanced_extension_ != nullptr) {
    delete _impl_.advanced_extension_;
  }
  _impl_.advanced_extension_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CrossRel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.RelCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Rel left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_left(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Rel right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_right(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.extensions.AdvancedExtension advanced_extension = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CrossRel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.CrossRel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.RelCommon common = 1;
  if (this->_internal_has_common()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::common(this),
        _Internal::common(this).GetCachedSize(), target, stream);
  }

  // .substrait.Rel left = 2;
  if (this->_internal_has_left()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::left(this),
        _Internal::left(this).GetCachedSize(), target, stream);
  }

  // .substrait.Rel right = 3;
  if (this->_internal_has_right()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::right(this),
        _Internal::right(this).GetCachedSize(), target, stream);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10;
  if (this->_internal_has_advanced_extension()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::advanced_extension(this),
        _Internal::advanced_extension(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.CrossRel)
  return target;
}

size_t CrossRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.CrossRel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.RelCommon common = 1;
  if (this->_internal_has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.common_);
  }

  // .substrait.Rel left = 2;
  if (this->_internal_has_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.left_);
  }

  // .substrait.Rel right = 3;
  if (this->_internal_has_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.right_);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10;
  if (this->_internal_has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.advanced_extension_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CrossRel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CrossRel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CrossRel::GetClassData() const { return &_class_data_; }


void CrossRel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CrossRel*>(&to_msg);
  auto& from = static_cast<const CrossRel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.CrossRel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_common()) {
    _this->_internal_mutable_common()->::substrait::RelCommon::MergeFrom(
        from._internal_common());
  }
  if (from._internal_has_left()) {
    _this->_internal_mutable_left()->::substrait::Rel::MergeFrom(
        from._internal_left());
  }
  if (from._internal_has_right()) {
    _this->_internal_mutable_right()->::substrait::Rel::MergeFrom(
        from._internal_right());
  }
  if (from._internal_has_advanced_extension()) {
    _this->_internal_mutable_advanced_extension()->::substrait::extensions::AdvancedExtension::MergeFrom(
        from._internal_advanced_extension());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CrossRel::CopyFrom(const CrossRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.CrossRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrossRel::IsInitialized() const {
  return true;
}

void CrossRel::InternalSwap(CrossRel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CrossRel, _impl_.advanced_extension_)
      + sizeof(CrossRel::_impl_.advanced_extension_)
      - PROTOBUF_FIELD_OFFSET(CrossRel, _impl_.common_)>(
          reinterpret_cast<char*>(&_impl_.common_),
          reinterpret_cast<char*>(&other->_impl_.common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CrossRel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[18]);
}

// ===================================================================

class FetchRel::_Internal {
 public:
  static const ::substrait::RelCommon& common(const FetchRel* msg);
  static const ::substrait::Rel& input(const FetchRel* msg);
  static const ::substrait::extensions::AdvancedExtension& advanced_extension(const FetchRel* msg);
};

const ::substrait::RelCommon&
FetchRel::_Internal::common(const FetchRel* msg) {
  return *msg->_impl_.common_;
}
const ::substrait::Rel&
FetchRel::_Internal::input(const FetchRel* msg) {
  return *msg->_impl_.input_;
}
const ::substrait::extensions::AdvancedExtension&
FetchRel::_Internal::advanced_extension(const FetchRel* msg) {
  return *msg->_impl_.advanced_extension_;
}
void FetchRel::clear_advanced_extension() {
  if (GetArenaForAllocation() == nullptr && _impl_.advanced_extension_ != nullptr) {
    delete _impl_.advanced_extension_;
  }
  _impl_.advanced_extension_ = nullptr;
}
FetchRel::FetchRel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.FetchRel)
}
FetchRel::FetchRel(const FetchRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FetchRel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.common_){nullptr}
    , decltype(_impl_.input_){nullptr}
    , decltype(_impl_.advanced_extension_){nullptr}
    , decltype(_impl_.offset_){}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    _this->_impl_.common_ = new ::substrait::RelCommon(*from._impl_.common_);
  }
  if (from._internal_has_input()) {
    _this->_impl_.input_ = new ::substrait::Rel(*from._impl_.input_);
  }
  if (from._internal_has_advanced_extension()) {
    _this->_impl_.advanced_extension_ = new ::substrait::extensions::AdvancedExtension(*from._impl_.advanced_extension_);
  }
  ::memcpy(&_impl_.offset_, &from._impl_.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:substrait.FetchRel)
}

inline void FetchRel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.common_){nullptr}
    , decltype(_impl_.input_){nullptr}
    , decltype(_impl_.advanced_extension_){nullptr}
    , decltype(_impl_.offset_){int64_t{0}}
    , decltype(_impl_.count_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FetchRel::~FetchRel() {
  // @@protoc_insertion_point(destructor:substrait.FetchRel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FetchRel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.common_;
  if (this != internal_default_instance()) delete _impl_.input_;
  if (this != internal_default_instance()) delete _impl_.advanced_extension_;
}

void FetchRel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FetchRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.FetchRel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.common_ != nullptr) {
    delete _impl_.common_;
  }
  _impl_.common_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.input_ != nullptr) {
    delete _impl_.input_;
  }
  _impl_.input_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.advanced_extension_ != nullptr) {
    delete _impl_.advanced_extension_;
  }
  _impl_.advanced_extension_ = nullptr;
  ::memset(&_impl_.offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.count_) -
      reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchRel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.RelCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Rel input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.extensions.AdvancedExtension advanced_extension = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FetchRel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.FetchRel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.RelCommon common = 1;
  if (this->_internal_has_common()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::common(this),
        _Internal::common(this).GetCachedSize(), target, stream);
  }

  // .substrait.Rel input = 2;
  if (this->_internal_has_input()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::input(this),
        _Internal::input(this).GetCachedSize(), target, stream);
  }

  // int64 offset = 3;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_offset(), target);
  }

  // int64 count = 4;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_count(), target);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10;
  if (this->_internal_has_advanced_extension()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::advanced_extension(this),
        _Internal::advanced_extension(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.FetchRel)
  return target;
}

size_t FetchRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.FetchRel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.RelCommon common = 1;
  if (this->_internal_has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.common_);
  }

  // .substrait.Rel input = 2;
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.input_);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10;
  if (this->_internal_has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.advanced_extension_);
  }

  // int64 offset = 3;
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_offset());
  }

  // int64 count = 4;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FetchRel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FetchRel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FetchRel::GetClassData() const { return &_class_data_; }


void FetchRel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FetchRel*>(&to_msg);
  auto& from = static_cast<const FetchRel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.FetchRel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_common()) {
    _this->_internal_mutable_common()->::substrait::RelCommon::MergeFrom(
        from._internal_common());
  }
  if (from._internal_has_input()) {
    _this->_internal_mutable_input()->::substrait::Rel::MergeFrom(
        from._internal_input());
  }
  if (from._internal_has_advanced_extension()) {
    _this->_internal_mutable_advanced_extension()->::substrait::extensions::AdvancedExtension::MergeFrom(
        from._internal_advanced_extension());
  }
  if (from._internal_offset() != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FetchRel::CopyFrom(const FetchRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.FetchRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchRel::IsInitialized() const {
  return true;
}

void FetchRel::InternalSwap(FetchRel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FetchRel, _impl_.count_)
      + sizeof(FetchRel::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(FetchRel, _impl_.common_)>(
          reinterpret_cast<char*>(&_impl_.common_),
          reinterpret_cast<char*>(&other->_impl_.common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchRel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[19]);
}

// ===================================================================

class AggregateRel_Grouping::_Internal {
 public:
};

AggregateRel_Grouping::AggregateRel_Grouping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.AggregateRel.Grouping)
}
AggregateRel_Grouping::AggregateRel_Grouping(const AggregateRel_Grouping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AggregateRel_Grouping* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.grouping_expressions_){from._impl_.grouping_expressions_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.AggregateRel.Grouping)
}

inline void AggregateRel_Grouping::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.grouping_expressions_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AggregateRel_Grouping::~AggregateRel_Grouping() {
  // @@protoc_insertion_point(destructor:substrait.AggregateRel.Grouping)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AggregateRel_Grouping::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.grouping_expressions_.~RepeatedPtrField();
}

void AggregateRel_Grouping::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AggregateRel_Grouping::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.AggregateRel.Grouping)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.grouping_expressions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AggregateRel_Grouping::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .substrait.Expression grouping_expressions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_grouping_expressions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AggregateRel_Grouping::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.AggregateRel.Grouping)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.Expression grouping_expressions = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_grouping_expressions_size()); i < n; i++) {
    const auto& repfield = this->_internal_grouping_expressions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.AggregateRel.Grouping)
  return target;
}

size_t AggregateRel_Grouping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.AggregateRel.Grouping)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.Expression grouping_expressions = 1;
  total_size += 1UL * this->_internal_grouping_expressions_size();
  for (const auto& msg : this->_impl_.grouping_expressions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AggregateRel_Grouping::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AggregateRel_Grouping::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AggregateRel_Grouping::GetClassData() const { return &_class_data_; }


void AggregateRel_Grouping::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AggregateRel_Grouping*>(&to_msg);
  auto& from = static_cast<const AggregateRel_Grouping&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.AggregateRel.Grouping)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.grouping_expressions_.MergeFrom(from._impl_.grouping_expressions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AggregateRel_Grouping::CopyFrom(const AggregateRel_Grouping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.AggregateRel.Grouping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregateRel_Grouping::IsInitialized() const {
  return true;
}

void AggregateRel_Grouping::InternalSwap(AggregateRel_Grouping* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.grouping_expressions_.InternalSwap(&other->_impl_.grouping_expressions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AggregateRel_Grouping::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[20]);
}

// ===================================================================

class AggregateRel_Measure::_Internal {
 public:
  static const ::substrait::AggregateFunction& measure(const AggregateRel_Measure* msg);
  static const ::substrait::Expression& filter(const AggregateRel_Measure* msg);
};

const ::substrait::AggregateFunction&
AggregateRel_Measure::_Internal::measure(const AggregateRel_Measure* msg) {
  return *msg->_impl_.measure_;
}
const ::substrait::Expression&
AggregateRel_Measure::_Internal::filter(const AggregateRel_Measure* msg) {
  return *msg->_impl_.filter_;
}
AggregateRel_Measure::AggregateRel_Measure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.AggregateRel.Measure)
}
AggregateRel_Measure::AggregateRel_Measure(const AggregateRel_Measure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AggregateRel_Measure* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.measure_){nullptr}
    , decltype(_impl_.filter_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_measure()) {
    _this->_impl_.measure_ = new ::substrait::AggregateFunction(*from._impl_.measure_);
  }
  if (from._internal_has_filter()) {
    _this->_impl_.filter_ = new ::substrait::Expression(*from._impl_.filter_);
  }
  // @@protoc_insertion_point(copy_constructor:substrait.AggregateRel.Measure)
}

inline void AggregateRel_Measure::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.measure_){nullptr}
    , decltype(_impl_.filter_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AggregateRel_Measure::~AggregateRel_Measure() {
  // @@protoc_insertion_point(destructor:substrait.AggregateRel.Measure)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AggregateRel_Measure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.measure_;
  if (this != internal_default_instance()) delete _impl_.filter_;
}

void AggregateRel_Measure::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AggregateRel_Measure::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.AggregateRel.Measure)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.measure_ != nullptr) {
    delete _impl_.measure_;
  }
  _impl_.measure_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.filter_ != nullptr) {
    delete _impl_.filter_;
  }
  _impl_.filter_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AggregateRel_Measure::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.AggregateFunction measure = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_measure(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression filter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AggregateRel_Measure::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.AggregateRel.Measure)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.AggregateFunction measure = 1;
  if (this->_internal_has_measure()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::measure(this),
        _Internal::measure(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression filter = 2;
  if (this->_internal_has_filter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::filter(this),
        _Internal::filter(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.AggregateRel.Measure)
  return target;
}

size_t AggregateRel_Measure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.AggregateRel.Measure)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.AggregateFunction measure = 1;
  if (this->_internal_has_measure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.measure_);
  }

  // .substrait.Expression filter = 2;
  if (this->_internal_has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.filter_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AggregateRel_Measure::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AggregateRel_Measure::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AggregateRel_Measure::GetClassData() const { return &_class_data_; }


void AggregateRel_Measure::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AggregateRel_Measure*>(&to_msg);
  auto& from = static_cast<const AggregateRel_Measure&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.AggregateRel.Measure)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_measure()) {
    _this->_internal_mutable_measure()->::substrait::AggregateFunction::MergeFrom(
        from._internal_measure());
  }
  if (from._internal_has_filter()) {
    _this->_internal_mutable_filter()->::substrait::Expression::MergeFrom(
        from._internal_filter());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AggregateRel_Measure::CopyFrom(const AggregateRel_Measure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.AggregateRel.Measure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregateRel_Measure::IsInitialized() const {
  return true;
}

void AggregateRel_Measure::InternalSwap(AggregateRel_Measure* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AggregateRel_Measure, _impl_.filter_)
      + sizeof(AggregateRel_Measure::_impl_.filter_)
      - PROTOBUF_FIELD_OFFSET(AggregateRel_Measure, _impl_.measure_)>(
          reinterpret_cast<char*>(&_impl_.measure_),
          reinterpret_cast<char*>(&other->_impl_.measure_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AggregateRel_Measure::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[21]);
}

// ===================================================================

class AggregateRel::_Internal {
 public:
  static const ::substrait::RelCommon& common(const AggregateRel* msg);
  static const ::substrait::Rel& input(const AggregateRel* msg);
  static const ::substrait::extensions::AdvancedExtension& advanced_extension(const AggregateRel* msg);
};

const ::substrait::RelCommon&
AggregateRel::_Internal::common(const AggregateRel* msg) {
  return *msg->_impl_.common_;
}
const ::substrait::Rel&
AggregateRel::_Internal::input(const AggregateRel* msg) {
  return *msg->_impl_.input_;
}
const ::substrait::extensions::AdvancedExtension&
AggregateRel::_Internal::advanced_extension(const AggregateRel* msg) {
  return *msg->_impl_.advanced_extension_;
}
void AggregateRel::clear_advanced_extension() {
  if (GetArenaForAllocation() == nullptr && _impl_.advanced_extension_ != nullptr) {
    delete _impl_.advanced_extension_;
  }
  _impl_.advanced_extension_ = nullptr;
}
AggregateRel::AggregateRel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.AggregateRel)
}
AggregateRel::AggregateRel(const AggregateRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AggregateRel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.groupings_){from._impl_.groupings_}
    , decltype(_impl_.measures_){from._impl_.measures_}
    , decltype(_impl_.common_){nullptr}
    , decltype(_impl_.input_){nullptr}
    , decltype(_impl_.advanced_extension_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    _this->_impl_.common_ = new ::substrait::RelCommon(*from._impl_.common_);
  }
  if (from._internal_has_input()) {
    _this->_impl_.input_ = new ::substrait::Rel(*from._impl_.input_);
  }
  if (from._internal_has_advanced_extension()) {
    _this->_impl_.advanced_extension_ = new ::substrait::extensions::AdvancedExtension(*from._impl_.advanced_extension_);
  }
  // @@protoc_insertion_point(copy_constructor:substrait.AggregateRel)
}

inline void AggregateRel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.groupings_){arena}
    , decltype(_impl_.measures_){arena}
    , decltype(_impl_.common_){nullptr}
    , decltype(_impl_.input_){nullptr}
    , decltype(_impl_.advanced_extension_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AggregateRel::~AggregateRel() {
  // @@protoc_insertion_point(destructor:substrait.AggregateRel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AggregateRel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.groupings_.~RepeatedPtrField();
  _impl_.measures_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.common_;
  if (this != internal_default_instance()) delete _impl_.input_;
  if (this != internal_default_instance()) delete _impl_.advanced_extension_;
}

void AggregateRel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AggregateRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.AggregateRel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.groupings_.Clear();
  _impl_.measures_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.common_ != nullptr) {
    delete _impl_.common_;
  }
  _impl_.common_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.input_ != nullptr) {
    delete _impl_.input_;
  }
  _impl_.input_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.advanced_extension_ != nullptr) {
    delete _impl_.advanced_extension_;
  }
  _impl_.advanced_extension_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AggregateRel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.RelCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Rel input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .substrait.AggregateRel.Grouping groupings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_groupings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .substrait.AggregateRel.Measure measures = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_measures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .substrait.extensions.AdvancedExtension advanced_extension = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AggregateRel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.AggregateRel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.RelCommon common = 1;
  if (this->_internal_has_common()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::common(this),
        _Internal::common(this).GetCachedSize(), target, stream);
  }

  // .substrait.Rel input = 2;
  if (this->_internal_has_input()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::input(this),
        _Internal::input(this).GetCachedSize(), target, stream);
  }

  // repeated .substrait.AggregateRel.Grouping groupings = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_groupings_size()); i < n; i++) {
    const auto& repfield = this->_internal_groupings(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .substrait.AggregateRel.Measure measures = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_measures_size()); i < n; i++) {
    const auto& repfield = this->_internal_measures(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10;
  if (this->_internal_has_advanced_extension()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::advanced_extension(this),
        _Internal::advanced_extension(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.AggregateRel)
  return target;
}

size_t AggregateRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.AggregateRel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.AggregateRel.Grouping groupings = 3;
  total_size += 1UL * this->_internal_groupings_size();
  for (const auto& msg : this->_impl_.groupings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .substrait.AggregateRel.Measure measures = 4;
  total_size += 1UL * this->_internal_measures_size();
  for (const auto& msg : this->_impl_.measures_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.RelCommon common = 1;
  if (this->_internal_has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.common_);
  }

  // .substrait.Rel input = 2;
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.input_);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10;
  if (this->_internal_has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.advanced_extension_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AggregateRel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AggregateRel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AggregateRel::GetClassData() const { return &_class_data_; }


void AggregateRel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AggregateRel*>(&to_msg);
  auto& from = static_cast<const AggregateRel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.AggregateRel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.groupings_.MergeFrom(from._impl_.groupings_);
  _this->_impl_.measures_.MergeFrom(from._impl_.measures_);
  if (from._internal_has_common()) {
    _this->_internal_mutable_common()->::substrait::RelCommon::MergeFrom(
        from._internal_common());
  }
  if (from._internal_has_input()) {
    _this->_internal_mutable_input()->::substrait::Rel::MergeFrom(
        from._internal_input());
  }
  if (from._internal_has_advanced_extension()) {
    _this->_internal_mutable_advanced_extension()->::substrait::extensions::AdvancedExtension::MergeFrom(
        from._internal_advanced_extension());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AggregateRel::CopyFrom(const AggregateRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.AggregateRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregateRel::IsInitialized() const {
  return true;
}

void AggregateRel::InternalSwap(AggregateRel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.groupings_.InternalSwap(&other->_impl_.groupings_);
  _impl_.measures_.InternalSwap(&other->_impl_.measures_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AggregateRel, _impl_.advanced_extension_)
      + sizeof(AggregateRel::_impl_.advanced_extension_)
      - PROTOBUF_FIELD_OFFSET(AggregateRel, _impl_.common_)>(
          reinterpret_cast<char*>(&_impl_.common_),
          reinterpret_cast<char*>(&other->_impl_.common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AggregateRel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[22]);
}

// ===================================================================

class SortRel::_Internal {
 public:
  static const ::substrait::RelCommon& common(const SortRel* msg);
  static const ::substrait::Rel& input(const SortRel* msg);
  static const ::substrait::extensions::AdvancedExtension& advanced_extension(const SortRel* msg);
};

const ::substrait::RelCommon&
SortRel::_Internal::common(const SortRel* msg) {
  return *msg->_impl_.common_;
}
const ::substrait::Rel&
SortRel::_Internal::input(const SortRel* msg) {
  return *msg->_impl_.input_;
}
const ::substrait::extensions::AdvancedExtension&
SortRel::_Internal::advanced_extension(const SortRel* msg) {
  return *msg->_impl_.advanced_extension_;
}
void SortRel::clear_advanced_extension() {
  if (GetArenaForAllocation() == nullptr && _impl_.advanced_extension_ != nullptr) {
    delete _impl_.advanced_extension_;
  }
  _impl_.advanced_extension_ = nullptr;
}
SortRel::SortRel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.SortRel)
}
SortRel::SortRel(const SortRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SortRel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sorts_){from._impl_.sorts_}
    , decltype(_impl_.common_){nullptr}
    , decltype(_impl_.input_){nullptr}
    , decltype(_impl_.advanced_extension_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    _this->_impl_.common_ = new ::substrait::RelCommon(*from._impl_.common_);
  }
  if (from._internal_has_input()) {
    _this->_impl_.input_ = new ::substrait::Rel(*from._impl_.input_);
  }
  if (from._internal_has_advanced_extension()) {
    _this->_impl_.advanced_extension_ = new ::substrait::extensions::AdvancedExtension(*from._impl_.advanced_extension_);
  }
  // @@protoc_insertion_point(copy_constructor:substrait.SortRel)
}

inline void SortRel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sorts_){arena}
    , decltype(_impl_.common_){nullptr}
    , decltype(_impl_.input_){nullptr}
    , decltype(_impl_.advanced_extension_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SortRel::~SortRel() {
  // @@protoc_insertion_point(destructor:substrait.SortRel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SortRel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sorts_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.common_;
  if (this != internal_default_instance()) delete _impl_.input_;
  if (this != internal_default_instance()) delete _impl_.advanced_extension_;
}

void SortRel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SortRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.SortRel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sorts_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.common_ != nullptr) {
    delete _impl_.common_;
  }
  _impl_.common_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.input_ != nullptr) {
    delete _impl_.input_;
  }
  _impl_.input_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.advanced_extension_ != nullptr) {
    delete _impl_.advanced_extension_;
  }
  _impl_.advanced_extension_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SortRel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.RelCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Rel input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .substrait.SortField sorts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sorts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .substrait.extensions.AdvancedExtension advanced_extension = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SortRel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.SortRel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.RelCommon common = 1;
  if (this->_internal_has_common()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::common(this),
        _Internal::common(this).GetCachedSize(), target, stream);
  }

  // .substrait.Rel input = 2;
  if (this->_internal_has_input()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::input(this),
        _Internal::input(this).GetCachedSize(), target, stream);
  }

  // repeated .substrait.SortField sorts = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sorts_size()); i < n; i++) {
    const auto& repfield = this->_internal_sorts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10;
  if (this->_internal_has_advanced_extension()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::advanced_extension(this),
        _Internal::advanced_extension(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.SortRel)
  return target;
}

size_t SortRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.SortRel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.SortField sorts = 3;
  total_size += 1UL * this->_internal_sorts_size();
  for (const auto& msg : this->_impl_.sorts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.RelCommon common = 1;
  if (this->_internal_has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.common_);
  }

  // .substrait.Rel input = 2;
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.input_);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10;
  if (this->_internal_has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.advanced_extension_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SortRel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SortRel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SortRel::GetClassData() const { return &_class_data_; }


void SortRel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SortRel*>(&to_msg);
  auto& from = static_cast<const SortRel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.SortRel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sorts_.MergeFrom(from._impl_.sorts_);
  if (from._internal_has_common()) {
    _this->_internal_mutable_common()->::substrait::RelCommon::MergeFrom(
        from._internal_common());
  }
  if (from._internal_has_input()) {
    _this->_internal_mutable_input()->::substrait::Rel::MergeFrom(
        from._internal_input());
  }
  if (from._internal_has_advanced_extension()) {
    _this->_internal_mutable_advanced_extension()->::substrait::extensions::AdvancedExtension::MergeFrom(
        from._internal_advanced_extension());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SortRel::CopyFrom(const SortRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.SortRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SortRel::IsInitialized() const {
  return true;
}

void SortRel::InternalSwap(SortRel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sorts_.InternalSwap(&other->_impl_.sorts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SortRel, _impl_.advanced_extension_)
      + sizeof(SortRel::_impl_.advanced_extension_)
      - PROTOBUF_FIELD_OFFSET(SortRel, _impl_.common_)>(
          reinterpret_cast<char*>(&_impl_.common_),
          reinterpret_cast<char*>(&other->_impl_.common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SortRel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[23]);
}

// ===================================================================

class FilterRel::_Internal {
 public:
  static const ::substrait::RelCommon& common(const FilterRel* msg);
  static const ::substrait::Rel& input(const FilterRel* msg);
  static const ::substrait::Expression& condition(const FilterRel* msg);
  static const ::substrait::extensions::AdvancedExtension& advanced_extension(const FilterRel* msg);
};

const ::substrait::RelCommon&
FilterRel::_Internal::common(const FilterRel* msg) {
  return *msg->_impl_.common_;
}
const ::substrait::Rel&
FilterRel::_Internal::input(const FilterRel* msg) {
  return *msg->_impl_.input_;
}
const ::substrait::Expression&
FilterRel::_Internal::condition(const FilterRel* msg) {
  return *msg->_impl_.condition_;
}
const ::substrait::extensions::AdvancedExtension&
FilterRel::_Internal::advanced_extension(const FilterRel* msg) {
  return *msg->_impl_.advanced_extension_;
}
void FilterRel::clear_advanced_extension() {
  if (GetArenaForAllocation() == nullptr && _impl_.advanced_extension_ != nullptr) {
    delete _impl_.advanced_extension_;
  }
  _impl_.advanced_extension_ = nullptr;
}
FilterRel::FilterRel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.FilterRel)
}
FilterRel::FilterRel(const FilterRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FilterRel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.common_){nullptr}
    , decltype(_impl_.input_){nullptr}
    , decltype(_impl_.condition_){nullptr}
    , decltype(_impl_.advanced_extension_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    _this->_impl_.common_ = new ::substrait::RelCommon(*from._impl_.common_);
  }
  if (from._internal_has_input()) {
    _this->_impl_.input_ = new ::substrait::Rel(*from._impl_.input_);
  }
  if (from._internal_has_condition()) {
    _this->_impl_.condition_ = new ::substrait::Expression(*from._impl_.condition_);
  }
  if (from._internal_has_advanced_extension()) {
    _this->_impl_.advanced_extension_ = new ::substrait::extensions::AdvancedExtension(*from._impl_.advanced_extension_);
  }
  // @@protoc_insertion_point(copy_constructor:substrait.FilterRel)
}

inline void FilterRel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.common_){nullptr}
    , decltype(_impl_.input_){nullptr}
    , decltype(_impl_.condition_){nullptr}
    , decltype(_impl_.advanced_extension_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FilterRel::~FilterRel() {
  // @@protoc_insertion_point(destructor:substrait.FilterRel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FilterRel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.common_;
  if (this != internal_default_instance()) delete _impl_.input_;
  if (this != internal_default_instance()) delete _impl_.condition_;
  if (this != internal_default_instance()) delete _impl_.advanced_extension_;
}

void FilterRel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FilterRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.FilterRel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.common_ != nullptr) {
    delete _impl_.common_;
  }
  _impl_.common_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.input_ != nullptr) {
    delete _impl_.input_;
  }
  _impl_.input_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.condition_ != nullptr) {
    delete _impl_.condition_;
  }
  _impl_.condition_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.advanced_extension_ != nullptr) {
    delete _impl_.advanced_extension_;
  }
  _impl_.advanced_extension_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FilterRel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.RelCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Rel input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression condition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_condition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.extensions.AdvancedExtension advanced_extension = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FilterRel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.FilterRel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.RelCommon common = 1;
  if (this->_internal_has_common()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::common(this),
        _Internal::common(this).GetCachedSize(), target, stream);
  }

  // .substrait.Rel input = 2;
  if (this->_internal_has_input()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::input(this),
        _Internal::input(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression condition = 3;
  if (this->_internal_has_condition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::condition(this),
        _Internal::condition(this).GetCachedSize(), target, stream);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10;
  if (this->_internal_has_advanced_extension()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::advanced_extension(this),
        _Internal::advanced_extension(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.FilterRel)
  return target;
}

size_t FilterRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.FilterRel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.RelCommon common = 1;
  if (this->_internal_has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.common_);
  }

  // .substrait.Rel input = 2;
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.input_);
  }

  // .substrait.Expression condition = 3;
  if (this->_internal_has_condition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.condition_);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10;
  if (this->_internal_has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.advanced_extension_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FilterRel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FilterRel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FilterRel::GetClassData() const { return &_class_data_; }


void FilterRel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FilterRel*>(&to_msg);
  auto& from = static_cast<const FilterRel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.FilterRel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_common()) {
    _this->_internal_mutable_common()->::substrait::RelCommon::MergeFrom(
        from._internal_common());
  }
  if (from._internal_has_input()) {
    _this->_internal_mutable_input()->::substrait::Rel::MergeFrom(
        from._internal_input());
  }
  if (from._internal_has_condition()) {
    _this->_internal_mutable_condition()->::substrait::Expression::MergeFrom(
        from._internal_condition());
  }
  if (from._internal_has_advanced_extension()) {
    _this->_internal_mutable_advanced_extension()->::substrait::extensions::AdvancedExtension::MergeFrom(
        from._internal_advanced_extension());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FilterRel::CopyFrom(const FilterRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.FilterRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterRel::IsInitialized() const {
  return true;
}

void FilterRel::InternalSwap(FilterRel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FilterRel, _impl_.advanced_extension_)
      + sizeof(FilterRel::_impl_.advanced_extension_)
      - PROTOBUF_FIELD_OFFSET(FilterRel, _impl_.common_)>(
          reinterpret_cast<char*>(&_impl_.common_),
          reinterpret_cast<char*>(&other->_impl_.common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FilterRel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[24]);
}

// ===================================================================

class SetRel::_Internal {
 public:
  static const ::substrait::RelCommon& common(const SetRel* msg);
  static const ::substrait::extensions::AdvancedExtension& advanced_extension(const SetRel* msg);
};

const ::substrait::RelCommon&
SetRel::_Internal::common(const SetRel* msg) {
  return *msg->_impl_.common_;
}
const ::substrait::extensions::AdvancedExtension&
SetRel::_Internal::advanced_extension(const SetRel* msg) {
  return *msg->_impl_.advanced_extension_;
}
void SetRel::clear_advanced_extension() {
  if (GetArenaForAllocation() == nullptr && _impl_.advanced_extension_ != nullptr) {
    delete _impl_.advanced_extension_;
  }
  _impl_.advanced_extension_ = nullptr;
}
SetRel::SetRel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.SetRel)
}
SetRel::SetRel(const SetRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetRel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.inputs_){from._impl_.inputs_}
    , decltype(_impl_.common_){nullptr}
    , decltype(_impl_.advanced_extension_){nullptr}
    , decltype(_impl_.op_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    _this->_impl_.common_ = new ::substrait::RelCommon(*from._impl_.common_);
  }
  if (from._internal_has_advanced_extension()) {
    _this->_impl_.advanced_extension_ = new ::substrait::extensions::AdvancedExtension(*from._impl_.advanced_extension_);
  }
  _this->_impl_.op_ = from._impl_.op_;
  // @@protoc_insertion_point(copy_constructor:substrait.SetRel)
}

inline void SetRel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.inputs_){arena}
    , decltype(_impl_.common_){nullptr}
    , decltype(_impl_.advanced_extension_){nullptr}
    , decltype(_impl_.op_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetRel::~SetRel() {
  // @@protoc_insertion_point(destructor:substrait.SetRel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetRel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.inputs_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.common_;
  if (this != internal_default_instance()) delete _impl_.advanced_extension_;
}

void SetRel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.SetRel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.inputs_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.common_ != nullptr) {
    delete _impl_.common_;
  }
  _impl_.common_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.advanced_extension_ != nullptr) {
    delete _impl_.advanced_extension_;
  }
  _impl_.advanced_extension_ = nullptr;
  _impl_.op_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.RelCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .substrait.Rel inputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .substrait.SetRel.SetOp op = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::substrait::SetRel_SetOp>(val));
        } else
          goto handle_unusual;
        continue;
      // .substrait.extensions.AdvancedExtension advanced_extension = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetRel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.SetRel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.RelCommon common = 1;
  if (this->_internal_has_common()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::common(this),
        _Internal::common(this).GetCachedSize(), target, stream);
  }

  // repeated .substrait.Rel inputs = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_inputs_size()); i < n; i++) {
    const auto& repfield = this->_internal_inputs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .substrait.SetRel.SetOp op = 3;
  if (this->_internal_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_op(), target);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10;
  if (this->_internal_has_advanced_extension()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::advanced_extension(this),
        _Internal::advanced_extension(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.SetRel)
  return target;
}

size_t SetRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.SetRel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.Rel inputs = 2;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->_impl_.inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.RelCommon common = 1;
  if (this->_internal_has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.common_);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10;
  if (this->_internal_has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.advanced_extension_);
  }

  // .substrait.SetRel.SetOp op = 3;
  if (this->_internal_op() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_op());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetRel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetRel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetRel::GetClassData() const { return &_class_data_; }


void SetRel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetRel*>(&to_msg);
  auto& from = static_cast<const SetRel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.SetRel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.inputs_.MergeFrom(from._impl_.inputs_);
  if (from._internal_has_common()) {
    _this->_internal_mutable_common()->::substrait::RelCommon::MergeFrom(
        from._internal_common());
  }
  if (from._internal_has_advanced_extension()) {
    _this->_internal_mutable_advanced_extension()->::substrait::extensions::AdvancedExtension::MergeFrom(
        from._internal_advanced_extension());
  }
  if (from._internal_op() != 0) {
    _this->_internal_set_op(from._internal_op());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetRel::CopyFrom(const SetRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.SetRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRel::IsInitialized() const {
  return true;
}

void SetRel::InternalSwap(SetRel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.inputs_.InternalSwap(&other->_impl_.inputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetRel, _impl_.op_)
      + sizeof(SetRel::_impl_.op_)
      - PROTOBUF_FIELD_OFFSET(SetRel, _impl_.common_)>(
          reinterpret_cast<char*>(&_impl_.common_),
          reinterpret_cast<char*>(&other->_impl_.common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[25]);
}

// ===================================================================

class ExtensionSingleRel::_Internal {
 public:
  static const ::substrait::RelCommon& common(const ExtensionSingleRel* msg);
  static const ::substrait::Rel& input(const ExtensionSingleRel* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Any& detail(const ExtensionSingleRel* msg);
};

const ::substrait::RelCommon&
ExtensionSingleRel::_Internal::common(const ExtensionSingleRel* msg) {
  return *msg->_impl_.common_;
}
const ::substrait::Rel&
ExtensionSingleRel::_Internal::input(const ExtensionSingleRel* msg) {
  return *msg->_impl_.input_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
ExtensionSingleRel::_Internal::detail(const ExtensionSingleRel* msg) {
  return *msg->_impl_.detail_;
}
void ExtensionSingleRel::clear_detail() {
  if (GetArenaForAllocation() == nullptr && _impl_.detail_ != nullptr) {
    delete _impl_.detail_;
  }
  _impl_.detail_ = nullptr;
}
ExtensionSingleRel::ExtensionSingleRel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.ExtensionSingleRel)
}
ExtensionSingleRel::ExtensionSingleRel(const ExtensionSingleRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExtensionSingleRel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.common_){nullptr}
    , decltype(_impl_.input_){nullptr}
    , decltype(_impl_.detail_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    _this->_impl_.common_ = new ::substrait::RelCommon(*from._impl_.common_);
  }
  if (from._internal_has_input()) {
    _this->_impl_.input_ = new ::substrait::Rel(*from._impl_.input_);
  }
  if (from._internal_has_detail()) {
    _this->_impl_.detail_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.detail_);
  }
  // @@protoc_insertion_point(copy_constructor:substrait.ExtensionSingleRel)
}

inline void ExtensionSingleRel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.common_){nullptr}
    , decltype(_impl_.input_){nullptr}
    , decltype(_impl_.detail_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ExtensionSingleRel::~ExtensionSingleRel() {
  // @@protoc_insertion_point(destructor:substrait.ExtensionSingleRel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExtensionSingleRel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.common_;
  if (this != internal_default_instance()) delete _impl_.input_;
  if (this != internal_default_instance()) delete _impl_.detail_;
}

void ExtensionSingleRel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExtensionSingleRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.ExtensionSingleRel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.common_ != nullptr) {
    delete _impl_.common_;
  }
  _impl_.common_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.input_ != nullptr) {
    delete _impl_.input_;
  }
  _impl_.input_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.detail_ != nullptr) {
    delete _impl_.detail_;
  }
  _impl_.detail_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExtensionSingleRel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.RelCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Rel input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any detail = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_detail(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtensionSingleRel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.ExtensionSingleRel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.RelCommon common = 1;
  if (this->_internal_has_common()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::common(this),
        _Internal::common(this).GetCachedSize(), target, stream);
  }

  // .substrait.Rel input = 2;
  if (this->_internal_has_input()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::input(this),
        _Internal::input(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Any detail = 3;
  if (this->_internal_has_detail()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::detail(this),
        _Internal::detail(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.ExtensionSingleRel)
  return target;
}

size_t ExtensionSingleRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.ExtensionSingleRel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.RelCommon common = 1;
  if (this->_internal_has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.common_);
  }

  // .substrait.Rel input = 2;
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.input_);
  }

  // .google.protobuf.Any detail = 3;
  if (this->_internal_has_detail()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.detail_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExtensionSingleRel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExtensionSingleRel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExtensionSingleRel::GetClassData() const { return &_class_data_; }


void ExtensionSingleRel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExtensionSingleRel*>(&to_msg);
  auto& from = static_cast<const ExtensionSingleRel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.ExtensionSingleRel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_common()) {
    _this->_internal_mutable_common()->::substrait::RelCommon::MergeFrom(
        from._internal_common());
  }
  if (from._internal_has_input()) {
    _this->_internal_mutable_input()->::substrait::Rel::MergeFrom(
        from._internal_input());
  }
  if (from._internal_has_detail()) {
    _this->_internal_mutable_detail()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_detail());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExtensionSingleRel::CopyFrom(const ExtensionSingleRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.ExtensionSingleRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionSingleRel::IsInitialized() const {
  return true;
}

void ExtensionSingleRel::InternalSwap(ExtensionSingleRel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExtensionSingleRel, _impl_.detail_)
      + sizeof(ExtensionSingleRel::_impl_.detail_)
      - PROTOBUF_FIELD_OFFSET(ExtensionSingleRel, _impl_.common_)>(
          reinterpret_cast<char*>(&_impl_.common_),
          reinterpret_cast<char*>(&other->_impl_.common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtensionSingleRel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[26]);
}

// ===================================================================

class ExtensionLeafRel::_Internal {
 public:
  static const ::substrait::RelCommon& common(const ExtensionLeafRel* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Any& detail(const ExtensionLeafRel* msg);
};

const ::substrait::RelCommon&
ExtensionLeafRel::_Internal::common(const ExtensionLeafRel* msg) {
  return *msg->_impl_.common_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
ExtensionLeafRel::_Internal::detail(const ExtensionLeafRel* msg) {
  return *msg->_impl_.detail_;
}
void ExtensionLeafRel::clear_detail() {
  if (GetArenaForAllocation() == nullptr && _impl_.detail_ != nullptr) {
    delete _impl_.detail_;
  }
  _impl_.detail_ = nullptr;
}
ExtensionLeafRel::ExtensionLeafRel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.ExtensionLeafRel)
}
ExtensionLeafRel::ExtensionLeafRel(const ExtensionLeafRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExtensionLeafRel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.common_){nullptr}
    , decltype(_impl_.detail_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    _this->_impl_.common_ = new ::substrait::RelCommon(*from._impl_.common_);
  }
  if (from._internal_has_detail()) {
    _this->_impl_.detail_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.detail_);
  }
  // @@protoc_insertion_point(copy_constructor:substrait.ExtensionLeafRel)
}

inline void ExtensionLeafRel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.common_){nullptr}
    , decltype(_impl_.detail_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ExtensionLeafRel::~ExtensionLeafRel() {
  // @@protoc_insertion_point(destructor:substrait.ExtensionLeafRel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExtensionLeafRel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.common_;
  if (this != internal_default_instance()) delete _impl_.detail_;
}

void ExtensionLeafRel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExtensionLeafRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.ExtensionLeafRel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.common_ != nullptr) {
    delete _impl_.common_;
  }
  _impl_.common_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.detail_ != nullptr) {
    delete _impl_.detail_;
  }
  _impl_.detail_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExtensionLeafRel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.RelCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any detail = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_detail(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtensionLeafRel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.ExtensionLeafRel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.RelCommon common = 1;
  if (this->_internal_has_common()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::common(this),
        _Internal::common(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Any detail = 2;
  if (this->_internal_has_detail()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::detail(this),
        _Internal::detail(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.ExtensionLeafRel)
  return target;
}

size_t ExtensionLeafRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.ExtensionLeafRel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.RelCommon common = 1;
  if (this->_internal_has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.common_);
  }

  // .google.protobuf.Any detail = 2;
  if (this->_internal_has_detail()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.detail_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExtensionLeafRel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExtensionLeafRel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExtensionLeafRel::GetClassData() const { return &_class_data_; }


void ExtensionLeafRel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExtensionLeafRel*>(&to_msg);
  auto& from = static_cast<const ExtensionLeafRel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.ExtensionLeafRel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_common()) {
    _this->_internal_mutable_common()->::substrait::RelCommon::MergeFrom(
        from._internal_common());
  }
  if (from._internal_has_detail()) {
    _this->_internal_mutable_detail()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_detail());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExtensionLeafRel::CopyFrom(const ExtensionLeafRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.ExtensionLeafRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionLeafRel::IsInitialized() const {
  return true;
}

void ExtensionLeafRel::InternalSwap(ExtensionLeafRel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExtensionLeafRel, _impl_.detail_)
      + sizeof(ExtensionLeafRel::_impl_.detail_)
      - PROTOBUF_FIELD_OFFSET(ExtensionLeafRel, _impl_.common_)>(
          reinterpret_cast<char*>(&_impl_.common_),
          reinterpret_cast<char*>(&other->_impl_.common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtensionLeafRel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[27]);
}

// ===================================================================

class ExtensionMultiRel::_Internal {
 public:
  static const ::substrait::RelCommon& common(const ExtensionMultiRel* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Any& detail(const ExtensionMultiRel* msg);
};

const ::substrait::RelCommon&
ExtensionMultiRel::_Internal::common(const ExtensionMultiRel* msg) {
  return *msg->_impl_.common_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
ExtensionMultiRel::_Internal::detail(const ExtensionMultiRel* msg) {
  return *msg->_impl_.detail_;
}
void ExtensionMultiRel::clear_detail() {
  if (GetArenaForAllocation() == nullptr && _impl_.detail_ != nullptr) {
    delete _impl_.detail_;
  }
  _impl_.detail_ = nullptr;
}
ExtensionMultiRel::ExtensionMultiRel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.ExtensionMultiRel)
}
ExtensionMultiRel::ExtensionMultiRel(const ExtensionMultiRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExtensionMultiRel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.inputs_){from._impl_.inputs_}
    , decltype(_impl_.common_){nullptr}
    , decltype(_impl_.detail_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    _this->_impl_.common_ = new ::substrait::RelCommon(*from._impl_.common_);
  }
  if (from._internal_has_detail()) {
    _this->_impl_.detail_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.detail_);
  }
  // @@protoc_insertion_point(copy_constructor:substrait.ExtensionMultiRel)
}

inline void ExtensionMultiRel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.inputs_){arena}
    , decltype(_impl_.common_){nullptr}
    , decltype(_impl_.detail_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ExtensionMultiRel::~ExtensionMultiRel() {
  // @@protoc_insertion_point(destructor:substrait.ExtensionMultiRel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExtensionMultiRel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.inputs_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.common_;
  if (this != internal_default_instance()) delete _impl_.detail_;
}

void ExtensionMultiRel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExtensionMultiRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.ExtensionMultiRel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.inputs_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.common_ != nullptr) {
    delete _impl_.common_;
  }
  _impl_.common_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.detail_ != nullptr) {
    delete _impl_.detail_;
  }
  _impl_.detail_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExtensionMultiRel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.RelCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .substrait.Rel inputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any detail = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_detail(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtensionMultiRel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.ExtensionMultiRel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.RelCommon common = 1;
  if (this->_internal_has_common()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::common(this),
        _Internal::common(this).GetCachedSize(), target, stream);
  }

  // repeated .substrait.Rel inputs = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_inputs_size()); i < n; i++) {
    const auto& repfield = this->_internal_inputs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.Any detail = 3;
  if (this->_internal_has_detail()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::detail(this),
        _Internal::detail(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.ExtensionMultiRel)
  return target;
}

size_t ExtensionMultiRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.ExtensionMultiRel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.Rel inputs = 2;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->_impl_.inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.RelCommon common = 1;
  if (this->_internal_has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.common_);
  }

  // .google.protobuf.Any detail = 3;
  if (this->_internal_has_detail()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.detail_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExtensionMultiRel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExtensionMultiRel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExtensionMultiRel::GetClassData() const { return &_class_data_; }


void ExtensionMultiRel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExtensionMultiRel*>(&to_msg);
  auto& from = static_cast<const ExtensionMultiRel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.ExtensionMultiRel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.inputs_.MergeFrom(from._impl_.inputs_);
  if (from._internal_has_common()) {
    _this->_internal_mutable_common()->::substrait::RelCommon::MergeFrom(
        from._internal_common());
  }
  if (from._internal_has_detail()) {
    _this->_internal_mutable_detail()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_detail());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExtensionMultiRel::CopyFrom(const ExtensionMultiRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.ExtensionMultiRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionMultiRel::IsInitialized() const {
  return true;
}

void ExtensionMultiRel::InternalSwap(ExtensionMultiRel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.inputs_.InternalSwap(&other->_impl_.inputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExtensionMultiRel, _impl_.detail_)
      + sizeof(ExtensionMultiRel::_impl_.detail_)
      - PROTOBUF_FIELD_OFFSET(ExtensionMultiRel, _impl_.common_)>(
          reinterpret_cast<char*>(&_impl_.common_),
          reinterpret_cast<char*>(&other->_impl_.common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtensionMultiRel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[28]);
}

// ===================================================================

class ExchangeRel_ScatterFields::_Internal {
 public:
};

ExchangeRel_ScatterFields::ExchangeRel_ScatterFields(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.ExchangeRel.ScatterFields)
}
ExchangeRel_ScatterFields::ExchangeRel_ScatterFields(const ExchangeRel_ScatterFields& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExchangeRel_ScatterFields* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_){from._impl_.fields_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.ExchangeRel.ScatterFields)
}

inline void ExchangeRel_ScatterFields::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ExchangeRel_ScatterFields::~ExchangeRel_ScatterFields() {
  // @@protoc_insertion_point(destructor:substrait.ExchangeRel.ScatterFields)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExchangeRel_ScatterFields::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fields_.~RepeatedPtrField();
}

void ExchangeRel_ScatterFields::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExchangeRel_ScatterFields::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.ExchangeRel.ScatterFields)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fields_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExchangeRel_ScatterFields::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .substrait.Expression.FieldReference fields = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExchangeRel_ScatterFields::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.ExchangeRel.ScatterFields)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.Expression.FieldReference fields = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fields_size()); i < n; i++) {
    const auto& repfield = this->_internal_fields(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.ExchangeRel.ScatterFields)
  return target;
}

size_t ExchangeRel_ScatterFields::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.ExchangeRel.ScatterFields)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.Expression.FieldReference fields = 1;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->_impl_.fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExchangeRel_ScatterFields::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExchangeRel_ScatterFields::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExchangeRel_ScatterFields::GetClassData() const { return &_class_data_; }


void ExchangeRel_ScatterFields::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExchangeRel_ScatterFields*>(&to_msg);
  auto& from = static_cast<const ExchangeRel_ScatterFields&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.ExchangeRel.ScatterFields)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.fields_.MergeFrom(from._impl_.fields_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExchangeRel_ScatterFields::CopyFrom(const ExchangeRel_ScatterFields& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.ExchangeRel.ScatterFields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeRel_ScatterFields::IsInitialized() const {
  return true;
}

void ExchangeRel_ScatterFields::InternalSwap(ExchangeRel_ScatterFields* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.fields_.InternalSwap(&other->_impl_.fields_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExchangeRel_ScatterFields::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[29]);
}

// ===================================================================

class ExchangeRel_SingleBucketExpression::_Internal {
 public:
  static const ::substrait::Expression& expression(const ExchangeRel_SingleBucketExpression* msg);
};

const ::substrait::Expression&
ExchangeRel_SingleBucketExpression::_Internal::expression(const ExchangeRel_SingleBucketExpression* msg) {
  return *msg->_impl_.expression_;
}
ExchangeRel_SingleBucketExpression::ExchangeRel_SingleBucketExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.ExchangeRel.SingleBucketExpression)
}
ExchangeRel_SingleBucketExpression::ExchangeRel_SingleBucketExpression(const ExchangeRel_SingleBucketExpression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExchangeRel_SingleBucketExpression* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.expression_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_expression()) {
    _this->_impl_.expression_ = new ::substrait::Expression(*from._impl_.expression_);
  }
  // @@protoc_insertion_point(copy_constructor:substrait.ExchangeRel.SingleBucketExpression)
}

inline void ExchangeRel_SingleBucketExpression::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.expression_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ExchangeRel_SingleBucketExpression::~ExchangeRel_SingleBucketExpression() {
  // @@protoc_insertion_point(destructor:substrait.ExchangeRel.SingleBucketExpression)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExchangeRel_SingleBucketExpression::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.expression_;
}

void ExchangeRel_SingleBucketExpression::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExchangeRel_SingleBucketExpression::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.ExchangeRel.SingleBucketExpression)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.expression_ != nullptr) {
    delete _impl_.expression_;
  }
  _impl_.expression_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExchangeRel_SingleBucketExpression::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.Expression expression = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_expression(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExchangeRel_SingleBucketExpression::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.ExchangeRel.SingleBucketExpression)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.Expression expression = 1;
  if (this->_internal_has_expression()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::expression(this),
        _Internal::expression(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.ExchangeRel.SingleBucketExpression)
  return target;
}

size_t ExchangeRel_SingleBucketExpression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.ExchangeRel.SingleBucketExpression)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.Expression expression = 1;
  if (this->_internal_has_expression()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expression_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExchangeRel_SingleBucketExpression::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExchangeRel_SingleBucketExpression::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExchangeRel_SingleBucketExpression::GetClassData() const { return &_class_data_; }


void ExchangeRel_SingleBucketExpression::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExchangeRel_SingleBucketExpression*>(&to_msg);
  auto& from = static_cast<const ExchangeRel_SingleBucketExpression&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.ExchangeRel.SingleBucketExpression)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_expression()) {
    _this->_internal_mutable_expression()->::substrait::Expression::MergeFrom(
        from._internal_expression());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExchangeRel_SingleBucketExpression::CopyFrom(const ExchangeRel_SingleBucketExpression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.ExchangeRel.SingleBucketExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeRel_SingleBucketExpression::IsInitialized() const {
  return true;
}

void ExchangeRel_SingleBucketExpression::InternalSwap(ExchangeRel_SingleBucketExpression* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.expression_, other->_impl_.expression_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExchangeRel_SingleBucketExpression::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[30]);
}

// ===================================================================

class ExchangeRel_MultiBucketExpression::_Internal {
 public:
  static const ::substrait::Expression& expression(const ExchangeRel_MultiBucketExpression* msg);
};

const ::substrait::Expression&
ExchangeRel_MultiBucketExpression::_Internal::expression(const ExchangeRel_MultiBucketExpression* msg) {
  return *msg->_impl_.expression_;
}
ExchangeRel_MultiBucketExpression::ExchangeRel_MultiBucketExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.ExchangeRel.MultiBucketExpression)
}
ExchangeRel_MultiBucketExpression::ExchangeRel_MultiBucketExpression(const ExchangeRel_MultiBucketExpression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExchangeRel_MultiBucketExpression* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.expression_){nullptr}
    , decltype(_impl_.constrained_to_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_expression()) {
    _this->_impl_.expression_ = new ::substrait::Expression(*from._impl_.expression_);
  }
  _this->_impl_.constrained_to_count_ = from._impl_.constrained_to_count_;
  // @@protoc_insertion_point(copy_constructor:substrait.ExchangeRel.MultiBucketExpression)
}

inline void ExchangeRel_MultiBucketExpression::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.expression_){nullptr}
    , decltype(_impl_.constrained_to_count_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ExchangeRel_MultiBucketExpression::~ExchangeRel_MultiBucketExpression() {
  // @@protoc_insertion_point(destructor:substrait.ExchangeRel.MultiBucketExpression)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExchangeRel_MultiBucketExpression::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.expression_;
}

void ExchangeRel_MultiBucketExpression::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExchangeRel_MultiBucketExpression::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.ExchangeRel.MultiBucketExpression)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.expression_ != nullptr) {
    delete _impl_.expression_;
  }
  _impl_.expression_ = nullptr;
  _impl_.constrained_to_count_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExchangeRel_MultiBucketExpression::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.Expression expression = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_expression(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool constrained_to_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.constrained_to_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExchangeRel_MultiBucketExpression::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.ExchangeRel.MultiBucketExpression)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.Expression expression = 1;
  if (this->_internal_has_expression()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::expression(this),
        _Internal::expression(this).GetCachedSize(), target, stream);
  }

  // bool constrained_to_count = 2;
  if (this->_internal_constrained_to_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_constrained_to_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.ExchangeRel.MultiBucketExpression)
  return target;
}

size_t ExchangeRel_MultiBucketExpression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.ExchangeRel.MultiBucketExpression)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.Expression expression = 1;
  if (this->_internal_has_expression()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expression_);
  }

  // bool constrained_to_count = 2;
  if (this->_internal_constrained_to_count() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExchangeRel_MultiBucketExpression::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExchangeRel_MultiBucketExpression::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExchangeRel_MultiBucketExpression::GetClassData() const { return &_class_data_; }


void ExchangeRel_MultiBucketExpression::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExchangeRel_MultiBucketExpression*>(&to_msg);
  auto& from = static_cast<const ExchangeRel_MultiBucketExpression&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.ExchangeRel.MultiBucketExpression)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_expression()) {
    _this->_internal_mutable_expression()->::substrait::Expression::MergeFrom(
        from._internal_expression());
  }
  if (from._internal_constrained_to_count() != 0) {
    _this->_internal_set_constrained_to_count(from._internal_constrained_to_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExchangeRel_MultiBucketExpression::CopyFrom(const ExchangeRel_MultiBucketExpression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.ExchangeRel.MultiBucketExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeRel_MultiBucketExpression::IsInitialized() const {
  return true;
}

void ExchangeRel_MultiBucketExpression::InternalSwap(ExchangeRel_MultiBucketExpression* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExchangeRel_MultiBucketExpression, _impl_.constrained_to_count_)
      + sizeof(ExchangeRel_MultiBucketExpression::_impl_.constrained_to_count_)
      - PROTOBUF_FIELD_OFFSET(ExchangeRel_MultiBucketExpression, _impl_.expression_)>(
          reinterpret_cast<char*>(&_impl_.expression_),
          reinterpret_cast<char*>(&other->_impl_.expression_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExchangeRel_MultiBucketExpression::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[31]);
}

// ===================================================================

class ExchangeRel_Broadcast::_Internal {
 public:
};

ExchangeRel_Broadcast::ExchangeRel_Broadcast(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:substrait.ExchangeRel.Broadcast)
}
ExchangeRel_Broadcast::ExchangeRel_Broadcast(const ExchangeRel_Broadcast& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ExchangeRel_Broadcast* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.ExchangeRel.Broadcast)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExchangeRel_Broadcast::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExchangeRel_Broadcast::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ExchangeRel_Broadcast::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[32]);
}

// ===================================================================

class ExchangeRel_RoundRobin::_Internal {
 public:
};

ExchangeRel_RoundRobin::ExchangeRel_RoundRobin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.ExchangeRel.RoundRobin)
}
ExchangeRel_RoundRobin::ExchangeRel_RoundRobin(const ExchangeRel_RoundRobin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExchangeRel_RoundRobin* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.exact_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.exact_ = from._impl_.exact_;
  // @@protoc_insertion_point(copy_constructor:substrait.ExchangeRel.RoundRobin)
}

inline void ExchangeRel_RoundRobin::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.exact_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ExchangeRel_RoundRobin::~ExchangeRel_RoundRobin() {
  // @@protoc_insertion_point(destructor:substrait.ExchangeRel.RoundRobin)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExchangeRel_RoundRobin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ExchangeRel_RoundRobin::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExchangeRel_RoundRobin::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.ExchangeRel.RoundRobin)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.exact_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExchangeRel_RoundRobin::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool exact = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.exact_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExchangeRel_RoundRobin::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.ExchangeRel.RoundRobin)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool exact = 1;
  if (this->_internal_exact() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_exact(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.ExchangeRel.RoundRobin)
  return target;
}

size_t ExchangeRel_RoundRobin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.ExchangeRel.RoundRobin)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool exact = 1;
  if (this->_internal_exact() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExchangeRel_RoundRobin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExchangeRel_RoundRobin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExchangeRel_RoundRobin::GetClassData() const { return &_class_data_; }


void ExchangeRel_RoundRobin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExchangeRel_RoundRobin*>(&to_msg);
  auto& from = static_cast<const ExchangeRel_RoundRobin&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.ExchangeRel.RoundRobin)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_exact() != 0) {
    _this->_internal_set_exact(from._internal_exact());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExchangeRel_RoundRobin::CopyFrom(const ExchangeRel_RoundRobin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.ExchangeRel.RoundRobin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeRel_RoundRobin::IsInitialized() const {
  return true;
}

void ExchangeRel_RoundRobin::InternalSwap(ExchangeRel_RoundRobin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.exact_, other->_impl_.exact_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExchangeRel_RoundRobin::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[33]);
}

// ===================================================================

class ExchangeRel_ExchangeTarget::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& extended(const ExchangeRel_ExchangeTarget* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
ExchangeRel_ExchangeTarget::_Internal::extended(const ExchangeRel_ExchangeTarget* msg) {
  return *msg->_impl_.target_type_.extended_;
}
void ExchangeRel_ExchangeTarget::set_allocated_extended(::PROTOBUF_NAMESPACE_ID::Any* extended) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_target_type();
  if (extended) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extended));
    if (message_arena != submessage_arena) {
      extended = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extended, submessage_arena);
    }
    set_has_extended();
    _impl_.target_type_.extended_ = extended;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.ExchangeRel.ExchangeTarget.extended)
}
void ExchangeRel_ExchangeTarget::clear_extended() {
  if (_internal_has_extended()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.target_type_.extended_;
    }
    clear_has_target_type();
  }
}
ExchangeRel_ExchangeTarget::ExchangeRel_ExchangeTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.ExchangeRel.ExchangeTarget)
}
ExchangeRel_ExchangeTarget::ExchangeRel_ExchangeTarget(const ExchangeRel_ExchangeTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExchangeRel_ExchangeTarget* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.partition_id_){from._impl_.partition_id_}
    , /*decltype(_impl_._partition_id_cached_byte_size_)*/{0}
    , decltype(_impl_.target_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_target_type();
  switch (from.target_type_case()) {
    case kUri: {
      _this->_internal_set_uri(from._internal_uri());
      break;
    }
    case kExtended: {
      _this->_internal_mutable_extended()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
          from._internal_extended());
      break;
    }
    case TARGET_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.ExchangeRel.ExchangeTarget)
}

inline void ExchangeRel_ExchangeTarget::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.partition_id_){arena}
    , /*decltype(_impl_._partition_id_cached_byte_size_)*/{0}
    , decltype(_impl_.target_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_target_type();
}

ExchangeRel_ExchangeTarget::~ExchangeRel_ExchangeTarget() {
  // @@protoc_insertion_point(destructor:substrait.ExchangeRel.ExchangeTarget)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExchangeRel_ExchangeTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.partition_id_.~RepeatedField();
  if (has_target_type()) {
    clear_target_type();
  }
}

void ExchangeRel_ExchangeTarget::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExchangeRel_ExchangeTarget::clear_target_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.ExchangeRel.ExchangeTarget)
  switch (target_type_case()) {
    case kUri: {
      _impl_.target_type_.uri_.Destroy();
      break;
    }
    case kExtended: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.target_type_.extended_;
      }
      break;
    }
    case TARGET_TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TARGET_TYPE_NOT_SET;
}


void ExchangeRel_ExchangeTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.ExchangeRel.ExchangeTarget)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.partition_id_.Clear();
  clear_target_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExchangeRel_ExchangeTarget::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 partition_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_partition_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_partition_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string uri = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "substrait.ExchangeRel.ExchangeTarget.uri"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any extended = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extended(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExchangeRel_ExchangeTarget::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.ExchangeRel.ExchangeTarget)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 partition_id = 1;
  {
    int byte_size = _impl_._partition_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_partition_id(), byte_size, target);
    }
  }

  // string uri = 2;
  if (_internal_has_uri()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.ExchangeRel.ExchangeTarget.uri");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uri(), target);
  }

  // .google.protobuf.Any extended = 3;
  if (_internal_has_extended()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::extended(this),
        _Internal::extended(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.ExchangeRel.ExchangeTarget)
  return target;
}

size_t ExchangeRel_ExchangeTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.ExchangeRel.ExchangeTarget)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 partition_id = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.partition_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._partition_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  switch (target_type_case()) {
    // string uri = 2;
    case kUri: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uri());
      break;
    }
    // .google.protobuf.Any extended = 3;
    case kExtended: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.target_type_.extended_);
      break;
    }
    case TARGET_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExchangeRel_ExchangeTarget::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExchangeRel_ExchangeTarget::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExchangeRel_ExchangeTarget::GetClassData() const { return &_class_data_; }


void ExchangeRel_ExchangeTarget::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExchangeRel_ExchangeTarget*>(&to_msg);
  auto& from = static_cast<const ExchangeRel_ExchangeTarget&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.ExchangeRel.ExchangeTarget)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.partition_id_.MergeFrom(from._impl_.partition_id_);
  switch (from.target_type_case()) {
    case kUri: {
      _this->_internal_set_uri(from._internal_uri());
      break;
    }
    case kExtended: {
      _this->_internal_mutable_extended()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
          from._internal_extended());
      break;
    }
    case TARGET_TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExchangeRel_ExchangeTarget::CopyFrom(const ExchangeRel_ExchangeTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.ExchangeRel.ExchangeTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeRel_ExchangeTarget::IsInitialized() const {
  return true;
}

void ExchangeRel_ExchangeTarget::InternalSwap(ExchangeRel_ExchangeTarget* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.partition_id_.InternalSwap(&other->_impl_.partition_id_);
  swap(_impl_.target_type_, other->_impl_.target_type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExchangeRel_ExchangeTarget::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[34]);
}

// ===================================================================

class ExchangeRel::_Internal {
 public:
  static const ::substrait::RelCommon& common(const ExchangeRel* msg);
  static const ::substrait::Rel& input(const ExchangeRel* msg);
  static const ::substrait::ExchangeRel_ScatterFields& scatter_by_fields(const ExchangeRel* msg);
  static const ::substrait::ExchangeRel_SingleBucketExpression& single_target(const ExchangeRel* msg);
  static const ::substrait::ExchangeRel_MultiBucketExpression& multi_target(const ExchangeRel* msg);
  static const ::substrait::ExchangeRel_RoundRobin& round_robin(const ExchangeRel* msg);
  static const ::substrait::ExchangeRel_Broadcast& broadcast(const ExchangeRel* msg);
  static const ::substrait::extensions::AdvancedExtension& advanced_extension(const ExchangeRel* msg);
};

const ::substrait::RelCommon&
ExchangeRel::_Internal::common(const ExchangeRel* msg) {
  return *msg->_impl_.common_;
}
const ::substrait::Rel&
ExchangeRel::_Internal::input(const ExchangeRel* msg) {
  return *msg->_impl_.input_;
}
const ::substrait::ExchangeRel_ScatterFields&
ExchangeRel::_Internal::scatter_by_fields(const ExchangeRel* msg) {
  return *msg->_impl_.exchange_kind_.scatter_by_fields_;
}
const ::substrait::ExchangeRel_SingleBucketExpression&
ExchangeRel::_Internal::single_target(const ExchangeRel* msg) {
  return *msg->_impl_.exchange_kind_.single_target_;
}
const ::substrait::ExchangeRel_MultiBucketExpression&
ExchangeRel::_Internal::multi_target(const ExchangeRel* msg) {
  return *msg->_impl_.exchange_kind_.multi_target_;
}
const ::substrait::ExchangeRel_RoundRobin&
ExchangeRel::_Internal::round_robin(const ExchangeRel* msg) {
  return *msg->_impl_.exchange_kind_.round_robin_;
}
const ::substrait::ExchangeRel_Broadcast&
ExchangeRel::_Internal::broadcast(const ExchangeRel* msg) {
  return *msg->_impl_.exchange_kind_.broadcast_;
}
const ::substrait::extensions::AdvancedExtension&
ExchangeRel::_Internal::advanced_extension(const ExchangeRel* msg) {
  return *msg->_impl_.advanced_extension_;
}
void ExchangeRel::set_allocated_scatter_by_fields(::substrait::ExchangeRel_ScatterFields* scatter_by_fields) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_exchange_kind();
  if (scatter_by_fields) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(scatter_by_fields);
    if (message_arena != submessage_arena) {
      scatter_by_fields = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scatter_by_fields, submessage_arena);
    }
    set_has_scatter_by_fields();
    _impl_.exchange_kind_.scatter_by_fields_ = scatter_by_fields;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.ExchangeRel.scatter_by_fields)
}
void ExchangeRel::set_allocated_single_target(::substrait::ExchangeRel_SingleBucketExpression* single_target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_exchange_kind();
  if (single_target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(single_target);
    if (message_arena != submessage_arena) {
      single_target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, single_target, submessage_arena);
    }
    set_has_single_target();
    _impl_.exchange_kind_.single_target_ = single_target;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.ExchangeRel.single_target)
}
void ExchangeRel::set_allocated_multi_target(::substrait::ExchangeRel_MultiBucketExpression* multi_target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_exchange_kind();
  if (multi_target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(multi_target);
    if (message_arena != submessage_arena) {
      multi_target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multi_target, submessage_arena);
    }
    set_has_multi_target();
    _impl_.exchange_kind_.multi_target_ = multi_target;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.ExchangeRel.multi_target)
}
void ExchangeRel::set_allocated_round_robin(::substrait::ExchangeRel_RoundRobin* round_robin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_exchange_kind();
  if (round_robin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(round_robin);
    if (message_arena != submessage_arena) {
      round_robin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, round_robin, submessage_arena);
    }
    set_has_round_robin();
    _impl_.exchange_kind_.round_robin_ = round_robin;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.ExchangeRel.round_robin)
}
void ExchangeRel::set_allocated_broadcast(::substrait::ExchangeRel_Broadcast* broadcast) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_exchange_kind();
  if (broadcast) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(broadcast);
    if (message_arena != submessage_arena) {
      broadcast = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, broadcast, submessage_arena);
    }
    set_has_broadcast();
    _impl_.exchange_kind_.broadcast_ = broadcast;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.ExchangeRel.broadcast)
}
void ExchangeRel::clear_advanced_extension() {
  if (GetArenaForAllocation() == nullptr && _impl_.advanced_extension_ != nullptr) {
    delete _impl_.advanced_extension_;
  }
  _impl_.advanced_extension_ = nullptr;
}
ExchangeRel::ExchangeRel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.ExchangeRel)
}
ExchangeRel::ExchangeRel(const ExchangeRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExchangeRel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.targets_){from._impl_.targets_}
    , decltype(_impl_.common_){nullptr}
    , decltype(_impl_.input_){nullptr}
    , decltype(_impl_.advanced_extension_){nullptr}
    , decltype(_impl_.partition_count_){}
    , decltype(_impl_.exchange_kind_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    _this->_impl_.common_ = new ::substrait::RelCommon(*from._impl_.common_);
  }
  if (from._internal_has_input()) {
    _this->_impl_.input_ = new ::substrait::Rel(*from._impl_.input_);
  }
  if (from._internal_has_advanced_extension()) {
    _this->_impl_.advanced_extension_ = new ::substrait::extensions::AdvancedExtension(*from._impl_.advanced_extension_);
  }
  _this->_impl_.partition_count_ = from._impl_.partition_count_;
  clear_has_exchange_kind();
  switch (from.exchange_kind_case()) {
    case kScatterByFields: {
      _this->_internal_mutable_scatter_by_fields()->::substrait::ExchangeRel_ScatterFields::MergeFrom(
          from._internal_scatter_by_fields());
      break;
    }
    case kSingleTarget: {
      _this->_internal_mutable_single_target()->::substrait::ExchangeRel_SingleBucketExpression::MergeFrom(
          from._internal_single_target());
      break;
    }
    case kMultiTarget: {
      _this->_internal_mutable_multi_target()->::substrait::ExchangeRel_MultiBucketExpression::MergeFrom(
          from._internal_multi_target());
      break;
    }
    case kRoundRobin: {
      _this->_internal_mutable_round_robin()->::substrait::ExchangeRel_RoundRobin::MergeFrom(
          from._internal_round_robin());
      break;
    }
    case kBroadcast: {
      _this->_internal_mutable_broadcast()->::substrait::ExchangeRel_Broadcast::MergeFrom(
          from._internal_broadcast());
      break;
    }
    case EXCHANGE_KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.ExchangeRel)
}

inline void ExchangeRel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.targets_){arena}
    , decltype(_impl_.common_){nullptr}
    , decltype(_impl_.input_){nullptr}
    , decltype(_impl_.advanced_extension_){nullptr}
    , decltype(_impl_.partition_count_){0}
    , decltype(_impl_.exchange_kind_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_exchange_kind();
}

ExchangeRel::~ExchangeRel() {
  // @@protoc_insertion_point(destructor:substrait.ExchangeRel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExchangeRel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.targets_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.common_;
  if (this != internal_default_instance()) delete _impl_.input_;
  if (this != internal_default_instance()) delete _impl_.advanced_extension_;
  if (has_exchange_kind()) {
    clear_exchange_kind();
  }
}

void ExchangeRel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExchangeRel::clear_exchange_kind() {
// @@protoc_insertion_point(one_of_clear_start:substrait.ExchangeRel)
  switch (exchange_kind_case()) {
    case kScatterByFields: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.exchange_kind_.scatter_by_fields_;
      }
      break;
    }
    case kSingleTarget: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.exchange_kind_.single_target_;
      }
      break;
    }
    case kMultiTarget: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.exchange_kind_.multi_target_;
      }
      break;
    }
    case kRoundRobin: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.exchange_kind_.round_robin_;
      }
      break;
    }
    case kBroadcast: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.exchange_kind_.broadcast_;
      }
      break;
    }
    case EXCHANGE_KIND_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = EXCHANGE_KIND_NOT_SET;
}


void ExchangeRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.ExchangeRel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.targets_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.common_ != nullptr) {
    delete _impl_.common_;
  }
  _impl_.common_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.input_ != nullptr) {
    delete _impl_.input_;
  }
  _impl_.input_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.advanced_extension_ != nullptr) {
    delete _impl_.advanced_extension_;
  }
  _impl_.advanced_extension_ = nullptr;
  _impl_.partition_count_ = 0;
  clear_exchange_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExchangeRel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.RelCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Rel input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 partition_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.partition_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .substrait.ExchangeRel.ExchangeTarget targets = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_targets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .substrait.ExchangeRel.ScatterFields scatter_by_fields = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_scatter_by_fields(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.ExchangeRel.SingleBucketExpression single_target = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_single_target(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.ExchangeRel.MultiBucketExpression multi_target = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_multi_target(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.ExchangeRel.RoundRobin round_robin = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_round_robin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.ExchangeRel.Broadcast broadcast = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_broadcast(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.extensions.AdvancedExtension advanced_extension = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExchangeRel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.ExchangeRel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.RelCommon common = 1;
  if (this->_internal_has_common()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::common(this),
        _Internal::common(this).GetCachedSize(), target, stream);
  }

  // .substrait.Rel input = 2;
  if (this->_internal_has_input()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::input(this),
        _Internal::input(this).GetCachedSize(), target, stream);
  }

  // int32 partition_count = 3;
  if (this->_internal_partition_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_partition_count(), target);
  }

  // repeated .substrait.ExchangeRel.ExchangeTarget targets = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_targets_size()); i < n; i++) {
    const auto& repfield = this->_internal_targets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .substrait.ExchangeRel.ScatterFields scatter_by_fields = 5;
  if (_internal_has_scatter_by_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::scatter_by_fields(this),
        _Internal::scatter_by_fields(this).GetCachedSize(), target, stream);
  }

  // .substrait.ExchangeRel.SingleBucketExpression single_target = 6;
  if (_internal_has_single_target()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::single_target(this),
        _Internal::single_target(this).GetCachedSize(), target, stream);
  }

  // .substrait.ExchangeRel.MultiBucketExpression multi_target = 7;
  if (_internal_has_multi_target()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::multi_target(this),
        _Internal::multi_target(this).GetCachedSize(), target, stream);
  }

  // .substrait.ExchangeRel.RoundRobin round_robin = 8;
  if (_internal_has_round_robin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::round_robin(this),
        _Internal::round_robin(this).GetCachedSize(), target, stream);
  }

  // .substrait.ExchangeRel.Broadcast broadcast = 9;
  if (_internal_has_broadcast()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::broadcast(this),
        _Internal::broadcast(this).GetCachedSize(), target, stream);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10;
  if (this->_internal_has_advanced_extension()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::advanced_extension(this),
        _Internal::advanced_extension(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.ExchangeRel)
  return target;
}

size_t ExchangeRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.ExchangeRel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.ExchangeRel.ExchangeTarget targets = 4;
  total_size += 1UL * this->_internal_targets_size();
  for (const auto& msg : this->_impl_.targets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.RelCommon common = 1;
  if (this->_internal_has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.common_);
  }

  // .substrait.Rel input = 2;
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.input_);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10;
  if (this->_internal_has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.advanced_extension_);
  }

  // int32 partition_count = 3;
  if (this->_internal_partition_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_partition_count());
  }

  switch (exchange_kind_case()) {
    // .substrait.ExchangeRel.ScatterFields scatter_by_fields = 5;
    case kScatterByFields: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.exchange_kind_.scatter_by_fields_);
      break;
    }
    // .substrait.ExchangeRel.SingleBucketExpression single_target = 6;
    case kSingleTarget: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.exchange_kind_.single_target_);
      break;
    }
    // .substrait.ExchangeRel.MultiBucketExpression multi_target = 7;
    case kMultiTarget: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.exchange_kind_.multi_target_);
      break;
    }
    // .substrait.ExchangeRel.RoundRobin round_robin = 8;
    case kRoundRobin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.exchange_kind_.round_robin_);
      break;
    }
    // .substrait.ExchangeRel.Broadcast broadcast = 9;
    case kBroadcast: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.exchange_kind_.broadcast_);
      break;
    }
    case EXCHANGE_KIND_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExchangeRel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExchangeRel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExchangeRel::GetClassData() const { return &_class_data_; }


void ExchangeRel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExchangeRel*>(&to_msg);
  auto& from = static_cast<const ExchangeRel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.ExchangeRel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.targets_.MergeFrom(from._impl_.targets_);
  if (from._internal_has_common()) {
    _this->_internal_mutable_common()->::substrait::RelCommon::MergeFrom(
        from._internal_common());
  }
  if (from._internal_has_input()) {
    _this->_internal_mutable_input()->::substrait::Rel::MergeFrom(
        from._internal_input());
  }
  if (from._internal_has_advanced_extension()) {
    _this->_internal_mutable_advanced_extension()->::substrait::extensions::AdvancedExtension::MergeFrom(
        from._internal_advanced_extension());
  }
  if (from._internal_partition_count() != 0) {
    _this->_internal_set_partition_count(from._internal_partition_count());
  }
  switch (from.exchange_kind_case()) {
    case kScatterByFields: {
      _this->_internal_mutable_scatter_by_fields()->::substrait::ExchangeRel_ScatterFields::MergeFrom(
          from._internal_scatter_by_fields());
      break;
    }
    case kSingleTarget: {
      _this->_internal_mutable_single_target()->::substrait::ExchangeRel_SingleBucketExpression::MergeFrom(
          from._internal_single_target());
      break;
    }
    case kMultiTarget: {
      _this->_internal_mutable_multi_target()->::substrait::ExchangeRel_MultiBucketExpression::MergeFrom(
          from._internal_multi_target());
      break;
    }
    case kRoundRobin: {
      _this->_internal_mutable_round_robin()->::substrait::ExchangeRel_RoundRobin::MergeFrom(
          from._internal_round_robin());
      break;
    }
    case kBroadcast: {
      _this->_internal_mutable_broadcast()->::substrait::ExchangeRel_Broadcast::MergeFrom(
          from._internal_broadcast());
      break;
    }
    case EXCHANGE_KIND_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExchangeRel::CopyFrom(const ExchangeRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.ExchangeRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeRel::IsInitialized() const {
  return true;
}

void ExchangeRel::InternalSwap(ExchangeRel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.targets_.InternalSwap(&other->_impl_.targets_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExchangeRel, _impl_.partition_count_)
      + sizeof(ExchangeRel::_impl_.partition_count_)
      - PROTOBUF_FIELD_OFFSET(ExchangeRel, _impl_.common_)>(
          reinterpret_cast<char*>(&_impl_.common_),
          reinterpret_cast<char*>(&other->_impl_.common_));
  swap(_impl_.exchange_kind_, other->_impl_.exchange_kind_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExchangeRel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[35]);
}

// ===================================================================

class RelRoot::_Internal {
 public:
  static const ::substrait::Rel& input(const RelRoot* msg);
};

const ::substrait::Rel&
RelRoot::_Internal::input(const RelRoot* msg) {
  return *msg->_impl_.input_;
}
RelRoot::RelRoot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.RelRoot)
}
RelRoot::RelRoot(const RelRoot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RelRoot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.names_){from._impl_.names_}
    , decltype(_impl_.input_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_input()) {
    _this->_impl_.input_ = new ::substrait::Rel(*from._impl_.input_);
  }
  // @@protoc_insertion_point(copy_constructor:substrait.RelRoot)
}

inline void RelRoot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.names_){arena}
    , decltype(_impl_.input_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RelRoot::~RelRoot() {
  // @@protoc_insertion_point(destructor:substrait.RelRoot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RelRoot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.names_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.input_;
}

void RelRoot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RelRoot::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.RelRoot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.names_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.input_ != nullptr) {
    delete _impl_.input_;
  }
  _impl_.input_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelRoot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.Rel input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string names = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "substrait.RelRoot.names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RelRoot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.RelRoot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.Rel input = 1;
  if (this->_internal_has_input()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::input(this),
        _Internal::input(this).GetCachedSize(), target, stream);
  }

  // repeated string names = 2;
  for (int i = 0, n = this->_internal_names_size(); i < n; i++) {
    const auto& s = this->_internal_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.RelRoot.names");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.RelRoot)
  return target;
}

size_t RelRoot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.RelRoot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string names = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.names_.size());
  for (int i = 0, n = _impl_.names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.names_.Get(i));
  }

  // .substrait.Rel input = 1;
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.input_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RelRoot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RelRoot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RelRoot::GetClassData() const { return &_class_data_; }


void RelRoot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RelRoot*>(&to_msg);
  auto& from = static_cast<const RelRoot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.RelRoot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.names_.MergeFrom(from._impl_.names_);
  if (from._internal_has_input()) {
    _this->_internal_mutable_input()->::substrait::Rel::MergeFrom(
        from._internal_input());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RelRoot::CopyFrom(const RelRoot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.RelRoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelRoot::IsInitialized() const {
  return true;
}

void RelRoot::InternalSwap(RelRoot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.names_.InternalSwap(&other->_impl_.names_);
  swap(_impl_.input_, other->_impl_.input_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RelRoot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[36]);
}

// ===================================================================

class Rel::_Internal {
 public:
  static const ::substrait::ReadRel& read(const Rel* msg);
  static const ::substrait::FilterRel& filter(const Rel* msg);
  static const ::substrait::FetchRel& fetch(const Rel* msg);
  static const ::substrait::AggregateRel& aggregate(const Rel* msg);
  static const ::substrait::SortRel& sort(const Rel* msg);
  static const ::substrait::JoinRel& join(const Rel* msg);
  static const ::substrait::ProjectRel& project(const Rel* msg);
  static const ::substrait::SetRel& set(const Rel* msg);
  static const ::substrait::ExtensionSingleRel& extension_single(const Rel* msg);
  static const ::substrait::ExtensionMultiRel& extension_multi(const Rel* msg);
  static const ::substrait::ExtensionLeafRel& extension_leaf(const Rel* msg);
  static const ::substrait::CrossRel& cross(const Rel* msg);
  static const ::substrait::ExchangeRel& exchange(const Rel* msg);
};

const ::substrait::ReadRel&
Rel::_Internal::read(const Rel* msg) {
  return *msg->_impl_.rel_type_.read_;
}
const ::substrait::FilterRel&
Rel::_Internal::filter(const Rel* msg) {
  return *msg->_impl_.rel_type_.filter_;
}
const ::substrait::FetchRel&
Rel::_Internal::fetch(const Rel* msg) {
  return *msg->_impl_.rel_type_.fetch_;
}
const ::substrait::AggregateRel&
Rel::_Internal::aggregate(const Rel* msg) {
  return *msg->_impl_.rel_type_.aggregate_;
}
const ::substrait::SortRel&
Rel::_Internal::sort(const Rel* msg) {
  return *msg->_impl_.rel_type_.sort_;
}
const ::substrait::JoinRel&
Rel::_Internal::join(const Rel* msg) {
  return *msg->_impl_.rel_type_.join_;
}
const ::substrait::ProjectRel&
Rel::_Internal::project(const Rel* msg) {
  return *msg->_impl_.rel_type_.project_;
}
const ::substrait::SetRel&
Rel::_Internal::set(const Rel* msg) {
  return *msg->_impl_.rel_type_.set_;
}
const ::substrait::ExtensionSingleRel&
Rel::_Internal::extension_single(const Rel* msg) {
  return *msg->_impl_.rel_type_.extension_single_;
}
const ::substrait::ExtensionMultiRel&
Rel::_Internal::extension_multi(const Rel* msg) {
  return *msg->_impl_.rel_type_.extension_multi_;
}
const ::substrait::ExtensionLeafRel&
Rel::_Internal::extension_leaf(const Rel* msg) {
  return *msg->_impl_.rel_type_.extension_leaf_;
}
const ::substrait::CrossRel&
Rel::_Internal::cross(const Rel* msg) {
  return *msg->_impl_.rel_type_.cross_;
}
const ::substrait::ExchangeRel&
Rel::_Internal::exchange(const Rel* msg) {
  return *msg->_impl_.rel_type_.exchange_;
}
void Rel::set_allocated_read(::substrait::ReadRel* read) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rel_type();
  if (read) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(read);
    if (message_arena != submessage_arena) {
      read = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read, submessage_arena);
    }
    set_has_read();
    _impl_.rel_type_.read_ = read;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Rel.read)
}
void Rel::set_allocated_filter(::substrait::FilterRel* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rel_type();
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(filter);
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    set_has_filter();
    _impl_.rel_type_.filter_ = filter;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Rel.filter)
}
void Rel::set_allocated_fetch(::substrait::FetchRel* fetch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rel_type();
  if (fetch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fetch);
    if (message_arena != submessage_arena) {
      fetch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fetch, submessage_arena);
    }
    set_has_fetch();
    _impl_.rel_type_.fetch_ = fetch;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Rel.fetch)
}
void Rel::set_allocated_aggregate(::substrait::AggregateRel* aggregate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rel_type();
  if (aggregate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(aggregate);
    if (message_arena != submessage_arena) {
      aggregate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aggregate, submessage_arena);
    }
    set_has_aggregate();
    _impl_.rel_type_.aggregate_ = aggregate;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Rel.aggregate)
}
void Rel::set_allocated_sort(::substrait::SortRel* sort) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rel_type();
  if (sort) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sort);
    if (message_arena != submessage_arena) {
      sort = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sort, submessage_arena);
    }
    set_has_sort();
    _impl_.rel_type_.sort_ = sort;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Rel.sort)
}
void Rel::set_allocated_join(::substrait::JoinRel* join) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rel_type();
  if (join) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(join);
    if (message_arena != submessage_arena) {
      join = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, join, submessage_arena);
    }
    set_has_join();
    _impl_.rel_type_.join_ = join;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Rel.join)
}
void Rel::set_allocated_project(::substrait::ProjectRel* project) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rel_type();
  if (project) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(project);
    if (message_arena != submessage_arena) {
      project = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, project, submessage_arena);
    }
    set_has_project();
    _impl_.rel_type_.project_ = project;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Rel.project)
}
void Rel::set_allocated_set(::substrait::SetRel* set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rel_type();
  if (set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(set);
    if (message_arena != submessage_arena) {
      set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set, submessage_arena);
    }
    set_has_set();
    _impl_.rel_type_.set_ = set;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Rel.set)
}
void Rel::set_allocated_extension_single(::substrait::ExtensionSingleRel* extension_single) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rel_type();
  if (extension_single) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(extension_single);
    if (message_arena != submessage_arena) {
      extension_single = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension_single, submessage_arena);
    }
    set_has_extension_single();
    _impl_.rel_type_.extension_single_ = extension_single;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Rel.extension_single)
}
void Rel::set_allocated_extension_multi(::substrait::ExtensionMultiRel* extension_multi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rel_type();
  if (extension_multi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(extension_multi);
    if (message_arena != submessage_arena) {
      extension_multi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension_multi, submessage_arena);
    }
    set_has_extension_multi();
    _impl_.rel_type_.extension_multi_ = extension_multi;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Rel.extension_multi)
}
void Rel::set_allocated_extension_leaf(::substrait::ExtensionLeafRel* extension_leaf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rel_type();
  if (extension_leaf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(extension_leaf);
    if (message_arena != submessage_arena) {
      extension_leaf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension_leaf, submessage_arena);
    }
    set_has_extension_leaf();
    _impl_.rel_type_.extension_leaf_ = extension_leaf;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Rel.extension_leaf)
}
void Rel::set_allocated_cross(::substrait::CrossRel* cross) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rel_type();
  if (cross) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cross);
    if (message_arena != submessage_arena) {
      cross = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cross, submessage_arena);
    }
    set_has_cross();
    _impl_.rel_type_.cross_ = cross;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Rel.cross)
}
void Rel::set_allocated_exchange(::substrait::ExchangeRel* exchange) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rel_type();
  if (exchange) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(exchange);
    if (message_arena != submessage_arena) {
      exchange = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exchange, submessage_arena);
    }
    set_has_exchange();
    _impl_.rel_type_.exchange_ = exchange;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Rel.exchange)
}
Rel::Rel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Rel)
}
Rel::Rel(const Rel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Rel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rel_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_rel_type();
  switch (from.rel_type_case()) {
    case kRead: {
      _this->_internal_mutable_read()->::substrait::ReadRel::MergeFrom(
          from._internal_read());
      break;
    }
    case kFilter: {
      _this->_internal_mutable_filter()->::substrait::FilterRel::MergeFrom(
          from._internal_filter());
      break;
    }
    case kFetch: {
      _this->_internal_mutable_fetch()->::substrait::FetchRel::MergeFrom(
          from._internal_fetch());
      break;
    }
    case kAggregate: {
      _this->_internal_mutable_aggregate()->::substrait::AggregateRel::MergeFrom(
          from._internal_aggregate());
      break;
    }
    case kSort: {
      _this->_internal_mutable_sort()->::substrait::SortRel::MergeFrom(
          from._internal_sort());
      break;
    }
    case kJoin: {
      _this->_internal_mutable_join()->::substrait::JoinRel::MergeFrom(
          from._internal_join());
      break;
    }
    case kProject: {
      _this->_internal_mutable_project()->::substrait::ProjectRel::MergeFrom(
          from._internal_project());
      break;
    }
    case kSet: {
      _this->_internal_mutable_set()->::substrait::SetRel::MergeFrom(
          from._internal_set());
      break;
    }
    case kExtensionSingle: {
      _this->_internal_mutable_extension_single()->::substrait::ExtensionSingleRel::MergeFrom(
          from._internal_extension_single());
      break;
    }
    case kExtensionMulti: {
      _this->_internal_mutable_extension_multi()->::substrait::ExtensionMultiRel::MergeFrom(
          from._internal_extension_multi());
      break;
    }
    case kExtensionLeaf: {
      _this->_internal_mutable_extension_leaf()->::substrait::ExtensionLeafRel::MergeFrom(
          from._internal_extension_leaf());
      break;
    }
    case kCross: {
      _this->_internal_mutable_cross()->::substrait::CrossRel::MergeFrom(
          from._internal_cross());
      break;
    }
    case kExchange: {
      _this->_internal_mutable_exchange()->::substrait::ExchangeRel::MergeFrom(
          from._internal_exchange());
      break;
    }
    case REL_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.Rel)
}

inline void Rel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rel_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_rel_type();
}

Rel::~Rel() {
  // @@protoc_insertion_point(destructor:substrait.Rel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Rel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_rel_type()) {
    clear_rel_type();
  }
}

void Rel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Rel::clear_rel_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.Rel)
  switch (rel_type_case()) {
    case kRead: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.rel_type_.read_;
      }
      break;
    }
    case kFilter: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.rel_type_.filter_;
      }
      break;
    }
    case kFetch: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.rel_type_.fetch_;
      }
      break;
    }
    case kAggregate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.rel_type_.aggregate_;
      }
      break;
    }
    case kSort: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.rel_type_.sort_;
      }
      break;
    }
    case kJoin: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.rel_type_.join_;
      }
      break;
    }
    case kProject: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.rel_type_.project_;
      }
      break;
    }
    case kSet: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.rel_type_.set_;
      }
      break;
    }
    case kExtensionSingle: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.rel_type_.extension_single_;
      }
      break;
    }
    case kExtensionMulti: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.rel_type_.extension_multi_;
      }
      break;
    }
    case kExtensionLeaf: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.rel_type_.extension_leaf_;
      }
      break;
    }
    case kCross: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.rel_type_.cross_;
      }
      break;
    }
    case kExchange: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.rel_type_.exchange_;
      }
      break;
    }
    case REL_TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = REL_TYPE_NOT_SET;
}


void Rel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Rel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_rel_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.ReadRel read = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_read(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.FilterRel filter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.FetchRel fetch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_fetch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.AggregateRel aggregate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_aggregate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.SortRel sort = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sort(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.JoinRel join = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_join(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.ProjectRel project = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_project(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.SetRel set = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_set(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.ExtensionSingleRel extension_single = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_extension_single(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.ExtensionMultiRel extension_multi = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_extension_multi(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.ExtensionLeafRel extension_leaf = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_extension_leaf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.CrossRel cross = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_cross(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.ExchangeRel exchange = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_exchange(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Rel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Rel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.ReadRel read = 1;
  if (_internal_has_read()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::read(this),
        _Internal::read(this).GetCachedSize(), target, stream);
  }

  // .substrait.FilterRel filter = 2;
  if (_internal_has_filter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::filter(this),
        _Internal::filter(this).GetCachedSize(), target, stream);
  }

  // .substrait.FetchRel fetch = 3;
  if (_internal_has_fetch()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::fetch(this),
        _Internal::fetch(this).GetCachedSize(), target, stream);
  }

  // .substrait.AggregateRel aggregate = 4;
  if (_internal_has_aggregate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::aggregate(this),
        _Internal::aggregate(this).GetCachedSize(), target, stream);
  }

  // .substrait.SortRel sort = 5;
  if (_internal_has_sort()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::sort(this),
        _Internal::sort(this).GetCachedSize(), target, stream);
  }

  // .substrait.JoinRel join = 6;
  if (_internal_has_join()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::join(this),
        _Internal::join(this).GetCachedSize(), target, stream);
  }

  // .substrait.ProjectRel project = 7;
  if (_internal_has_project()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::project(this),
        _Internal::project(this).GetCachedSize(), target, stream);
  }

  // .substrait.SetRel set = 8;
  if (_internal_has_set()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::set(this),
        _Internal::set(this).GetCachedSize(), target, stream);
  }

  // .substrait.ExtensionSingleRel extension_single = 9;
  if (_internal_has_extension_single()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::extension_single(this),
        _Internal::extension_single(this).GetCachedSize(), target, stream);
  }

  // .substrait.ExtensionMultiRel extension_multi = 10;
  if (_internal_has_extension_multi()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::extension_multi(this),
        _Internal::extension_multi(this).GetCachedSize(), target, stream);
  }

  // .substrait.ExtensionLeafRel extension_leaf = 11;
  if (_internal_has_extension_leaf()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::extension_leaf(this),
        _Internal::extension_leaf(this).GetCachedSize(), target, stream);
  }

  // .substrait.CrossRel cross = 12;
  if (_internal_has_cross()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::cross(this),
        _Internal::cross(this).GetCachedSize(), target, stream);
  }

  // .substrait.ExchangeRel exchange = 13;
  if (_internal_has_exchange()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::exchange(this),
        _Internal::exchange(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Rel)
  return target;
}

size_t Rel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Rel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (rel_type_case()) {
    // .substrait.ReadRel read = 1;
    case kRead: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rel_type_.read_);
      break;
    }
    // .substrait.FilterRel filter = 2;
    case kFilter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rel_type_.filter_);
      break;
    }
    // .substrait.FetchRel fetch = 3;
    case kFetch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rel_type_.fetch_);
      break;
    }
    // .substrait.AggregateRel aggregate = 4;
    case kAggregate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rel_type_.aggregate_);
      break;
    }
    // .substrait.SortRel sort = 5;
    case kSort: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rel_type_.sort_);
      break;
    }
    // .substrait.JoinRel join = 6;
    case kJoin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rel_type_.join_);
      break;
    }
    // .substrait.ProjectRel project = 7;
    case kProject: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rel_type_.project_);
      break;
    }
    // .substrait.SetRel set = 8;
    case kSet: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rel_type_.set_);
      break;
    }
    // .substrait.ExtensionSingleRel extension_single = 9;
    case kExtensionSingle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rel_type_.extension_single_);
      break;
    }
    // .substrait.ExtensionMultiRel extension_multi = 10;
    case kExtensionMulti: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rel_type_.extension_multi_);
      break;
    }
    // .substrait.ExtensionLeafRel extension_leaf = 11;
    case kExtensionLeaf: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rel_type_.extension_leaf_);
      break;
    }
    // .substrait.CrossRel cross = 12;
    case kCross: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rel_type_.cross_);
      break;
    }
    // .substrait.ExchangeRel exchange = 13;
    case kExchange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rel_type_.exchange_);
      break;
    }
    case REL_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Rel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rel::GetClassData() const { return &_class_data_; }


void Rel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Rel*>(&to_msg);
  auto& from = static_cast<const Rel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Rel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.rel_type_case()) {
    case kRead: {
      _this->_internal_mutable_read()->::substrait::ReadRel::MergeFrom(
          from._internal_read());
      break;
    }
    case kFilter: {
      _this->_internal_mutable_filter()->::substrait::FilterRel::MergeFrom(
          from._internal_filter());
      break;
    }
    case kFetch: {
      _this->_internal_mutable_fetch()->::substrait::FetchRel::MergeFrom(
          from._internal_fetch());
      break;
    }
    case kAggregate: {
      _this->_internal_mutable_aggregate()->::substrait::AggregateRel::MergeFrom(
          from._internal_aggregate());
      break;
    }
    case kSort: {
      _this->_internal_mutable_sort()->::substrait::SortRel::MergeFrom(
          from._internal_sort());
      break;
    }
    case kJoin: {
      _this->_internal_mutable_join()->::substrait::JoinRel::MergeFrom(
          from._internal_join());
      break;
    }
    case kProject: {
      _this->_internal_mutable_project()->::substrait::ProjectRel::MergeFrom(
          from._internal_project());
      break;
    }
    case kSet: {
      _this->_internal_mutable_set()->::substrait::SetRel::MergeFrom(
          from._internal_set());
      break;
    }
    case kExtensionSingle: {
      _this->_internal_mutable_extension_single()->::substrait::ExtensionSingleRel::MergeFrom(
          from._internal_extension_single());
      break;
    }
    case kExtensionMulti: {
      _this->_internal_mutable_extension_multi()->::substrait::ExtensionMultiRel::MergeFrom(
          from._internal_extension_multi());
      break;
    }
    case kExtensionLeaf: {
      _this->_internal_mutable_extension_leaf()->::substrait::ExtensionLeafRel::MergeFrom(
          from._internal_extension_leaf());
      break;
    }
    case kCross: {
      _this->_internal_mutable_cross()->::substrait::CrossRel::MergeFrom(
          from._internal_cross());
      break;
    }
    case kExchange: {
      _this->_internal_mutable_exchange()->::substrait::ExchangeRel::MergeFrom(
          from._internal_exchange());
      break;
    }
    case REL_TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rel::CopyFrom(const Rel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Rel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rel::IsInitialized() const {
  return true;
}

void Rel::InternalSwap(Rel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.rel_type_, other->_impl_.rel_type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Rel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[37]);
}

// ===================================================================

class NamedObjectWrite::_Internal {
 public:
  static const ::substrait::extensions::AdvancedExtension& advanced_extension(const NamedObjectWrite* msg);
};

const ::substrait::extensions::AdvancedExtension&
NamedObjectWrite::_Internal::advanced_extension(const NamedObjectWrite* msg) {
  return *msg->_impl_.advanced_extension_;
}
void NamedObjectWrite::clear_advanced_extension() {
  if (GetArenaForAllocation() == nullptr && _impl_.advanced_extension_ != nullptr) {
    delete _impl_.advanced_extension_;
  }
  _impl_.advanced_extension_ = nullptr;
}
NamedObjectWrite::NamedObjectWrite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.NamedObjectWrite)
}
NamedObjectWrite::NamedObjectWrite(const NamedObjectWrite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NamedObjectWrite* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.names_){from._impl_.names_}
    , decltype(_impl_.advanced_extension_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_advanced_extension()) {
    _this->_impl_.advanced_extension_ = new ::substrait::extensions::AdvancedExtension(*from._impl_.advanced_extension_);
  }
  // @@protoc_insertion_point(copy_constructor:substrait.NamedObjectWrite)
}

inline void NamedObjectWrite::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.names_){arena}
    , decltype(_impl_.advanced_extension_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NamedObjectWrite::~NamedObjectWrite() {
  // @@protoc_insertion_point(destructor:substrait.NamedObjectWrite)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NamedObjectWrite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.names_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.advanced_extension_;
}

void NamedObjectWrite::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NamedObjectWrite::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.NamedObjectWrite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.names_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.advanced_extension_ != nullptr) {
    delete _impl_.advanced_extension_;
  }
  _impl_.advanced_extension_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NamedObjectWrite::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string names = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "substrait.NamedObjectWrite.names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .substrait.extensions.AdvancedExtension advanced_extension = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NamedObjectWrite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.NamedObjectWrite)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string names = 1;
  for (int i = 0, n = this->_internal_names_size(); i < n; i++) {
    const auto& s = this->_internal_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.NamedObjectWrite.names");
    target = stream->WriteString(1, s, target);
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10;
  if (this->_internal_has_advanced_extension()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::advanced_extension(this),
        _Internal::advanced_extension(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.NamedObjectWrite)
  return target;
}

size_t NamedObjectWrite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.NamedObjectWrite)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string names = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.names_.size());
  for (int i = 0, n = _impl_.names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.names_.Get(i));
  }

  // .substrait.extensions.AdvancedExtension advanced_extension = 10;
  if (this->_internal_has_advanced_extension()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.advanced_extension_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NamedObjectWrite::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NamedObjectWrite::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NamedObjectWrite::GetClassData() const { return &_class_data_; }


void NamedObjectWrite::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NamedObjectWrite*>(&to_msg);
  auto& from = static_cast<const NamedObjectWrite&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.NamedObjectWrite)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.names_.MergeFrom(from._impl_.names_);
  if (from._internal_has_advanced_extension()) {
    _this->_internal_mutable_advanced_extension()->::substrait::extensions::AdvancedExtension::MergeFrom(
        from._internal_advanced_extension());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NamedObjectWrite::CopyFrom(const NamedObjectWrite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.NamedObjectWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedObjectWrite::IsInitialized() const {
  return true;
}

void NamedObjectWrite::InternalSwap(NamedObjectWrite* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.names_.InternalSwap(&other->_impl_.names_);
  swap(_impl_.advanced_extension_, other->_impl_.advanced_extension_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NamedObjectWrite::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[38]);
}

// ===================================================================

class ExtensionObject::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& detail(const ExtensionObject* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
ExtensionObject::_Internal::detail(const ExtensionObject* msg) {
  return *msg->_impl_.detail_;
}
void ExtensionObject::clear_detail() {
  if (GetArenaForAllocation() == nullptr && _impl_.detail_ != nullptr) {
    delete _impl_.detail_;
  }
  _impl_.detail_ = nullptr;
}
ExtensionObject::ExtensionObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.ExtensionObject)
}
ExtensionObject::ExtensionObject(const ExtensionObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExtensionObject* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.detail_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_detail()) {
    _this->_impl_.detail_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.detail_);
  }
  // @@protoc_insertion_point(copy_constructor:substrait.ExtensionObject)
}

inline void ExtensionObject::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.detail_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ExtensionObject::~ExtensionObject() {
  // @@protoc_insertion_point(destructor:substrait.ExtensionObject)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExtensionObject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.detail_;
}

void ExtensionObject::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExtensionObject::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.ExtensionObject)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.detail_ != nullptr) {
    delete _impl_.detail_;
  }
  _impl_.detail_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExtensionObject::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Any detail = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_detail(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtensionObject::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.ExtensionObject)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any detail = 1;
  if (this->_internal_has_detail()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::detail(this),
        _Internal::detail(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.ExtensionObject)
  return target;
}

size_t ExtensionObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.ExtensionObject)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any detail = 1;
  if (this->_internal_has_detail()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.detail_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExtensionObject::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExtensionObject::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExtensionObject::GetClassData() const { return &_class_data_; }


void ExtensionObject::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExtensionObject*>(&to_msg);
  auto& from = static_cast<const ExtensionObject&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.ExtensionObject)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_detail()) {
    _this->_internal_mutable_detail()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_detail());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExtensionObject::CopyFrom(const ExtensionObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.ExtensionObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionObject::IsInitialized() const {
  return true;
}

void ExtensionObject::InternalSwap(ExtensionObject* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.detail_, other->_impl_.detail_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtensionObject::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[39]);
}

// ===================================================================

class DdlRel::_Internal {
 public:
  static const ::substrait::NamedObjectWrite& named_object(const DdlRel* msg);
  static const ::substrait::ExtensionObject& extension_object(const DdlRel* msg);
  static const ::substrait::NamedStruct& table_schema(const DdlRel* msg);
  static const ::substrait::Expression_Literal_Struct& table_defaults(const DdlRel* msg);
  static const ::substrait::Rel& view_definition(const DdlRel* msg);
};

const ::substrait::NamedObjectWrite&
DdlRel::_Internal::named_object(const DdlRel* msg) {
  return *msg->_impl_.write_type_.named_object_;
}
const ::substrait::ExtensionObject&
DdlRel::_Internal::extension_object(const DdlRel* msg) {
  return *msg->_impl_.write_type_.extension_object_;
}
const ::substrait::NamedStruct&
DdlRel::_Internal::table_schema(const DdlRel* msg) {
  return *msg->_impl_.table_schema_;
}
const ::substrait::Expression_Literal_Struct&
DdlRel::_Internal::table_defaults(const DdlRel* msg) {
  return *msg->_impl_.table_defaults_;
}
const ::substrait::Rel&
DdlRel::_Internal::view_definition(const DdlRel* msg) {
  return *msg->_impl_.view_definition_;
}
void DdlRel::set_allocated_named_object(::substrait::NamedObjectWrite* named_object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_write_type();
  if (named_object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(named_object);
    if (message_arena != submessage_arena) {
      named_object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, named_object, submessage_arena);
    }
    set_has_named_object();
    _impl_.write_type_.named_object_ = named_object;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.DdlRel.named_object)
}
void DdlRel::set_allocated_extension_object(::substrait::ExtensionObject* extension_object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_write_type();
  if (extension_object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(extension_object);
    if (message_arena != submessage_arena) {
      extension_object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension_object, submessage_arena);
    }
    set_has_extension_object();
    _impl_.write_type_.extension_object_ = extension_object;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.DdlRel.extension_object)
}
void DdlRel::clear_table_schema() {
  if (GetArenaForAllocation() == nullptr && _impl_.table_schema_ != nullptr) {
    delete _impl_.table_schema_;
  }
  _impl_.table_schema_ = nullptr;
}
DdlRel::DdlRel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.DdlRel)
}
DdlRel::DdlRel(const DdlRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DdlRel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.table_schema_){nullptr}
    , decltype(_impl_.table_defaults_){nullptr}
    , decltype(_impl_.view_definition_){nullptr}
    , decltype(_impl_.object_){}
    , decltype(_impl_.op_){}
    , decltype(_impl_.write_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_schema()) {
    _this->_impl_.table_schema_ = new ::substrait::NamedStruct(*from._impl_.table_schema_);
  }
  if (from._internal_has_table_defaults()) {
    _this->_impl_.table_defaults_ = new ::substrait::Expression_Literal_Struct(*from._impl_.table_defaults_);
  }
  if (from._internal_has_view_definition()) {
    _this->_impl_.view_definition_ = new ::substrait::Rel(*from._impl_.view_definition_);
  }
  ::memcpy(&_impl_.object_, &from._impl_.object_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.op_) -
    reinterpret_cast<char*>(&_impl_.object_)) + sizeof(_impl_.op_));
  clear_has_write_type();
  switch (from.write_type_case()) {
    case kNamedObject: {
      _this->_internal_mutable_named_object()->::substrait::NamedObjectWrite::MergeFrom(
          from._internal_named_object());
      break;
    }
    case kExtensionObject: {
      _this->_internal_mutable_extension_object()->::substrait::ExtensionObject::MergeFrom(
          from._internal_extension_object());
      break;
    }
    case WRITE_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.DdlRel)
}

inline void DdlRel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.table_schema_){nullptr}
    , decltype(_impl_.table_defaults_){nullptr}
    , decltype(_impl_.view_definition_){nullptr}
    , decltype(_impl_.object_){0}
    , decltype(_impl_.op_){0}
    , decltype(_impl_.write_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_write_type();
}

DdlRel::~DdlRel() {
  // @@protoc_insertion_point(destructor:substrait.DdlRel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DdlRel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.table_schema_;
  if (this != internal_default_instance()) delete _impl_.table_defaults_;
  if (this != internal_default_instance()) delete _impl_.view_definition_;
  if (has_write_type()) {
    clear_write_type();
  }
}

void DdlRel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DdlRel::clear_write_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.DdlRel)
  switch (write_type_case()) {
    case kNamedObject: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.write_type_.named_object_;
      }
      break;
    }
    case kExtensionObject: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.write_type_.extension_object_;
      }
      break;
    }
    case WRITE_TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = WRITE_TYPE_NOT_SET;
}


void DdlRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.DdlRel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.table_schema_ != nullptr) {
    delete _impl_.table_schema_;
  }
  _impl_.table_schema_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.table_defaults_ != nullptr) {
    delete _impl_.table_defaults_;
  }
  _impl_.table_defaults_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.view_definition_ != nullptr) {
    delete _impl_.view_definition_;
  }
  _impl_.view_definition_ = nullptr;
  ::memset(&_impl_.object_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.op_) -
      reinterpret_cast<char*>(&_impl_.object_)) + sizeof(_impl_.op_));
  clear_write_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DdlRel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.NamedObjectWrite named_object = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_named_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.ExtensionObject extension_object = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_extension_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.NamedStruct table_schema = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_schema(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.Literal.Struct table_defaults = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_defaults(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.DdlRel.DdlObject object = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_object(static_cast<::substrait::DdlRel_DdlObject>(val));
        } else
          goto handle_unusual;
        continue;
      // .substrait.DdlRel.DdlOp op = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::substrait::DdlRel_DdlOp>(val));
        } else
          goto handle_unusual;
        continue;
      // .substrait.Rel view_definition = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_view_definition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DdlRel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.DdlRel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.NamedObjectWrite named_object = 1;
  if (_internal_has_named_object()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::named_object(this),
        _Internal::named_object(this).GetCachedSize(), target, stream);
  }

  // .substrait.ExtensionObject extension_object = 2;
  if (_internal_has_extension_object()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::extension_object(this),
        _Internal::extension_object(this).GetCachedSize(), target, stream);
  }

  // .substrait.NamedStruct table_schema = 3;
  if (this->_internal_has_table_schema()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::table_schema(this),
        _Internal::table_schema(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression.Literal.Struct table_defaults = 4;
  if (this->_internal_has_table_defaults()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::table_defaults(this),
        _Internal::table_defaults(this).GetCachedSize(), target, stream);
  }

  // .substrait.DdlRel.DdlObject object = 5;
  if (this->_internal_object() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_object(), target);
  }

  // .substrait.DdlRel.DdlOp op = 6;
  if (this->_internal_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_op(), target);
  }

  // .substrait.Rel view_definition = 7;
  if (this->_internal_has_view_definition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::view_definition(this),
        _Internal::view_definition(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.DdlRel)
  return target;
}

size_t DdlRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.DdlRel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.NamedStruct table_schema = 3;
  if (this->_internal_has_table_schema()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_schema_);
  }

  // .substrait.Expression.Literal.Struct table_defaults = 4;
  if (this->_internal_has_table_defaults()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_defaults_);
  }

  // .substrait.Rel view_definition = 7;
  if (this->_internal_has_view_definition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.view_definition_);
  }

  // .substrait.DdlRel.DdlObject object = 5;
  if (this->_internal_object() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_object());
  }

  // .substrait.DdlRel.DdlOp op = 6;
  if (this->_internal_op() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_op());
  }

  switch (write_type_case()) {
    // .substrait.NamedObjectWrite named_object = 1;
    case kNamedObject: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.write_type_.named_object_);
      break;
    }
    // .substrait.ExtensionObject extension_object = 2;
    case kExtensionObject: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.write_type_.extension_object_);
      break;
    }
    case WRITE_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DdlRel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DdlRel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DdlRel::GetClassData() const { return &_class_data_; }


void DdlRel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DdlRel*>(&to_msg);
  auto& from = static_cast<const DdlRel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.DdlRel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_table_schema()) {
    _this->_internal_mutable_table_schema()->::substrait::NamedStruct::MergeFrom(
        from._internal_table_schema());
  }
  if (from._internal_has_table_defaults()) {
    _this->_internal_mutable_table_defaults()->::substrait::Expression_Literal_Struct::MergeFrom(
        from._internal_table_defaults());
  }
  if (from._internal_has_view_definition()) {
    _this->_internal_mutable_view_definition()->::substrait::Rel::MergeFrom(
        from._internal_view_definition());
  }
  if (from._internal_object() != 0) {
    _this->_internal_set_object(from._internal_object());
  }
  if (from._internal_op() != 0) {
    _this->_internal_set_op(from._internal_op());
  }
  switch (from.write_type_case()) {
    case kNamedObject: {
      _this->_internal_mutable_named_object()->::substrait::NamedObjectWrite::MergeFrom(
          from._internal_named_object());
      break;
    }
    case kExtensionObject: {
      _this->_internal_mutable_extension_object()->::substrait::ExtensionObject::MergeFrom(
          from._internal_extension_object());
      break;
    }
    case WRITE_TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DdlRel::CopyFrom(const DdlRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.DdlRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DdlRel::IsInitialized() const {
  return true;
}

void DdlRel::InternalSwap(DdlRel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DdlRel, _impl_.op_)
      + sizeof(DdlRel::_impl_.op_)
      - PROTOBUF_FIELD_OFFSET(DdlRel, _impl_.table_schema_)>(
          reinterpret_cast<char*>(&_impl_.table_schema_),
          reinterpret_cast<char*>(&other->_impl_.table_schema_));
  swap(_impl_.write_type_, other->_impl_.write_type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DdlRel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[40]);
}

// ===================================================================

class WriteRel::_Internal {
 public:
  static const ::substrait::NamedObjectWrite& named_table(const WriteRel* msg);
  static const ::substrait::ExtensionObject& extension_table(const WriteRel* msg);
  static const ::substrait::NamedStruct& table_schema(const WriteRel* msg);
  static const ::substrait::Rel& input(const WriteRel* msg);
};

const ::substrait::NamedObjectWrite&
WriteRel::_Internal::named_table(const WriteRel* msg) {
  return *msg->_impl_.write_type_.named_table_;
}
const ::substrait::ExtensionObject&
WriteRel::_Internal::extension_table(const WriteRel* msg) {
  return *msg->_impl_.write_type_.extension_table_;
}
const ::substrait::NamedStruct&
WriteRel::_Internal::table_schema(const WriteRel* msg) {
  return *msg->_impl_.table_schema_;
}
const ::substrait::Rel&
WriteRel::_Internal::input(const WriteRel* msg) {
  return *msg->_impl_.input_;
}
void WriteRel::set_allocated_named_table(::substrait::NamedObjectWrite* named_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_write_type();
  if (named_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(named_table);
    if (message_arena != submessage_arena) {
      named_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, named_table, submessage_arena);
    }
    set_has_named_table();
    _impl_.write_type_.named_table_ = named_table;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.WriteRel.named_table)
}
void WriteRel::set_allocated_extension_table(::substrait::ExtensionObject* extension_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_write_type();
  if (extension_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(extension_table);
    if (message_arena != submessage_arena) {
      extension_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension_table, submessage_arena);
    }
    set_has_extension_table();
    _impl_.write_type_.extension_table_ = extension_table;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.WriteRel.extension_table)
}
void WriteRel::clear_table_schema() {
  if (GetArenaForAllocation() == nullptr && _impl_.table_schema_ != nullptr) {
    delete _impl_.table_schema_;
  }
  _impl_.table_schema_ = nullptr;
}
WriteRel::WriteRel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.WriteRel)
}
WriteRel::WriteRel(const WriteRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WriteRel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.table_schema_){nullptr}
    , decltype(_impl_.input_){nullptr}
    , decltype(_impl_.op_){}
    , decltype(_impl_.output_){}
    , decltype(_impl_.write_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_schema()) {
    _this->_impl_.table_schema_ = new ::substrait::NamedStruct(*from._impl_.table_schema_);
  }
  if (from._internal_has_input()) {
    _this->_impl_.input_ = new ::substrait::Rel(*from._impl_.input_);
  }
  ::memcpy(&_impl_.op_, &from._impl_.op_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.output_) -
    reinterpret_cast<char*>(&_impl_.op_)) + sizeof(_impl_.output_));
  clear_has_write_type();
  switch (from.write_type_case()) {
    case kNamedTable: {
      _this->_internal_mutable_named_table()->::substrait::NamedObjectWrite::MergeFrom(
          from._internal_named_table());
      break;
    }
    case kExtensionTable: {
      _this->_internal_mutable_extension_table()->::substrait::ExtensionObject::MergeFrom(
          from._internal_extension_table());
      break;
    }
    case WRITE_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.WriteRel)
}

inline void WriteRel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.table_schema_){nullptr}
    , decltype(_impl_.input_){nullptr}
    , decltype(_impl_.op_){0}
    , decltype(_impl_.output_){0}
    , decltype(_impl_.write_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_write_type();
}

WriteRel::~WriteRel() {
  // @@protoc_insertion_point(destructor:substrait.WriteRel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WriteRel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.table_schema_;
  if (this != internal_default_instance()) delete _impl_.input_;
  if (has_write_type()) {
    clear_write_type();
  }
}

void WriteRel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WriteRel::clear_write_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.WriteRel)
  switch (write_type_case()) {
    case kNamedTable: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.write_type_.named_table_;
      }
      break;
    }
    case kExtensionTable: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.write_type_.extension_table_;
      }
      break;
    }
    case WRITE_TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = WRITE_TYPE_NOT_SET;
}


void WriteRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.WriteRel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.table_schema_ != nullptr) {
    delete _impl_.table_schema_;
  }
  _impl_.table_schema_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.input_ != nullptr) {
    delete _impl_.input_;
  }
  _impl_.input_ = nullptr;
  ::memset(&_impl_.op_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.output_) -
      reinterpret_cast<char*>(&_impl_.op_)) + sizeof(_impl_.output_));
  clear_write_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteRel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.NamedObjectWrite named_table = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_named_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.ExtensionObject extension_table = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_extension_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.NamedStruct table_schema = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_schema(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.WriteRel.WriteOp op = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::substrait::WriteRel_WriteOp>(val));
        } else
          goto handle_unusual;
        continue;
      // .substrait.Rel input = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.WriteRel.OutputMode output = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_output(static_cast<::substrait::WriteRel_OutputMode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WriteRel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.WriteRel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.NamedObjectWrite named_table = 1;
  if (_internal_has_named_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::named_table(this),
        _Internal::named_table(this).GetCachedSize(), target, stream);
  }

  // .substrait.ExtensionObject extension_table = 2;
  if (_internal_has_extension_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::extension_table(this),
        _Internal::extension_table(this).GetCachedSize(), target, stream);
  }

  // .substrait.NamedStruct table_schema = 3;
  if (this->_internal_has_table_schema()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::table_schema(this),
        _Internal::table_schema(this).GetCachedSize(), target, stream);
  }

  // .substrait.WriteRel.WriteOp op = 4;
  if (this->_internal_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_op(), target);
  }

  // .substrait.Rel input = 5;
  if (this->_internal_has_input()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::input(this),
        _Internal::input(this).GetCachedSize(), target, stream);
  }

  // .substrait.WriteRel.OutputMode output = 6;
  if (this->_internal_output() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_output(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.WriteRel)
  return target;
}

size_t WriteRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.WriteRel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.NamedStruct table_schema = 3;
  if (this->_internal_has_table_schema()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_schema_);
  }

  // .substrait.Rel input = 5;
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.input_);
  }

  // .substrait.WriteRel.WriteOp op = 4;
  if (this->_internal_op() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_op());
  }

  // .substrait.WriteRel.OutputMode output = 6;
  if (this->_internal_output() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_output());
  }

  switch (write_type_case()) {
    // .substrait.NamedObjectWrite named_table = 1;
    case kNamedTable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.write_type_.named_table_);
      break;
    }
    // .substrait.ExtensionObject extension_table = 2;
    case kExtensionTable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.write_type_.extension_table_);
      break;
    }
    case WRITE_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriteRel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WriteRel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriteRel::GetClassData() const { return &_class_data_; }


void WriteRel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WriteRel*>(&to_msg);
  auto& from = static_cast<const WriteRel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.WriteRel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_table_schema()) {
    _this->_internal_mutable_table_schema()->::substrait::NamedStruct::MergeFrom(
        from._internal_table_schema());
  }
  if (from._internal_has_input()) {
    _this->_internal_mutable_input()->::substrait::Rel::MergeFrom(
        from._internal_input());
  }
  if (from._internal_op() != 0) {
    _this->_internal_set_op(from._internal_op());
  }
  if (from._internal_output() != 0) {
    _this->_internal_set_output(from._internal_output());
  }
  switch (from.write_type_case()) {
    case kNamedTable: {
      _this->_internal_mutable_named_table()->::substrait::NamedObjectWrite::MergeFrom(
          from._internal_named_table());
      break;
    }
    case kExtensionTable: {
      _this->_internal_mutable_extension_table()->::substrait::ExtensionObject::MergeFrom(
          from._internal_extension_table());
      break;
    }
    case WRITE_TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WriteRel::CopyFrom(const WriteRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.WriteRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteRel::IsInitialized() const {
  return true;
}

void WriteRel::InternalSwap(WriteRel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WriteRel, _impl_.output_)
      + sizeof(WriteRel::_impl_.output_)
      - PROTOBUF_FIELD_OFFSET(WriteRel, _impl_.table_schema_)>(
          reinterpret_cast<char*>(&_impl_.table_schema_),
          reinterpret_cast<char*>(&other->_impl_.table_schema_));
  swap(_impl_.write_type_, other->_impl_.write_type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteRel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[41]);
}

// ===================================================================

class FunctionArgument_Enum::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Empty& unspecified(const FunctionArgument_Enum* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Empty&
FunctionArgument_Enum::_Internal::unspecified(const FunctionArgument_Enum* msg) {
  return *msg->_impl_.enum_kind_.unspecified_;
}
void FunctionArgument_Enum::set_allocated_unspecified(::PROTOBUF_NAMESPACE_ID::Empty* unspecified) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_enum_kind();
  if (unspecified) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unspecified));
    if (message_arena != submessage_arena) {
      unspecified = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unspecified, submessage_arena);
    }
    set_has_unspecified();
    _impl_.enum_kind_.unspecified_ = unspecified;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.FunctionArgument.Enum.unspecified)
}
void FunctionArgument_Enum::clear_unspecified() {
  if (_internal_has_unspecified()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.enum_kind_.unspecified_;
    }
    clear_has_enum_kind();
  }
}
FunctionArgument_Enum::FunctionArgument_Enum(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.FunctionArgument.Enum)
}
FunctionArgument_Enum::FunctionArgument_Enum(const FunctionArgument_Enum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FunctionArgument_Enum* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.enum_kind_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_enum_kind();
  switch (from.enum_kind_case()) {
    case kSpecified: {
      _this->_internal_set_specified(from._internal_specified());
      break;
    }
    case kUnspecified: {
      _this->_internal_mutable_unspecified()->::PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(
          from._internal_unspecified());
      break;
    }
    case ENUM_KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.FunctionArgument.Enum)
}

inline void FunctionArgument_Enum::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.enum_kind_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_enum_kind();
}

FunctionArgument_Enum::~FunctionArgument_Enum() {
  // @@protoc_insertion_point(destructor:substrait.FunctionArgument.Enum)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FunctionArgument_Enum::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_enum_kind()) {
    clear_enum_kind();
  }
}

void FunctionArgument_Enum::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FunctionArgument_Enum::clear_enum_kind() {
// @@protoc_insertion_point(one_of_clear_start:substrait.FunctionArgument.Enum)
  switch (enum_kind_case()) {
    case kSpecified: {
      _impl_.enum_kind_.specified_.Destroy();
      break;
    }
    case kUnspecified: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.enum_kind_.unspecified_;
      }
      break;
    }
    case ENUM_KIND_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ENUM_KIND_NOT_SET;
}


void FunctionArgument_Enum::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.FunctionArgument.Enum)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_enum_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionArgument_Enum::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string specified = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_specified();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "substrait.FunctionArgument.Enum.specified"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Empty unspecified = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_unspecified(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionArgument_Enum::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.FunctionArgument.Enum)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string specified = 1;
  if (_internal_has_specified()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_specified().data(), static_cast<int>(this->_internal_specified().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.FunctionArgument.Enum.specified");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_specified(), target);
  }

  // .google.protobuf.Empty unspecified = 2;
  if (_internal_has_unspecified()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::unspecified(this),
        _Internal::unspecified(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.FunctionArgument.Enum)
  return target;
}

size_t FunctionArgument_Enum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.FunctionArgument.Enum)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (enum_kind_case()) {
    // string specified = 1;
    case kSpecified: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_specified());
      break;
    }
    // .google.protobuf.Empty unspecified = 2;
    case kUnspecified: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.enum_kind_.unspecified_);
      break;
    }
    case ENUM_KIND_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionArgument_Enum::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FunctionArgument_Enum::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionArgument_Enum::GetClassData() const { return &_class_data_; }


void FunctionArgument_Enum::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FunctionArgument_Enum*>(&to_msg);
  auto& from = static_cast<const FunctionArgument_Enum&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.FunctionArgument.Enum)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.enum_kind_case()) {
    case kSpecified: {
      _this->_internal_set_specified(from._internal_specified());
      break;
    }
    case kUnspecified: {
      _this->_internal_mutable_unspecified()->::PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(
          from._internal_unspecified());
      break;
    }
    case ENUM_KIND_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionArgument_Enum::CopyFrom(const FunctionArgument_Enum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.FunctionArgument.Enum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionArgument_Enum::IsInitialized() const {
  return true;
}

void FunctionArgument_Enum::InternalSwap(FunctionArgument_Enum* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.enum_kind_, other->_impl_.enum_kind_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionArgument_Enum::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[42]);
}

// ===================================================================

class FunctionArgument::_Internal {
 public:
  static const ::substrait::FunctionArgument_Enum& enum_(const FunctionArgument* msg);
  static const ::substrait::Type& type(const FunctionArgument* msg);
  static const ::substrait::Expression& value(const FunctionArgument* msg);
};

const ::substrait::FunctionArgument_Enum&
FunctionArgument::_Internal::enum_(const FunctionArgument* msg) {
  return *msg->_impl_.arg_type_.enum__;
}
const ::substrait::Type&
FunctionArgument::_Internal::type(const FunctionArgument* msg) {
  return *msg->_impl_.arg_type_.type_;
}
const ::substrait::Expression&
FunctionArgument::_Internal::value(const FunctionArgument* msg) {
  return *msg->_impl_.arg_type_.value_;
}
void FunctionArgument::set_allocated_enum_(::substrait::FunctionArgument_Enum* enum_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_arg_type();
  if (enum_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(enum_);
    if (message_arena != submessage_arena) {
      enum_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enum_, submessage_arena);
    }
    set_has_enum_();
    _impl_.arg_type_.enum__ = enum_;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.FunctionArgument.enum)
}
void FunctionArgument::set_allocated_type(::substrait::Type* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_arg_type();
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type));
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    set_has_type();
    _impl_.arg_type_.type_ = type;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.FunctionArgument.type)
}
void FunctionArgument::clear_type() {
  if (_internal_has_type()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.arg_type_.type_;
    }
    clear_has_arg_type();
  }
}
void FunctionArgument::set_allocated_value(::substrait::Expression* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_arg_type();
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    set_has_value();
    _impl_.arg_type_.value_ = value;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.FunctionArgument.value)
}
FunctionArgument::FunctionArgument(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.FunctionArgument)
}
FunctionArgument::FunctionArgument(const FunctionArgument& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FunctionArgument* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.arg_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_arg_type();
  switch (from.arg_type_case()) {
    case kEnum: {
      _this->_internal_mutable_enum_()->::substrait::FunctionArgument_Enum::MergeFrom(
          from._internal_enum_());
      break;
    }
    case kType: {
      _this->_internal_mutable_type()->::substrait::Type::MergeFrom(
          from._internal_type());
      break;
    }
    case kValue: {
      _this->_internal_mutable_value()->::substrait::Expression::MergeFrom(
          from._internal_value());
      break;
    }
    case ARG_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.FunctionArgument)
}

inline void FunctionArgument::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.arg_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_arg_type();
}

FunctionArgument::~FunctionArgument() {
  // @@protoc_insertion_point(destructor:substrait.FunctionArgument)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FunctionArgument::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_arg_type()) {
    clear_arg_type();
  }
}

void FunctionArgument::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FunctionArgument::clear_arg_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.FunctionArgument)
  switch (arg_type_case()) {
    case kEnum: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.arg_type_.enum__;
      }
      break;
    }
    case kType: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.arg_type_.type_;
      }
      break;
    }
    case kValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.arg_type_.value_;
      }
      break;
    }
    case ARG_TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ARG_TYPE_NOT_SET;
}


void FunctionArgument::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.FunctionArgument)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_arg_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionArgument::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.FunctionArgument.Enum enum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_enum_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionArgument::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.FunctionArgument)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.FunctionArgument.Enum enum = 1;
  if (_internal_has_enum_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::enum_(this),
        _Internal::enum_(this).GetCachedSize(), target, stream);
  }

  // .substrait.Type type = 2;
  if (_internal_has_type()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::type(this),
        _Internal::type(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression value = 3;
  if (_internal_has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.FunctionArgument)
  return target;
}

size_t FunctionArgument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.FunctionArgument)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (arg_type_case()) {
    // .substrait.FunctionArgument.Enum enum = 1;
    case kEnum: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.arg_type_.enum__);
      break;
    }
    // .substrait.Type type = 2;
    case kType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.arg_type_.type_);
      break;
    }
    // .substrait.Expression value = 3;
    case kValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.arg_type_.value_);
      break;
    }
    case ARG_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionArgument::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FunctionArgument::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionArgument::GetClassData() const { return &_class_data_; }


void FunctionArgument::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FunctionArgument*>(&to_msg);
  auto& from = static_cast<const FunctionArgument&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.FunctionArgument)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.arg_type_case()) {
    case kEnum: {
      _this->_internal_mutable_enum_()->::substrait::FunctionArgument_Enum::MergeFrom(
          from._internal_enum_());
      break;
    }
    case kType: {
      _this->_internal_mutable_type()->::substrait::Type::MergeFrom(
          from._internal_type());
      break;
    }
    case kValue: {
      _this->_internal_mutable_value()->::substrait::Expression::MergeFrom(
          from._internal_value());
      break;
    }
    case ARG_TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionArgument::CopyFrom(const FunctionArgument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.FunctionArgument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionArgument::IsInitialized() const {
  return true;
}

void FunctionArgument::InternalSwap(FunctionArgument* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.arg_type_, other->_impl_.arg_type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionArgument::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[43]);
}

// ===================================================================

class Expression_Enum_Empty::_Internal {
 public:
};

Expression_Enum_Empty::Expression_Enum_Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.Enum.Empty)
}
Expression_Enum_Empty::Expression_Enum_Empty(const Expression_Enum_Empty& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Expression_Enum_Empty* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.Enum.Empty)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_Enum_Empty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_Enum_Empty::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Expression_Enum_Empty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[44]);
}

// ===================================================================

class Expression_Enum::_Internal {
 public:
  static const ::substrait::Expression_Enum_Empty& unspecified(const Expression_Enum* msg);
};

const ::substrait::Expression_Enum_Empty&
Expression_Enum::_Internal::unspecified(const Expression_Enum* msg) {
  return *msg->_impl_.enum_kind_.unspecified_;
}
void Expression_Enum::set_allocated_unspecified(::substrait::Expression_Enum_Empty* unspecified) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_enum_kind();
  if (unspecified) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(unspecified);
    if (message_arena != submessage_arena) {
      unspecified = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unspecified, submessage_arena);
    }
    set_has_unspecified();
    _impl_.enum_kind_.unspecified_ = unspecified;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.Enum.unspecified)
}
Expression_Enum::Expression_Enum(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.Enum)
}
Expression_Enum::Expression_Enum(const Expression_Enum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_Enum* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.enum_kind_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_enum_kind();
  switch (from.enum_kind_case()) {
    case kSpecified: {
      _this->_internal_set_specified(from._internal_specified());
      break;
    }
    case kUnspecified: {
      _this->_internal_mutable_unspecified()->::substrait::Expression_Enum_Empty::MergeFrom(
          from._internal_unspecified());
      break;
    }
    case ENUM_KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.Enum)
}

inline void Expression_Enum::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.enum_kind_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_enum_kind();
}

Expression_Enum::~Expression_Enum() {
  // @@protoc_insertion_point(destructor:substrait.Expression.Enum)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_Enum::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_enum_kind()) {
    clear_enum_kind();
  }
}

void Expression_Enum::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_Enum::clear_enum_kind() {
// @@protoc_insertion_point(one_of_clear_start:substrait.Expression.Enum)
  switch (enum_kind_case()) {
    case kSpecified: {
      _impl_.enum_kind_.specified_.Destroy();
      break;
    }
    case kUnspecified: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.enum_kind_.unspecified_;
      }
      break;
    }
    case ENUM_KIND_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ENUM_KIND_NOT_SET;
}


void Expression_Enum::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.Enum)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_enum_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Enum::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string specified = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_specified();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "substrait.Expression.Enum.specified"));
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.Enum.Empty unspecified = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_unspecified(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_Enum::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.Enum)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string specified = 1;
  if (_internal_has_specified()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_specified().data(), static_cast<int>(this->_internal_specified().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.Expression.Enum.specified");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_specified(), target);
  }

  // .substrait.Expression.Enum.Empty unspecified = 2;
  if (_internal_has_unspecified()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::unspecified(this),
        _Internal::unspecified(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.Enum)
  return target;
}

size_t Expression_Enum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.Enum)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (enum_kind_case()) {
    // string specified = 1;
    case kSpecified: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_specified());
      break;
    }
    // .substrait.Expression.Enum.Empty unspecified = 2;
    case kUnspecified: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.enum_kind_.unspecified_);
      break;
    }
    case ENUM_KIND_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_Enum::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_Enum::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_Enum::GetClassData() const { return &_class_data_; }


void Expression_Enum::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_Enum*>(&to_msg);
  auto& from = static_cast<const Expression_Enum&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.Enum)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.enum_kind_case()) {
    case kSpecified: {
      _this->_internal_set_specified(from._internal_specified());
      break;
    }
    case kUnspecified: {
      _this->_internal_mutable_unspecified()->::substrait::Expression_Enum_Empty::MergeFrom(
          from._internal_unspecified());
      break;
    }
    case ENUM_KIND_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_Enum::CopyFrom(const Expression_Enum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.Enum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Enum::IsInitialized() const {
  return true;
}

void Expression_Enum::InternalSwap(Expression_Enum* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.enum_kind_, other->_impl_.enum_kind_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Enum::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[45]);
}

// ===================================================================

class Expression_Literal_VarChar::_Internal {
 public:
};

Expression_Literal_VarChar::Expression_Literal_VarChar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.Literal.VarChar)
}
Expression_Literal_VarChar::Expression_Literal_VarChar(const Expression_Literal_VarChar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_Literal_VarChar* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , decltype(_impl_.length_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.length_ = from._impl_.length_;
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.Literal.VarChar)
}

inline void Expression_Literal_VarChar::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , decltype(_impl_.length_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Expression_Literal_VarChar::~Expression_Literal_VarChar() {
  // @@protoc_insertion_point(destructor:substrait.Expression.Literal.VarChar)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_Literal_VarChar::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
}

void Expression_Literal_VarChar::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_Literal_VarChar::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.Literal.VarChar)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.ClearToEmpty();
  _impl_.length_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Literal_VarChar::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "substrait.Expression.Literal.VarChar.value"));
        } else
          goto handle_unusual;
        continue;
      // uint32 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_Literal_VarChar::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.Literal.VarChar)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.Expression.Literal.VarChar.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  // uint32 length = 2;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.Literal.VarChar)
  return target;
}

size_t Expression_Literal_VarChar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.Literal.VarChar)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // uint32 length = 2;
  if (this->_internal_length() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_Literal_VarChar::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_Literal_VarChar::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_Literal_VarChar::GetClassData() const { return &_class_data_; }


void Expression_Literal_VarChar::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_Literal_VarChar*>(&to_msg);
  auto& from = static_cast<const Expression_Literal_VarChar&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.Literal.VarChar)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_length() != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_Literal_VarChar::CopyFrom(const Expression_Literal_VarChar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.Literal.VarChar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Literal_VarChar::IsInitialized() const {
  return true;
}

void Expression_Literal_VarChar::InternalSwap(Expression_Literal_VarChar* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  swap(_impl_.length_, other->_impl_.length_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Literal_VarChar::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[46]);
}

// ===================================================================

class Expression_Literal_Decimal::_Internal {
 public:
};

Expression_Literal_Decimal::Expression_Literal_Decimal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.Literal.Decimal)
}
Expression_Literal_Decimal::Expression_Literal_Decimal(const Expression_Literal_Decimal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_Literal_Decimal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , decltype(_impl_.precision_){}
    , decltype(_impl_.scale_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.precision_, &from._impl_.precision_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.scale_) -
    reinterpret_cast<char*>(&_impl_.precision_)) + sizeof(_impl_.scale_));
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.Literal.Decimal)
}

inline void Expression_Literal_Decimal::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , decltype(_impl_.precision_){0}
    , decltype(_impl_.scale_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Expression_Literal_Decimal::~Expression_Literal_Decimal() {
  // @@protoc_insertion_point(destructor:substrait.Expression.Literal.Decimal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_Literal_Decimal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
}

void Expression_Literal_Decimal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_Literal_Decimal::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.Literal.Decimal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.ClearToEmpty();
  ::memset(&_impl_.precision_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.scale_) -
      reinterpret_cast<char*>(&_impl_.precision_)) + sizeof(_impl_.scale_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Literal_Decimal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 precision = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.precision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 scale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_Literal_Decimal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.Literal.Decimal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  // int32 precision = 2;
  if (this->_internal_precision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_precision(), target);
  }

  // int32 scale = 3;
  if (this->_internal_scale() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.Literal.Decimal)
  return target;
}

size_t Expression_Literal_Decimal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.Literal.Decimal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // int32 precision = 2;
  if (this->_internal_precision() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_precision());
  }

  // int32 scale = 3;
  if (this->_internal_scale() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_scale());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_Literal_Decimal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_Literal_Decimal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_Literal_Decimal::GetClassData() const { return &_class_data_; }


void Expression_Literal_Decimal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_Literal_Decimal*>(&to_msg);
  auto& from = static_cast<const Expression_Literal_Decimal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.Literal.Decimal)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_precision() != 0) {
    _this->_internal_set_precision(from._internal_precision());
  }
  if (from._internal_scale() != 0) {
    _this->_internal_set_scale(from._internal_scale());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_Literal_Decimal::CopyFrom(const Expression_Literal_Decimal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.Literal.Decimal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Literal_Decimal::IsInitialized() const {
  return true;
}

void Expression_Literal_Decimal::InternalSwap(Expression_Literal_Decimal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_Literal_Decimal, _impl_.scale_)
      + sizeof(Expression_Literal_Decimal::_impl_.scale_)
      - PROTOBUF_FIELD_OFFSET(Expression_Literal_Decimal, _impl_.precision_)>(
          reinterpret_cast<char*>(&_impl_.precision_),
          reinterpret_cast<char*>(&other->_impl_.precision_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Literal_Decimal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[47]);
}

// ===================================================================

class Expression_Literal_Map_KeyValue::_Internal {
 public:
  static const ::substrait::Expression_Literal& key(const Expression_Literal_Map_KeyValue* msg);
  static const ::substrait::Expression_Literal& value(const Expression_Literal_Map_KeyValue* msg);
};

const ::substrait::Expression_Literal&
Expression_Literal_Map_KeyValue::_Internal::key(const Expression_Literal_Map_KeyValue* msg) {
  return *msg->_impl_.key_;
}
const ::substrait::Expression_Literal&
Expression_Literal_Map_KeyValue::_Internal::value(const Expression_Literal_Map_KeyValue* msg) {
  return *msg->_impl_.value_;
}
Expression_Literal_Map_KeyValue::Expression_Literal_Map_KeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.Literal.Map.KeyValue)
}
Expression_Literal_Map_KeyValue::Expression_Literal_Map_KeyValue(const Expression_Literal_Map_KeyValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_Literal_Map_KeyValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){nullptr}
    , decltype(_impl_.value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key()) {
    _this->_impl_.key_ = new ::substrait::Expression_Literal(*from._impl_.key_);
  }
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::substrait::Expression_Literal(*from._impl_.value_);
  }
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.Literal.Map.KeyValue)
}

inline void Expression_Literal_Map_KeyValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){nullptr}
    , decltype(_impl_.value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Expression_Literal_Map_KeyValue::~Expression_Literal_Map_KeyValue() {
  // @@protoc_insertion_point(destructor:substrait.Expression.Literal.Map.KeyValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_Literal_Map_KeyValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.key_;
  if (this != internal_default_instance()) delete _impl_.value_;
}

void Expression_Literal_Map_KeyValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_Literal_Map_KeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.Literal.Map.KeyValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.key_ != nullptr) {
    delete _impl_.key_;
  }
  _impl_.key_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Literal_Map_KeyValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.Expression.Literal key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.Literal value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_Literal_Map_KeyValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.Literal.Map.KeyValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.Expression.Literal key = 1;
  if (this->_internal_has_key()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::key(this),
        _Internal::key(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression.Literal value = 2;
  if (this->_internal_has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.Literal.Map.KeyValue)
  return target;
}

size_t Expression_Literal_Map_KeyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.Literal.Map.KeyValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.Expression.Literal key = 1;
  if (this->_internal_has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.key_);
  }

  // .substrait.Expression.Literal value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.value_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_Literal_Map_KeyValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_Literal_Map_KeyValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_Literal_Map_KeyValue::GetClassData() const { return &_class_data_; }


void Expression_Literal_Map_KeyValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_Literal_Map_KeyValue*>(&to_msg);
  auto& from = static_cast<const Expression_Literal_Map_KeyValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.Literal.Map.KeyValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_key()) {
    _this->_internal_mutable_key()->::substrait::Expression_Literal::MergeFrom(
        from._internal_key());
  }
  if (from._internal_has_value()) {
    _this->_internal_mutable_value()->::substrait::Expression_Literal::MergeFrom(
        from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_Literal_Map_KeyValue::CopyFrom(const Expression_Literal_Map_KeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.Literal.Map.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Literal_Map_KeyValue::IsInitialized() const {
  return true;
}

void Expression_Literal_Map_KeyValue::InternalSwap(Expression_Literal_Map_KeyValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_Literal_Map_KeyValue, _impl_.value_)
      + sizeof(Expression_Literal_Map_KeyValue::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(Expression_Literal_Map_KeyValue, _impl_.key_)>(
          reinterpret_cast<char*>(&_impl_.key_),
          reinterpret_cast<char*>(&other->_impl_.key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Literal_Map_KeyValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[48]);
}

// ===================================================================

class Expression_Literal_Map::_Internal {
 public:
};

Expression_Literal_Map::Expression_Literal_Map(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.Literal.Map)
}
Expression_Literal_Map::Expression_Literal_Map(const Expression_Literal_Map& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_Literal_Map* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_values_){from._impl_.key_values_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.Literal.Map)
}

inline void Expression_Literal_Map::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_values_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Expression_Literal_Map::~Expression_Literal_Map() {
  // @@protoc_insertion_point(destructor:substrait.Expression.Literal.Map)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_Literal_Map::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_values_.~RepeatedPtrField();
}

void Expression_Literal_Map::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_Literal_Map::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.Literal.Map)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Literal_Map::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .substrait.Expression.Literal.Map.KeyValue key_values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_key_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_Literal_Map::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.Literal.Map)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.Expression.Literal.Map.KeyValue key_values = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_key_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_key_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.Literal.Map)
  return target;
}

size_t Expression_Literal_Map::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.Literal.Map)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.Expression.Literal.Map.KeyValue key_values = 1;
  total_size += 1UL * this->_internal_key_values_size();
  for (const auto& msg : this->_impl_.key_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_Literal_Map::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_Literal_Map::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_Literal_Map::GetClassData() const { return &_class_data_; }


void Expression_Literal_Map::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_Literal_Map*>(&to_msg);
  auto& from = static_cast<const Expression_Literal_Map&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.Literal.Map)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.key_values_.MergeFrom(from._impl_.key_values_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_Literal_Map::CopyFrom(const Expression_Literal_Map& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.Literal.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Literal_Map::IsInitialized() const {
  return true;
}

void Expression_Literal_Map::InternalSwap(Expression_Literal_Map* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.key_values_.InternalSwap(&other->_impl_.key_values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Literal_Map::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[49]);
}

// ===================================================================

class Expression_Literal_IntervalYearToMonth::_Internal {
 public:
};

Expression_Literal_IntervalYearToMonth::Expression_Literal_IntervalYearToMonth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.Literal.IntervalYearToMonth)
}
Expression_Literal_IntervalYearToMonth::Expression_Literal_IntervalYearToMonth(const Expression_Literal_IntervalYearToMonth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_Literal_IntervalYearToMonth* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.years_){}
    , decltype(_impl_.months_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.years_, &from._impl_.years_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.months_) -
    reinterpret_cast<char*>(&_impl_.years_)) + sizeof(_impl_.months_));
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.Literal.IntervalYearToMonth)
}

inline void Expression_Literal_IntervalYearToMonth::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.years_){0}
    , decltype(_impl_.months_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Expression_Literal_IntervalYearToMonth::~Expression_Literal_IntervalYearToMonth() {
  // @@protoc_insertion_point(destructor:substrait.Expression.Literal.IntervalYearToMonth)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_Literal_IntervalYearToMonth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Expression_Literal_IntervalYearToMonth::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_Literal_IntervalYearToMonth::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.Literal.IntervalYearToMonth)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.years_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.months_) -
      reinterpret_cast<char*>(&_impl_.years_)) + sizeof(_impl_.months_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Literal_IntervalYearToMonth::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 years = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.years_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 months = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.months_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_Literal_IntervalYearToMonth::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.Literal.IntervalYearToMonth)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 years = 1;
  if (this->_internal_years() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_years(), target);
  }

  // int32 months = 2;
  if (this->_internal_months() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_months(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.Literal.IntervalYearToMonth)
  return target;
}

size_t Expression_Literal_IntervalYearToMonth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.Literal.IntervalYearToMonth)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 years = 1;
  if (this->_internal_years() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_years());
  }

  // int32 months = 2;
  if (this->_internal_months() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_months());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_Literal_IntervalYearToMonth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_Literal_IntervalYearToMonth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_Literal_IntervalYearToMonth::GetClassData() const { return &_class_data_; }


void Expression_Literal_IntervalYearToMonth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_Literal_IntervalYearToMonth*>(&to_msg);
  auto& from = static_cast<const Expression_Literal_IntervalYearToMonth&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.Literal.IntervalYearToMonth)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_years() != 0) {
    _this->_internal_set_years(from._internal_years());
  }
  if (from._internal_months() != 0) {
    _this->_internal_set_months(from._internal_months());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_Literal_IntervalYearToMonth::CopyFrom(const Expression_Literal_IntervalYearToMonth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.Literal.IntervalYearToMonth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Literal_IntervalYearToMonth::IsInitialized() const {
  return true;
}

void Expression_Literal_IntervalYearToMonth::InternalSwap(Expression_Literal_IntervalYearToMonth* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_Literal_IntervalYearToMonth, _impl_.months_)
      + sizeof(Expression_Literal_IntervalYearToMonth::_impl_.months_)
      - PROTOBUF_FIELD_OFFSET(Expression_Literal_IntervalYearToMonth, _impl_.years_)>(
          reinterpret_cast<char*>(&_impl_.years_),
          reinterpret_cast<char*>(&other->_impl_.years_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Literal_IntervalYearToMonth::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[50]);
}

// ===================================================================

class Expression_Literal_IntervalDayToSecond::_Internal {
 public:
};

Expression_Literal_IntervalDayToSecond::Expression_Literal_IntervalDayToSecond(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.Literal.IntervalDayToSecond)
}
Expression_Literal_IntervalDayToSecond::Expression_Literal_IntervalDayToSecond(const Expression_Literal_IntervalDayToSecond& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_Literal_IntervalDayToSecond* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.days_){}
    , decltype(_impl_.seconds_){}
    , decltype(_impl_.microseconds_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.days_, &from._impl_.days_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.microseconds_) -
    reinterpret_cast<char*>(&_impl_.days_)) + sizeof(_impl_.microseconds_));
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.Literal.IntervalDayToSecond)
}

inline void Expression_Literal_IntervalDayToSecond::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.days_){0}
    , decltype(_impl_.seconds_){0}
    , decltype(_impl_.microseconds_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Expression_Literal_IntervalDayToSecond::~Expression_Literal_IntervalDayToSecond() {
  // @@protoc_insertion_point(destructor:substrait.Expression.Literal.IntervalDayToSecond)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_Literal_IntervalDayToSecond::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Expression_Literal_IntervalDayToSecond::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_Literal_IntervalDayToSecond::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.Literal.IntervalDayToSecond)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.days_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.microseconds_) -
      reinterpret_cast<char*>(&_impl_.days_)) + sizeof(_impl_.microseconds_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Literal_IntervalDayToSecond::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 days = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.days_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 seconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 microseconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.microseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_Literal_IntervalDayToSecond::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.Literal.IntervalDayToSecond)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 days = 1;
  if (this->_internal_days() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_days(), target);
  }

  // int32 seconds = 2;
  if (this->_internal_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_seconds(), target);
  }

  // int32 microseconds = 3;
  if (this->_internal_microseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_microseconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.Literal.IntervalDayToSecond)
  return target;
}

size_t Expression_Literal_IntervalDayToSecond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.Literal.IntervalDayToSecond)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 days = 1;
  if (this->_internal_days() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_days());
  }

  // int32 seconds = 2;
  if (this->_internal_seconds() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_seconds());
  }

  // int32 microseconds = 3;
  if (this->_internal_microseconds() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_microseconds());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_Literal_IntervalDayToSecond::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_Literal_IntervalDayToSecond::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_Literal_IntervalDayToSecond::GetClassData() const { return &_class_data_; }


void Expression_Literal_IntervalDayToSecond::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_Literal_IntervalDayToSecond*>(&to_msg);
  auto& from = static_cast<const Expression_Literal_IntervalDayToSecond&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.Literal.IntervalDayToSecond)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_days() != 0) {
    _this->_internal_set_days(from._internal_days());
  }
  if (from._internal_seconds() != 0) {
    _this->_internal_set_seconds(from._internal_seconds());
  }
  if (from._internal_microseconds() != 0) {
    _this->_internal_set_microseconds(from._internal_microseconds());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_Literal_IntervalDayToSecond::CopyFrom(const Expression_Literal_IntervalDayToSecond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.Literal.IntervalDayToSecond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Literal_IntervalDayToSecond::IsInitialized() const {
  return true;
}

void Expression_Literal_IntervalDayToSecond::InternalSwap(Expression_Literal_IntervalDayToSecond* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_Literal_IntervalDayToSecond, _impl_.microseconds_)
      + sizeof(Expression_Literal_IntervalDayToSecond::_impl_.microseconds_)
      - PROTOBUF_FIELD_OFFSET(Expression_Literal_IntervalDayToSecond, _impl_.days_)>(
          reinterpret_cast<char*>(&_impl_.days_),
          reinterpret_cast<char*>(&other->_impl_.days_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Literal_IntervalDayToSecond::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[51]);
}

// ===================================================================

class Expression_Literal_Struct::_Internal {
 public:
};

Expression_Literal_Struct::Expression_Literal_Struct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.Literal.Struct)
}
Expression_Literal_Struct::Expression_Literal_Struct(const Expression_Literal_Struct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_Literal_Struct* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_){from._impl_.fields_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.Literal.Struct)
}

inline void Expression_Literal_Struct::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Expression_Literal_Struct::~Expression_Literal_Struct() {
  // @@protoc_insertion_point(destructor:substrait.Expression.Literal.Struct)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_Literal_Struct::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fields_.~RepeatedPtrField();
}

void Expression_Literal_Struct::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_Literal_Struct::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.Literal.Struct)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fields_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Literal_Struct::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .substrait.Expression.Literal fields = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_Literal_Struct::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.Literal.Struct)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.Expression.Literal fields = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fields_size()); i < n; i++) {
    const auto& repfield = this->_internal_fields(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.Literal.Struct)
  return target;
}

size_t Expression_Literal_Struct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.Literal.Struct)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.Expression.Literal fields = 1;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->_impl_.fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_Literal_Struct::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_Literal_Struct::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_Literal_Struct::GetClassData() const { return &_class_data_; }


void Expression_Literal_Struct::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_Literal_Struct*>(&to_msg);
  auto& from = static_cast<const Expression_Literal_Struct&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.Literal.Struct)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.fields_.MergeFrom(from._impl_.fields_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_Literal_Struct::CopyFrom(const Expression_Literal_Struct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.Literal.Struct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Literal_Struct::IsInitialized() const {
  return true;
}

void Expression_Literal_Struct::InternalSwap(Expression_Literal_Struct* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.fields_.InternalSwap(&other->_impl_.fields_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Literal_Struct::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[52]);
}

// ===================================================================

class Expression_Literal_List::_Internal {
 public:
};

Expression_Literal_List::Expression_Literal_List(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.Literal.List)
}
Expression_Literal_List::Expression_Literal_List(const Expression_Literal_List& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_Literal_List* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.Literal.List)
}

inline void Expression_Literal_List::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Expression_Literal_List::~Expression_Literal_List() {
  // @@protoc_insertion_point(destructor:substrait.Expression.Literal.List)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_Literal_List::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedPtrField();
}

void Expression_Literal_List::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_Literal_List::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.Literal.List)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Literal_List::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .substrait.Expression.Literal values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_Literal_List::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.Literal.List)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.Expression.Literal values = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.Literal.List)
  return target;
}

size_t Expression_Literal_List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.Literal.List)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.Expression.Literal values = 1;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->_impl_.values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_Literal_List::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_Literal_List::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_Literal_List::GetClassData() const { return &_class_data_; }


void Expression_Literal_List::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_Literal_List*>(&to_msg);
  auto& from = static_cast<const Expression_Literal_List&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.Literal.List)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_Literal_List::CopyFrom(const Expression_Literal_List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.Literal.List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Literal_List::IsInitialized() const {
  return true;
}

void Expression_Literal_List::InternalSwap(Expression_Literal_List* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Literal_List::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[53]);
}

// ===================================================================

class Expression_Literal_UserDefined::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& value(const Expression_Literal_UserDefined* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
Expression_Literal_UserDefined::_Internal::value(const Expression_Literal_UserDefined* msg) {
  return *msg->_impl_.value_;
}
void Expression_Literal_UserDefined::clear_type_parameters() {
  _impl_.type_parameters_.Clear();
}
void Expression_Literal_UserDefined::clear_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
}
Expression_Literal_UserDefined::Expression_Literal_UserDefined(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.Literal.UserDefined)
}
Expression_Literal_UserDefined::Expression_Literal_UserDefined(const Expression_Literal_UserDefined& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_Literal_UserDefined* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_parameters_){from._impl_.type_parameters_}
    , decltype(_impl_.value_){nullptr}
    , decltype(_impl_.type_reference_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.value_);
  }
  _this->_impl_.type_reference_ = from._impl_.type_reference_;
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.Literal.UserDefined)
}

inline void Expression_Literal_UserDefined::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_parameters_){arena}
    , decltype(_impl_.value_){nullptr}
    , decltype(_impl_.type_reference_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Expression_Literal_UserDefined::~Expression_Literal_UserDefined() {
  // @@protoc_insertion_point(destructor:substrait.Expression.Literal.UserDefined)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_Literal_UserDefined::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_parameters_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.value_;
}

void Expression_Literal_UserDefined::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_Literal_UserDefined::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.Literal.UserDefined)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_parameters_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
  _impl_.type_reference_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Literal_UserDefined::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .substrait.Type.Parameter type_parameters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_type_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_Literal_UserDefined::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.Literal.UserDefined)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type_reference = 1;
  if (this->_internal_type_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type_reference(), target);
  }

  // .google.protobuf.Any value = 2;
  if (this->_internal_has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  // repeated .substrait.Type.Parameter type_parameters = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_type_parameters_size()); i < n; i++) {
    const auto& repfield = this->_internal_type_parameters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.Literal.UserDefined)
  return target;
}

size_t Expression_Literal_UserDefined::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.Literal.UserDefined)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.Type.Parameter type_parameters = 3;
  total_size += 1UL * this->_internal_type_parameters_size();
  for (const auto& msg : this->_impl_.type_parameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Any value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.value_);
  }

  // uint32 type_reference = 1;
  if (this->_internal_type_reference() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type_reference());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_Literal_UserDefined::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_Literal_UserDefined::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_Literal_UserDefined::GetClassData() const { return &_class_data_; }


void Expression_Literal_UserDefined::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_Literal_UserDefined*>(&to_msg);
  auto& from = static_cast<const Expression_Literal_UserDefined&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.Literal.UserDefined)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.type_parameters_.MergeFrom(from._impl_.type_parameters_);
  if (from._internal_has_value()) {
    _this->_internal_mutable_value()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_value());
  }
  if (from._internal_type_reference() != 0) {
    _this->_internal_set_type_reference(from._internal_type_reference());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_Literal_UserDefined::CopyFrom(const Expression_Literal_UserDefined& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.Literal.UserDefined)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Literal_UserDefined::IsInitialized() const {
  return true;
}

void Expression_Literal_UserDefined::InternalSwap(Expression_Literal_UserDefined* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.type_parameters_.InternalSwap(&other->_impl_.type_parameters_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_Literal_UserDefined, _impl_.type_reference_)
      + sizeof(Expression_Literal_UserDefined::_impl_.type_reference_)
      - PROTOBUF_FIELD_OFFSET(Expression_Literal_UserDefined, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Literal_UserDefined::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[54]);
}

// ===================================================================

class Expression_Literal::_Internal {
 public:
  static const ::substrait::Expression_Literal_IntervalYearToMonth& interval_year_to_month(const Expression_Literal* msg);
  static const ::substrait::Expression_Literal_IntervalDayToSecond& interval_day_to_second(const Expression_Literal* msg);
  static const ::substrait::Expression_Literal_VarChar& var_char(const Expression_Literal* msg);
  static const ::substrait::Expression_Literal_Decimal& decimal(const Expression_Literal* msg);
  static const ::substrait::Expression_Literal_Struct& struct_(const Expression_Literal* msg);
  static const ::substrait::Expression_Literal_Map& map(const Expression_Literal* msg);
  static const ::substrait::Type& null(const Expression_Literal* msg);
  static const ::substrait::Expression_Literal_List& list(const Expression_Literal* msg);
  static const ::substrait::Type_List& empty_list(const Expression_Literal* msg);
  static const ::substrait::Type_Map& empty_map(const Expression_Literal* msg);
  static const ::substrait::Expression_Literal_UserDefined& user_defined(const Expression_Literal* msg);
};

const ::substrait::Expression_Literal_IntervalYearToMonth&
Expression_Literal::_Internal::interval_year_to_month(const Expression_Literal* msg) {
  return *msg->_impl_.literal_type_.interval_year_to_month_;
}
const ::substrait::Expression_Literal_IntervalDayToSecond&
Expression_Literal::_Internal::interval_day_to_second(const Expression_Literal* msg) {
  return *msg->_impl_.literal_type_.interval_day_to_second_;
}
const ::substrait::Expression_Literal_VarChar&
Expression_Literal::_Internal::var_char(const Expression_Literal* msg) {
  return *msg->_impl_.literal_type_.var_char_;
}
const ::substrait::Expression_Literal_Decimal&
Expression_Literal::_Internal::decimal(const Expression_Literal* msg) {
  return *msg->_impl_.literal_type_.decimal_;
}
const ::substrait::Expression_Literal_Struct&
Expression_Literal::_Internal::struct_(const Expression_Literal* msg) {
  return *msg->_impl_.literal_type_.struct__;
}
const ::substrait::Expression_Literal_Map&
Expression_Literal::_Internal::map(const Expression_Literal* msg) {
  return *msg->_impl_.literal_type_.map_;
}
const ::substrait::Type&
Expression_Literal::_Internal::null(const Expression_Literal* msg) {
  return *msg->_impl_.literal_type_.null_;
}
const ::substrait::Expression_Literal_List&
Expression_Literal::_Internal::list(const Expression_Literal* msg) {
  return *msg->_impl_.literal_type_.list_;
}
const ::substrait::Type_List&
Expression_Literal::_Internal::empty_list(const Expression_Literal* msg) {
  return *msg->_impl_.literal_type_.empty_list_;
}
const ::substrait::Type_Map&
Expression_Literal::_Internal::empty_map(const Expression_Literal* msg) {
  return *msg->_impl_.literal_type_.empty_map_;
}
const ::substrait::Expression_Literal_UserDefined&
Expression_Literal::_Internal::user_defined(const Expression_Literal* msg) {
  return *msg->_impl_.literal_type_.user_defined_;
}
void Expression_Literal::set_allocated_interval_year_to_month(::substrait::Expression_Literal_IntervalYearToMonth* interval_year_to_month) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_literal_type();
  if (interval_year_to_month) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(interval_year_to_month);
    if (message_arena != submessage_arena) {
      interval_year_to_month = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval_year_to_month, submessage_arena);
    }
    set_has_interval_year_to_month();
    _impl_.literal_type_.interval_year_to_month_ = interval_year_to_month;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.Literal.interval_year_to_month)
}
void Expression_Literal::set_allocated_interval_day_to_second(::substrait::Expression_Literal_IntervalDayToSecond* interval_day_to_second) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_literal_type();
  if (interval_day_to_second) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(interval_day_to_second);
    if (message_arena != submessage_arena) {
      interval_day_to_second = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval_day_to_second, submessage_arena);
    }
    set_has_interval_day_to_second();
    _impl_.literal_type_.interval_day_to_second_ = interval_day_to_second;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.Literal.interval_day_to_second)
}
void Expression_Literal::set_allocated_var_char(::substrait::Expression_Literal_VarChar* var_char) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_literal_type();
  if (var_char) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(var_char);
    if (message_arena != submessage_arena) {
      var_char = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, var_char, submessage_arena);
    }
    set_has_var_char();
    _impl_.literal_type_.var_char_ = var_char;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.Literal.var_char)
}
void Expression_Literal::set_allocated_decimal(::substrait::Expression_Literal_Decimal* decimal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_literal_type();
  if (decimal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(decimal);
    if (message_arena != submessage_arena) {
      decimal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, decimal, submessage_arena);
    }
    set_has_decimal();
    _impl_.literal_type_.decimal_ = decimal;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.Literal.decimal)
}
void Expression_Literal::set_allocated_struct_(::substrait::Expression_Literal_Struct* struct_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_literal_type();
  if (struct_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(struct_);
    if (message_arena != submessage_arena) {
      struct_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_, submessage_arena);
    }
    set_has_struct_();
    _impl_.literal_type_.struct__ = struct_;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.Literal.struct)
}
void Expression_Literal::set_allocated_map(::substrait::Expression_Literal_Map* map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_literal_type();
  if (map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(map);
    if (message_arena != submessage_arena) {
      map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map, submessage_arena);
    }
    set_has_map();
    _impl_.literal_type_.map_ = map;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.Literal.map)
}
void Expression_Literal::set_allocated_null(::substrait::Type* null) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_literal_type();
  if (null) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(null));
    if (message_arena != submessage_arena) {
      null = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, null, submessage_arena);
    }
    set_has_null();
    _impl_.literal_type_.null_ = null;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.Literal.null)
}
void Expression_Literal::clear_null() {
  if (_internal_has_null()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.literal_type_.null_;
    }
    clear_has_literal_type();
  }
}
void Expression_Literal::set_allocated_list(::substrait::Expression_Literal_List* list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_literal_type();
  if (list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(list);
    if (message_arena != submessage_arena) {
      list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list, submessage_arena);
    }
    set_has_list();
    _impl_.literal_type_.list_ = list;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.Literal.list)
}
void Expression_Literal::set_allocated_empty_list(::substrait::Type_List* empty_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_literal_type();
  if (empty_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(empty_list));
    if (message_arena != submessage_arena) {
      empty_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, empty_list, submessage_arena);
    }
    set_has_empty_list();
    _impl_.literal_type_.empty_list_ = empty_list;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.Literal.empty_list)
}
void Expression_Literal::clear_empty_list() {
  if (_internal_has_empty_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.literal_type_.empty_list_;
    }
    clear_has_literal_type();
  }
}
void Expression_Literal::set_allocated_empty_map(::substrait::Type_Map* empty_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_literal_type();
  if (empty_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(empty_map));
    if (message_arena != submessage_arena) {
      empty_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, empty_map, submessage_arena);
    }
    set_has_empty_map();
    _impl_.literal_type_.empty_map_ = empty_map;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.Literal.empty_map)
}
void Expression_Literal::clear_empty_map() {
  if (_internal_has_empty_map()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.literal_type_.empty_map_;
    }
    clear_has_literal_type();
  }
}
void Expression_Literal::set_allocated_user_defined(::substrait::Expression_Literal_UserDefined* user_defined) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_literal_type();
  if (user_defined) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user_defined);
    if (message_arena != submessage_arena) {
      user_defined = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_defined, submessage_arena);
    }
    set_has_user_defined();
    _impl_.literal_type_.user_defined_ = user_defined;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.Literal.user_defined)
}
Expression_Literal::Expression_Literal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.Literal)
}
Expression_Literal::Expression_Literal(const Expression_Literal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_Literal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nullable_){}
    , decltype(_impl_.type_variation_reference_){}
    , decltype(_impl_.literal_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.nullable_, &from._impl_.nullable_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_variation_reference_) -
    reinterpret_cast<char*>(&_impl_.nullable_)) + sizeof(_impl_.type_variation_reference_));
  clear_has_literal_type();
  switch (from.literal_type_case()) {
    case kBoolean: {
      _this->_internal_set_boolean(from._internal_boolean());
      break;
    }
    case kI8: {
      _this->_internal_set_i8(from._internal_i8());
      break;
    }
    case kI16: {
      _this->_internal_set_i16(from._internal_i16());
      break;
    }
    case kI32: {
      _this->_internal_set_i32(from._internal_i32());
      break;
    }
    case kI64: {
      _this->_internal_set_i64(from._internal_i64());
      break;
    }
    case kFp32: {
      _this->_internal_set_fp32(from._internal_fp32());
      break;
    }
    case kFp64: {
      _this->_internal_set_fp64(from._internal_fp64());
      break;
    }
    case kString: {
      _this->_internal_set_string(from._internal_string());
      break;
    }
    case kBinary: {
      _this->_internal_set_binary(from._internal_binary());
      break;
    }
    case kTimestamp: {
      _this->_internal_set_timestamp(from._internal_timestamp());
      break;
    }
    case kDate: {
      _this->_internal_set_date(from._internal_date());
      break;
    }
    case kTime: {
      _this->_internal_set_time(from._internal_time());
      break;
    }
    case kIntervalYearToMonth: {
      _this->_internal_mutable_interval_year_to_month()->::substrait::Expression_Literal_IntervalYearToMonth::MergeFrom(
          from._internal_interval_year_to_month());
      break;
    }
    case kIntervalDayToSecond: {
      _this->_internal_mutable_interval_day_to_second()->::substrait::Expression_Literal_IntervalDayToSecond::MergeFrom(
          from._internal_interval_day_to_second());
      break;
    }
    case kFixedChar: {
      _this->_internal_set_fixed_char(from._internal_fixed_char());
      break;
    }
    case kVarChar: {
      _this->_internal_mutable_var_char()->::substrait::Expression_Literal_VarChar::MergeFrom(
          from._internal_var_char());
      break;
    }
    case kFixedBinary: {
      _this->_internal_set_fixed_binary(from._internal_fixed_binary());
      break;
    }
    case kDecimal: {
      _this->_internal_mutable_decimal()->::substrait::Expression_Literal_Decimal::MergeFrom(
          from._internal_decimal());
      break;
    }
    case kStruct: {
      _this->_internal_mutable_struct_()->::substrait::Expression_Literal_Struct::MergeFrom(
          from._internal_struct_());
      break;
    }
    case kMap: {
      _this->_internal_mutable_map()->::substrait::Expression_Literal_Map::MergeFrom(
          from._internal_map());
      break;
    }
    case kTimestampTz: {
      _this->_internal_set_timestamp_tz(from._internal_timestamp_tz());
      break;
    }
    case kUuid: {
      _this->_internal_set_uuid(from._internal_uuid());
      break;
    }
    case kNull: {
      _this->_internal_mutable_null()->::substrait::Type::MergeFrom(
          from._internal_null());
      break;
    }
    case kList: {
      _this->_internal_mutable_list()->::substrait::Expression_Literal_List::MergeFrom(
          from._internal_list());
      break;
    }
    case kEmptyList: {
      _this->_internal_mutable_empty_list()->::substrait::Type_List::MergeFrom(
          from._internal_empty_list());
      break;
    }
    case kEmptyMap: {
      _this->_internal_mutable_empty_map()->::substrait::Type_Map::MergeFrom(
          from._internal_empty_map());
      break;
    }
    case kUserDefined: {
      _this->_internal_mutable_user_defined()->::substrait::Expression_Literal_UserDefined::MergeFrom(
          from._internal_user_defined());
      break;
    }
    case LITERAL_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.Literal)
}

inline void Expression_Literal::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nullable_){false}
    , decltype(_impl_.type_variation_reference_){0u}
    , decltype(_impl_.literal_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_literal_type();
}

Expression_Literal::~Expression_Literal() {
  // @@protoc_insertion_point(destructor:substrait.Expression.Literal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_Literal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_literal_type()) {
    clear_literal_type();
  }
}

void Expression_Literal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_Literal::clear_literal_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.Expression.Literal)
  switch (literal_type_case()) {
    case kBoolean: {
      // No need to clear
      break;
    }
    case kI8: {
      // No need to clear
      break;
    }
    case kI16: {
      // No need to clear
      break;
    }
    case kI32: {
      // No need to clear
      break;
    }
    case kI64: {
      // No need to clear
      break;
    }
    case kFp32: {
      // No need to clear
      break;
    }
    case kFp64: {
      // No need to clear
      break;
    }
    case kString: {
      _impl_.literal_type_.string_.Destroy();
      break;
    }
    case kBinary: {
      _impl_.literal_type_.binary_.Destroy();
      break;
    }
    case kTimestamp: {
      // No need to clear
      break;
    }
    case kDate: {
      // No need to clear
      break;
    }
    case kTime: {
      // No need to clear
      break;
    }
    case kIntervalYearToMonth: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.literal_type_.interval_year_to_month_;
      }
      break;
    }
    case kIntervalDayToSecond: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.literal_type_.interval_day_to_second_;
      }
      break;
    }
    case kFixedChar: {
      _impl_.literal_type_.fixed_char_.Destroy();
      break;
    }
    case kVarChar: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.literal_type_.var_char_;
      }
      break;
    }
    case kFixedBinary: {
      _impl_.literal_type_.fixed_binary_.Destroy();
      break;
    }
    case kDecimal: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.literal_type_.decimal_;
      }
      break;
    }
    case kStruct: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.literal_type_.struct__;
      }
      break;
    }
    case kMap: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.literal_type_.map_;
      }
      break;
    }
    case kTimestampTz: {
      // No need to clear
      break;
    }
    case kUuid: {
      _impl_.literal_type_.uuid_.Destroy();
      break;
    }
    case kNull: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.literal_type_.null_;
      }
      break;
    }
    case kList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.literal_type_.list_;
      }
      break;
    }
    case kEmptyList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.literal_type_.empty_list_;
      }
      break;
    }
    case kEmptyMap: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.literal_type_.empty_map_;
      }
      break;
    }
    case kUserDefined: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.literal_type_.user_defined_;
      }
      break;
    }
    case LITERAL_TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = LITERAL_TYPE_NOT_SET;
}


void Expression_Literal::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.Literal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.nullable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_variation_reference_) -
      reinterpret_cast<char*>(&_impl_.nullable_)) + sizeof(_impl_.type_variation_reference_));
  clear_literal_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Literal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool boolean = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_boolean(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 i8 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_i8(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 i16 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_i16(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 i32 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_set_i32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 i64 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _internal_set_i64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float fp32 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _internal_set_fp32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double fp64 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _internal_set_fp64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string string = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "substrait.Expression.Literal.string"));
        } else
          goto handle_unusual;
        continue;
      // bytes binary = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_binary();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 date = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _internal_set_date(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 time = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _internal_set_time(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.Literal.IntervalYearToMonth interval_year_to_month = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval_year_to_month(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.Literal.IntervalDayToSecond interval_day_to_second = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval_day_to_second(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string fixed_char = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_fixed_char();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "substrait.Expression.Literal.fixed_char"));
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.Literal.VarChar var_char = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_var_char(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes fixed_binary = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_fixed_binary();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.Literal.Decimal decimal = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_decimal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.Literal.Struct struct = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.Literal.Map map = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp_tz = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _internal_set_timestamp_tz(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes uuid = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Type null = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_null(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.Literal.List list = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Type.List empty_list = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_empty_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Type.Map empty_map = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_empty_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.Literal.UserDefined user_defined = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_defined(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool nullable = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.nullable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 type_variation_reference = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_Literal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.Literal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool boolean = 1;
  if (_internal_has_boolean()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_boolean(), target);
  }

  // int32 i8 = 2;
  if (_internal_has_i8()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_i8(), target);
  }

  // int32 i16 = 3;
  if (_internal_has_i16()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_i16(), target);
  }

  // int32 i32 = 5;
  if (_internal_has_i32()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_i32(), target);
  }

  // int64 i64 = 7;
  if (_internal_has_i64()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_i64(), target);
  }

  // float fp32 = 10;
  if (_internal_has_fp32()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_fp32(), target);
  }

  // double fp64 = 11;
  if (_internal_has_fp64()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_fp64(), target);
  }

  // string string = 12;
  if (_internal_has_string()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string().data(), static_cast<int>(this->_internal_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.Expression.Literal.string");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_string(), target);
  }

  // bytes binary = 13;
  if (_internal_has_binary()) {
    target = stream->WriteBytesMaybeAliased(
        13, this->_internal_binary(), target);
  }

  // int64 timestamp = 14;
  if (_internal_has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_timestamp(), target);
  }

  // int32 date = 16;
  if (_internal_has_date()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_date(), target);
  }

  // int64 time = 17;
  if (_internal_has_time()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(17, this->_internal_time(), target);
  }

  // .substrait.Expression.Literal.IntervalYearToMonth interval_year_to_month = 19;
  if (_internal_has_interval_year_to_month()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::interval_year_to_month(this),
        _Internal::interval_year_to_month(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression.Literal.IntervalDayToSecond interval_day_to_second = 20;
  if (_internal_has_interval_day_to_second()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::interval_day_to_second(this),
        _Internal::interval_day_to_second(this).GetCachedSize(), target, stream);
  }

  // string fixed_char = 21;
  if (_internal_has_fixed_char()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fixed_char().data(), static_cast<int>(this->_internal_fixed_char().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.Expression.Literal.fixed_char");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_fixed_char(), target);
  }

  // .substrait.Expression.Literal.VarChar var_char = 22;
  if (_internal_has_var_char()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::var_char(this),
        _Internal::var_char(this).GetCachedSize(), target, stream);
  }

  // bytes fixed_binary = 23;
  if (_internal_has_fixed_binary()) {
    target = stream->WriteBytesMaybeAliased(
        23, this->_internal_fixed_binary(), target);
  }

  // .substrait.Expression.Literal.Decimal decimal = 24;
  if (_internal_has_decimal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::decimal(this),
        _Internal::decimal(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression.Literal.Struct struct = 25;
  if (_internal_has_struct_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::struct_(this),
        _Internal::struct_(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression.Literal.Map map = 26;
  if (_internal_has_map()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::map(this),
        _Internal::map(this).GetCachedSize(), target, stream);
  }

  // int64 timestamp_tz = 27;
  if (_internal_has_timestamp_tz()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(27, this->_internal_timestamp_tz(), target);
  }

  // bytes uuid = 28;
  if (_internal_has_uuid()) {
    target = stream->WriteBytesMaybeAliased(
        28, this->_internal_uuid(), target);
  }

  // .substrait.Type null = 29;
  if (_internal_has_null()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::null(this),
        _Internal::null(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression.Literal.List list = 30;
  if (_internal_has_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::list(this),
        _Internal::list(this).GetCachedSize(), target, stream);
  }

  // .substrait.Type.List empty_list = 31;
  if (_internal_has_empty_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, _Internal::empty_list(this),
        _Internal::empty_list(this).GetCachedSize(), target, stream);
  }

  // .substrait.Type.Map empty_map = 32;
  if (_internal_has_empty_map()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, _Internal::empty_map(this),
        _Internal::empty_map(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression.Literal.UserDefined user_defined = 33;
  if (_internal_has_user_defined()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, _Internal::user_defined(this),
        _Internal::user_defined(this).GetCachedSize(), target, stream);
  }

  // bool nullable = 50;
  if (this->_internal_nullable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(50, this->_internal_nullable(), target);
  }

  // uint32 type_variation_reference = 51;
  if (this->_internal_type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(51, this->_internal_type_variation_reference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.Literal)
  return target;
}

size_t Expression_Literal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.Literal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool nullable = 50;
  if (this->_internal_nullable() != 0) {
    total_size += 2 + 1;
  }

  // uint32 type_variation_reference = 51;
  if (this->_internal_type_variation_reference() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_type_variation_reference());
  }

  switch (literal_type_case()) {
    // bool boolean = 1;
    case kBoolean: {
      total_size += 1 + 1;
      break;
    }
    // int32 i8 = 2;
    case kI8: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_i8());
      break;
    }
    // int32 i16 = 3;
    case kI16: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_i16());
      break;
    }
    // int32 i32 = 5;
    case kI32: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_i32());
      break;
    }
    // int64 i64 = 7;
    case kI64: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_i64());
      break;
    }
    // float fp32 = 10;
    case kFp32: {
      total_size += 1 + 4;
      break;
    }
    // double fp64 = 11;
    case kFp64: {
      total_size += 1 + 8;
      break;
    }
    // string string = 12;
    case kString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string());
      break;
    }
    // bytes binary = 13;
    case kBinary: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_binary());
      break;
    }
    // int64 timestamp = 14;
    case kTimestamp: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
      break;
    }
    // int32 date = 16;
    case kDate: {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_date());
      break;
    }
    // int64 time = 17;
    case kTime: {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_time());
      break;
    }
    // .substrait.Expression.Literal.IntervalYearToMonth interval_year_to_month = 19;
    case kIntervalYearToMonth: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.literal_type_.interval_year_to_month_);
      break;
    }
    // .substrait.Expression.Literal.IntervalDayToSecond interval_day_to_second = 20;
    case kIntervalDayToSecond: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.literal_type_.interval_day_to_second_);
      break;
    }
    // string fixed_char = 21;
    case kFixedChar: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fixed_char());
      break;
    }
    // .substrait.Expression.Literal.VarChar var_char = 22;
    case kVarChar: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.literal_type_.var_char_);
      break;
    }
    // bytes fixed_binary = 23;
    case kFixedBinary: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_fixed_binary());
      break;
    }
    // .substrait.Expression.Literal.Decimal decimal = 24;
    case kDecimal: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.literal_type_.decimal_);
      break;
    }
    // .substrait.Expression.Literal.Struct struct = 25;
    case kStruct: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.literal_type_.struct__);
      break;
    }
    // .substrait.Expression.Literal.Map map = 26;
    case kMap: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.literal_type_.map_);
      break;
    }
    // int64 timestamp_tz = 27;
    case kTimestampTz: {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_timestamp_tz());
      break;
    }
    // bytes uuid = 28;
    case kUuid: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_uuid());
      break;
    }
    // .substrait.Type null = 29;
    case kNull: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.literal_type_.null_);
      break;
    }
    // .substrait.Expression.Literal.List list = 30;
    case kList: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.literal_type_.list_);
      break;
    }
    // .substrait.Type.List empty_list = 31;
    case kEmptyList: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.literal_type_.empty_list_);
      break;
    }
    // .substrait.Type.Map empty_map = 32;
    case kEmptyMap: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.literal_type_.empty_map_);
      break;
    }
    // .substrait.Expression.Literal.UserDefined user_defined = 33;
    case kUserDefined: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.literal_type_.user_defined_);
      break;
    }
    case LITERAL_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_Literal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_Literal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_Literal::GetClassData() const { return &_class_data_; }


void Expression_Literal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_Literal*>(&to_msg);
  auto& from = static_cast<const Expression_Literal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.Literal)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_nullable() != 0) {
    _this->_internal_set_nullable(from._internal_nullable());
  }
  if (from._internal_type_variation_reference() != 0) {
    _this->_internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  switch (from.literal_type_case()) {
    case kBoolean: {
      _this->_internal_set_boolean(from._internal_boolean());
      break;
    }
    case kI8: {
      _this->_internal_set_i8(from._internal_i8());
      break;
    }
    case kI16: {
      _this->_internal_set_i16(from._internal_i16());
      break;
    }
    case kI32: {
      _this->_internal_set_i32(from._internal_i32());
      break;
    }
    case kI64: {
      _this->_internal_set_i64(from._internal_i64());
      break;
    }
    case kFp32: {
      _this->_internal_set_fp32(from._internal_fp32());
      break;
    }
    case kFp64: {
      _this->_internal_set_fp64(from._internal_fp64());
      break;
    }
    case kString: {
      _this->_internal_set_string(from._internal_string());
      break;
    }
    case kBinary: {
      _this->_internal_set_binary(from._internal_binary());
      break;
    }
    case kTimestamp: {
      _this->_internal_set_timestamp(from._internal_timestamp());
      break;
    }
    case kDate: {
      _this->_internal_set_date(from._internal_date());
      break;
    }
    case kTime: {
      _this->_internal_set_time(from._internal_time());
      break;
    }
    case kIntervalYearToMonth: {
      _this->_internal_mutable_interval_year_to_month()->::substrait::Expression_Literal_IntervalYearToMonth::MergeFrom(
          from._internal_interval_year_to_month());
      break;
    }
    case kIntervalDayToSecond: {
      _this->_internal_mutable_interval_day_to_second()->::substrait::Expression_Literal_IntervalDayToSecond::MergeFrom(
          from._internal_interval_day_to_second());
      break;
    }
    case kFixedChar: {
      _this->_internal_set_fixed_char(from._internal_fixed_char());
      break;
    }
    case kVarChar: {
      _this->_internal_mutable_var_char()->::substrait::Expression_Literal_VarChar::MergeFrom(
          from._internal_var_char());
      break;
    }
    case kFixedBinary: {
      _this->_internal_set_fixed_binary(from._internal_fixed_binary());
      break;
    }
    case kDecimal: {
      _this->_internal_mutable_decimal()->::substrait::Expression_Literal_Decimal::MergeFrom(
          from._internal_decimal());
      break;
    }
    case kStruct: {
      _this->_internal_mutable_struct_()->::substrait::Expression_Literal_Struct::MergeFrom(
          from._internal_struct_());
      break;
    }
    case kMap: {
      _this->_internal_mutable_map()->::substrait::Expression_Literal_Map::MergeFrom(
          from._internal_map());
      break;
    }
    case kTimestampTz: {
      _this->_internal_set_timestamp_tz(from._internal_timestamp_tz());
      break;
    }
    case kUuid: {
      _this->_internal_set_uuid(from._internal_uuid());
      break;
    }
    case kNull: {
      _this->_internal_mutable_null()->::substrait::Type::MergeFrom(
          from._internal_null());
      break;
    }
    case kList: {
      _this->_internal_mutable_list()->::substrait::Expression_Literal_List::MergeFrom(
          from._internal_list());
      break;
    }
    case kEmptyList: {
      _this->_internal_mutable_empty_list()->::substrait::Type_List::MergeFrom(
          from._internal_empty_list());
      break;
    }
    case kEmptyMap: {
      _this->_internal_mutable_empty_map()->::substrait::Type_Map::MergeFrom(
          from._internal_empty_map());
      break;
    }
    case kUserDefined: {
      _this->_internal_mutable_user_defined()->::substrait::Expression_Literal_UserDefined::MergeFrom(
          from._internal_user_defined());
      break;
    }
    case LITERAL_TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_Literal::CopyFrom(const Expression_Literal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.Literal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Literal::IsInitialized() const {
  return true;
}

void Expression_Literal::InternalSwap(Expression_Literal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_Literal, _impl_.type_variation_reference_)
      + sizeof(Expression_Literal::_impl_.type_variation_reference_)
      - PROTOBUF_FIELD_OFFSET(Expression_Literal, _impl_.nullable_)>(
          reinterpret_cast<char*>(&_impl_.nullable_),
          reinterpret_cast<char*>(&other->_impl_.nullable_));
  swap(_impl_.literal_type_, other->_impl_.literal_type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Literal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[55]);
}

// ===================================================================

class Expression_ScalarFunction::_Internal {
 public:
  static const ::substrait::Type& output_type(const Expression_ScalarFunction* msg);
};

const ::substrait::Type&
Expression_ScalarFunction::_Internal::output_type(const Expression_ScalarFunction* msg) {
  return *msg->_impl_.output_type_;
}
void Expression_ScalarFunction::clear_output_type() {
  if (GetArenaForAllocation() == nullptr && _impl_.output_type_ != nullptr) {
    delete _impl_.output_type_;
  }
  _impl_.output_type_ = nullptr;
}
Expression_ScalarFunction::Expression_ScalarFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.ScalarFunction)
}
Expression_ScalarFunction::Expression_ScalarFunction(const Expression_ScalarFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_ScalarFunction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.args_){from._impl_.args_}
    , decltype(_impl_.arguments_){from._impl_.arguments_}
    , decltype(_impl_.output_type_){nullptr}
    , decltype(_impl_.function_reference_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_output_type()) {
    _this->_impl_.output_type_ = new ::substrait::Type(*from._impl_.output_type_);
  }
  _this->_impl_.function_reference_ = from._impl_.function_reference_;
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.ScalarFunction)
}

inline void Expression_ScalarFunction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.args_){arena}
    , decltype(_impl_.arguments_){arena}
    , decltype(_impl_.output_type_){nullptr}
    , decltype(_impl_.function_reference_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Expression_ScalarFunction::~Expression_ScalarFunction() {
  // @@protoc_insertion_point(destructor:substrait.Expression.ScalarFunction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_ScalarFunction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.args_.~RepeatedPtrField();
  _impl_.arguments_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.output_type_;
}

void Expression_ScalarFunction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_ScalarFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.ScalarFunction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.args_.Clear();
  _impl_.arguments_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.output_type_ != nullptr) {
    delete _impl_.output_type_;
  }
  _impl_.output_type_ = nullptr;
  _impl_.function_reference_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_ScalarFunction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 function_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.function_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .substrait.Expression args = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .substrait.Type output_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .substrait.FunctionArgument arguments = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arguments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_ScalarFunction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.ScalarFunction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 function_reference = 1;
  if (this->_internal_function_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_function_reference(), target);
  }

  // repeated .substrait.Expression args = 2 [deprecated = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_args_size()); i < n; i++) {
    const auto& repfield = this->_internal_args(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .substrait.Type output_type = 3;
  if (this->_internal_has_output_type()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::output_type(this),
        _Internal::output_type(this).GetCachedSize(), target, stream);
  }

  // repeated .substrait.FunctionArgument arguments = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_arguments_size()); i < n; i++) {
    const auto& repfield = this->_internal_arguments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.ScalarFunction)
  return target;
}

size_t Expression_ScalarFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.ScalarFunction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.Expression args = 2 [deprecated = true];
  total_size += 1UL * this->_internal_args_size();
  for (const auto& msg : this->_impl_.args_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .substrait.FunctionArgument arguments = 4;
  total_size += 1UL * this->_internal_arguments_size();
  for (const auto& msg : this->_impl_.arguments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.Type output_type = 3;
  if (this->_internal_has_output_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.output_type_);
  }

  // uint32 function_reference = 1;
  if (this->_internal_function_reference() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_function_reference());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_ScalarFunction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_ScalarFunction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_ScalarFunction::GetClassData() const { return &_class_data_; }


void Expression_ScalarFunction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_ScalarFunction*>(&to_msg);
  auto& from = static_cast<const Expression_ScalarFunction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.ScalarFunction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.args_.MergeFrom(from._impl_.args_);
  _this->_impl_.arguments_.MergeFrom(from._impl_.arguments_);
  if (from._internal_has_output_type()) {
    _this->_internal_mutable_output_type()->::substrait::Type::MergeFrom(
        from._internal_output_type());
  }
  if (from._internal_function_reference() != 0) {
    _this->_internal_set_function_reference(from._internal_function_reference());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_ScalarFunction::CopyFrom(const Expression_ScalarFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.ScalarFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_ScalarFunction::IsInitialized() const {
  return true;
}

void Expression_ScalarFunction::InternalSwap(Expression_ScalarFunction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.args_.InternalSwap(&other->_impl_.args_);
  _impl_.arguments_.InternalSwap(&other->_impl_.arguments_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_ScalarFunction, _impl_.function_reference_)
      + sizeof(Expression_ScalarFunction::_impl_.function_reference_)
      - PROTOBUF_FIELD_OFFSET(Expression_ScalarFunction, _impl_.output_type_)>(
          reinterpret_cast<char*>(&_impl_.output_type_),
          reinterpret_cast<char*>(&other->_impl_.output_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_ScalarFunction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[56]);
}

// ===================================================================

class Expression_WindowFunction_Bound_Preceding::_Internal {
 public:
};

Expression_WindowFunction_Bound_Preceding::Expression_WindowFunction_Bound_Preceding(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.WindowFunction.Bound.Preceding)
}
Expression_WindowFunction_Bound_Preceding::Expression_WindowFunction_Bound_Preceding(const Expression_WindowFunction_Bound_Preceding& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_WindowFunction_Bound_Preceding* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.offset_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.offset_ = from._impl_.offset_;
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.WindowFunction.Bound.Preceding)
}

inline void Expression_WindowFunction_Bound_Preceding::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.offset_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Expression_WindowFunction_Bound_Preceding::~Expression_WindowFunction_Bound_Preceding() {
  // @@protoc_insertion_point(destructor:substrait.Expression.WindowFunction.Bound.Preceding)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_WindowFunction_Bound_Preceding::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Expression_WindowFunction_Bound_Preceding::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_WindowFunction_Bound_Preceding::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.WindowFunction.Bound.Preceding)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.offset_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_WindowFunction_Bound_Preceding::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_WindowFunction_Bound_Preceding::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.WindowFunction.Bound.Preceding)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 offset = 1;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.WindowFunction.Bound.Preceding)
  return target;
}

size_t Expression_WindowFunction_Bound_Preceding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.WindowFunction.Bound.Preceding)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 offset = 1;
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_offset());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_WindowFunction_Bound_Preceding::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_WindowFunction_Bound_Preceding::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_WindowFunction_Bound_Preceding::GetClassData() const { return &_class_data_; }


void Expression_WindowFunction_Bound_Preceding::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_WindowFunction_Bound_Preceding*>(&to_msg);
  auto& from = static_cast<const Expression_WindowFunction_Bound_Preceding&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.WindowFunction.Bound.Preceding)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_offset() != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_WindowFunction_Bound_Preceding::CopyFrom(const Expression_WindowFunction_Bound_Preceding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.WindowFunction.Bound.Preceding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_WindowFunction_Bound_Preceding::IsInitialized() const {
  return true;
}

void Expression_WindowFunction_Bound_Preceding::InternalSwap(Expression_WindowFunction_Bound_Preceding* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.offset_, other->_impl_.offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_WindowFunction_Bound_Preceding::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[57]);
}

// ===================================================================

class Expression_WindowFunction_Bound_Following::_Internal {
 public:
};

Expression_WindowFunction_Bound_Following::Expression_WindowFunction_Bound_Following(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.WindowFunction.Bound.Following)
}
Expression_WindowFunction_Bound_Following::Expression_WindowFunction_Bound_Following(const Expression_WindowFunction_Bound_Following& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_WindowFunction_Bound_Following* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.offset_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.offset_ = from._impl_.offset_;
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.WindowFunction.Bound.Following)
}

inline void Expression_WindowFunction_Bound_Following::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.offset_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Expression_WindowFunction_Bound_Following::~Expression_WindowFunction_Bound_Following() {
  // @@protoc_insertion_point(destructor:substrait.Expression.WindowFunction.Bound.Following)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_WindowFunction_Bound_Following::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Expression_WindowFunction_Bound_Following::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_WindowFunction_Bound_Following::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.WindowFunction.Bound.Following)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.offset_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_WindowFunction_Bound_Following::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_WindowFunction_Bound_Following::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.WindowFunction.Bound.Following)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 offset = 1;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.WindowFunction.Bound.Following)
  return target;
}

size_t Expression_WindowFunction_Bound_Following::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.WindowFunction.Bound.Following)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 offset = 1;
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_offset());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_WindowFunction_Bound_Following::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_WindowFunction_Bound_Following::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_WindowFunction_Bound_Following::GetClassData() const { return &_class_data_; }


void Expression_WindowFunction_Bound_Following::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_WindowFunction_Bound_Following*>(&to_msg);
  auto& from = static_cast<const Expression_WindowFunction_Bound_Following&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.WindowFunction.Bound.Following)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_offset() != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_WindowFunction_Bound_Following::CopyFrom(const Expression_WindowFunction_Bound_Following& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.WindowFunction.Bound.Following)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_WindowFunction_Bound_Following::IsInitialized() const {
  return true;
}

void Expression_WindowFunction_Bound_Following::InternalSwap(Expression_WindowFunction_Bound_Following* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.offset_, other->_impl_.offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_WindowFunction_Bound_Following::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[58]);
}

// ===================================================================

class Expression_WindowFunction_Bound_CurrentRow::_Internal {
 public:
};

Expression_WindowFunction_Bound_CurrentRow::Expression_WindowFunction_Bound_CurrentRow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.WindowFunction.Bound.CurrentRow)
}
Expression_WindowFunction_Bound_CurrentRow::Expression_WindowFunction_Bound_CurrentRow(const Expression_WindowFunction_Bound_CurrentRow& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Expression_WindowFunction_Bound_CurrentRow* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.WindowFunction.Bound.CurrentRow)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_WindowFunction_Bound_CurrentRow::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_WindowFunction_Bound_CurrentRow::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Expression_WindowFunction_Bound_CurrentRow::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[59]);
}

// ===================================================================

class Expression_WindowFunction_Bound_Unbounded::_Internal {
 public:
};

Expression_WindowFunction_Bound_Unbounded::Expression_WindowFunction_Bound_Unbounded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.WindowFunction.Bound.Unbounded)
}
Expression_WindowFunction_Bound_Unbounded::Expression_WindowFunction_Bound_Unbounded(const Expression_WindowFunction_Bound_Unbounded& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Expression_WindowFunction_Bound_Unbounded* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.WindowFunction.Bound.Unbounded)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_WindowFunction_Bound_Unbounded::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_WindowFunction_Bound_Unbounded::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Expression_WindowFunction_Bound_Unbounded::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[60]);
}

// ===================================================================

class Expression_WindowFunction_Bound::_Internal {
 public:
  static const ::substrait::Expression_WindowFunction_Bound_Preceding& preceding(const Expression_WindowFunction_Bound* msg);
  static const ::substrait::Expression_WindowFunction_Bound_Following& following(const Expression_WindowFunction_Bound* msg);
  static const ::substrait::Expression_WindowFunction_Bound_CurrentRow& current_row(const Expression_WindowFunction_Bound* msg);
  static const ::substrait::Expression_WindowFunction_Bound_Unbounded& unbounded(const Expression_WindowFunction_Bound* msg);
};

const ::substrait::Expression_WindowFunction_Bound_Preceding&
Expression_WindowFunction_Bound::_Internal::preceding(const Expression_WindowFunction_Bound* msg) {
  return *msg->_impl_.kind_.preceding_;
}
const ::substrait::Expression_WindowFunction_Bound_Following&
Expression_WindowFunction_Bound::_Internal::following(const Expression_WindowFunction_Bound* msg) {
  return *msg->_impl_.kind_.following_;
}
const ::substrait::Expression_WindowFunction_Bound_CurrentRow&
Expression_WindowFunction_Bound::_Internal::current_row(const Expression_WindowFunction_Bound* msg) {
  return *msg->_impl_.kind_.current_row_;
}
const ::substrait::Expression_WindowFunction_Bound_Unbounded&
Expression_WindowFunction_Bound::_Internal::unbounded(const Expression_WindowFunction_Bound* msg) {
  return *msg->_impl_.kind_.unbounded_;
}
void Expression_WindowFunction_Bound::set_allocated_preceding(::substrait::Expression_WindowFunction_Bound_Preceding* preceding) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (preceding) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(preceding);
    if (message_arena != submessage_arena) {
      preceding = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preceding, submessage_arena);
    }
    set_has_preceding();
    _impl_.kind_.preceding_ = preceding;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.WindowFunction.Bound.preceding)
}
void Expression_WindowFunction_Bound::set_allocated_following(::substrait::Expression_WindowFunction_Bound_Following* following) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (following) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(following);
    if (message_arena != submessage_arena) {
      following = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, following, submessage_arena);
    }
    set_has_following();
    _impl_.kind_.following_ = following;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.WindowFunction.Bound.following)
}
void Expression_WindowFunction_Bound::set_allocated_current_row(::substrait::Expression_WindowFunction_Bound_CurrentRow* current_row) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (current_row) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(current_row);
    if (message_arena != submessage_arena) {
      current_row = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_row, submessage_arena);
    }
    set_has_current_row();
    _impl_.kind_.current_row_ = current_row;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.WindowFunction.Bound.current_row)
}
void Expression_WindowFunction_Bound::set_allocated_unbounded(::substrait::Expression_WindowFunction_Bound_Unbounded* unbounded) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (unbounded) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(unbounded);
    if (message_arena != submessage_arena) {
      unbounded = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unbounded, submessage_arena);
    }
    set_has_unbounded();
    _impl_.kind_.unbounded_ = unbounded;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.WindowFunction.Bound.unbounded)
}
Expression_WindowFunction_Bound::Expression_WindowFunction_Bound(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.WindowFunction.Bound)
}
Expression_WindowFunction_Bound::Expression_WindowFunction_Bound(const Expression_WindowFunction_Bound& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_WindowFunction_Bound* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.kind_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_kind();
  switch (from.kind_case()) {
    case kPreceding: {
      _this->_internal_mutable_preceding()->::substrait::Expression_WindowFunction_Bound_Preceding::MergeFrom(
          from._internal_preceding());
      break;
    }
    case kFollowing: {
      _this->_internal_mutable_following()->::substrait::Expression_WindowFunction_Bound_Following::MergeFrom(
          from._internal_following());
      break;
    }
    case kCurrentRow: {
      _this->_internal_mutable_current_row()->::substrait::Expression_WindowFunction_Bound_CurrentRow::MergeFrom(
          from._internal_current_row());
      break;
    }
    case kUnbounded: {
      _this->_internal_mutable_unbounded()->::substrait::Expression_WindowFunction_Bound_Unbounded::MergeFrom(
          from._internal_unbounded());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.WindowFunction.Bound)
}

inline void Expression_WindowFunction_Bound::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.kind_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_kind();
}

Expression_WindowFunction_Bound::~Expression_WindowFunction_Bound() {
  // @@protoc_insertion_point(destructor:substrait.Expression.WindowFunction.Bound)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_WindowFunction_Bound::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_kind()) {
    clear_kind();
  }
}

void Expression_WindowFunction_Bound::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_WindowFunction_Bound::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:substrait.Expression.WindowFunction.Bound)
  switch (kind_case()) {
    case kPreceding: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.preceding_;
      }
      break;
    }
    case kFollowing: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.following_;
      }
      break;
    }
    case kCurrentRow: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.current_row_;
      }
      break;
    }
    case kUnbounded: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.unbounded_;
      }
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}


void Expression_WindowFunction_Bound::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.WindowFunction.Bound)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_WindowFunction_Bound::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.Expression.WindowFunction.Bound.Preceding preceding = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_preceding(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.WindowFunction.Bound.Following following = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_following(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.WindowFunction.Bound.CurrentRow current_row = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_row(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.WindowFunction.Bound.Unbounded unbounded = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_unbounded(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_WindowFunction_Bound::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.WindowFunction.Bound)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.Expression.WindowFunction.Bound.Preceding preceding = 1;
  if (_internal_has_preceding()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::preceding(this),
        _Internal::preceding(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression.WindowFunction.Bound.Following following = 2;
  if (_internal_has_following()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::following(this),
        _Internal::following(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression.WindowFunction.Bound.CurrentRow current_row = 3;
  if (_internal_has_current_row()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::current_row(this),
        _Internal::current_row(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression.WindowFunction.Bound.Unbounded unbounded = 4;
  if (_internal_has_unbounded()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::unbounded(this),
        _Internal::unbounded(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.WindowFunction.Bound)
  return target;
}

size_t Expression_WindowFunction_Bound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.WindowFunction.Bound)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (kind_case()) {
    // .substrait.Expression.WindowFunction.Bound.Preceding preceding = 1;
    case kPreceding: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.preceding_);
      break;
    }
    // .substrait.Expression.WindowFunction.Bound.Following following = 2;
    case kFollowing: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.following_);
      break;
    }
    // .substrait.Expression.WindowFunction.Bound.CurrentRow current_row = 3;
    case kCurrentRow: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.current_row_);
      break;
    }
    // .substrait.Expression.WindowFunction.Bound.Unbounded unbounded = 4;
    case kUnbounded: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.unbounded_);
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_WindowFunction_Bound::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_WindowFunction_Bound::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_WindowFunction_Bound::GetClassData() const { return &_class_data_; }


void Expression_WindowFunction_Bound::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_WindowFunction_Bound*>(&to_msg);
  auto& from = static_cast<const Expression_WindowFunction_Bound&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.WindowFunction.Bound)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.kind_case()) {
    case kPreceding: {
      _this->_internal_mutable_preceding()->::substrait::Expression_WindowFunction_Bound_Preceding::MergeFrom(
          from._internal_preceding());
      break;
    }
    case kFollowing: {
      _this->_internal_mutable_following()->::substrait::Expression_WindowFunction_Bound_Following::MergeFrom(
          from._internal_following());
      break;
    }
    case kCurrentRow: {
      _this->_internal_mutable_current_row()->::substrait::Expression_WindowFunction_Bound_CurrentRow::MergeFrom(
          from._internal_current_row());
      break;
    }
    case kUnbounded: {
      _this->_internal_mutable_unbounded()->::substrait::Expression_WindowFunction_Bound_Unbounded::MergeFrom(
          from._internal_unbounded());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_WindowFunction_Bound::CopyFrom(const Expression_WindowFunction_Bound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.WindowFunction.Bound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_WindowFunction_Bound::IsInitialized() const {
  return true;
}

void Expression_WindowFunction_Bound::InternalSwap(Expression_WindowFunction_Bound* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.kind_, other->_impl_.kind_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_WindowFunction_Bound::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[61]);
}

// ===================================================================

class Expression_WindowFunction::_Internal {
 public:
  static const ::substrait::Type& output_type(const Expression_WindowFunction* msg);
  static const ::substrait::Expression_WindowFunction_Bound& lower_bound(const Expression_WindowFunction* msg);
  static const ::substrait::Expression_WindowFunction_Bound& upper_bound(const Expression_WindowFunction* msg);
};

const ::substrait::Type&
Expression_WindowFunction::_Internal::output_type(const Expression_WindowFunction* msg) {
  return *msg->_impl_.output_type_;
}
const ::substrait::Expression_WindowFunction_Bound&
Expression_WindowFunction::_Internal::lower_bound(const Expression_WindowFunction* msg) {
  return *msg->_impl_.lower_bound_;
}
const ::substrait::Expression_WindowFunction_Bound&
Expression_WindowFunction::_Internal::upper_bound(const Expression_WindowFunction* msg) {
  return *msg->_impl_.upper_bound_;
}
void Expression_WindowFunction::clear_output_type() {
  if (GetArenaForAllocation() == nullptr && _impl_.output_type_ != nullptr) {
    delete _impl_.output_type_;
  }
  _impl_.output_type_ = nullptr;
}
Expression_WindowFunction::Expression_WindowFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.WindowFunction)
}
Expression_WindowFunction::Expression_WindowFunction(const Expression_WindowFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_WindowFunction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.partitions_){from._impl_.partitions_}
    , decltype(_impl_.sorts_){from._impl_.sorts_}
    , decltype(_impl_.args_){from._impl_.args_}
    , decltype(_impl_.arguments_){from._impl_.arguments_}
    , decltype(_impl_.upper_bound_){nullptr}
    , decltype(_impl_.lower_bound_){nullptr}
    , decltype(_impl_.output_type_){nullptr}
    , decltype(_impl_.function_reference_){}
    , decltype(_impl_.phase_){}
    , decltype(_impl_.invocation_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_upper_bound()) {
    _this->_impl_.upper_bound_ = new ::substrait::Expression_WindowFunction_Bound(*from._impl_.upper_bound_);
  }
  if (from._internal_has_lower_bound()) {
    _this->_impl_.lower_bound_ = new ::substrait::Expression_WindowFunction_Bound(*from._impl_.lower_bound_);
  }
  if (from._internal_has_output_type()) {
    _this->_impl_.output_type_ = new ::substrait::Type(*from._impl_.output_type_);
  }
  ::memcpy(&_impl_.function_reference_, &from._impl_.function_reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.invocation_) -
    reinterpret_cast<char*>(&_impl_.function_reference_)) + sizeof(_impl_.invocation_));
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.WindowFunction)
}

inline void Expression_WindowFunction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.partitions_){arena}
    , decltype(_impl_.sorts_){arena}
    , decltype(_impl_.args_){arena}
    , decltype(_impl_.arguments_){arena}
    , decltype(_impl_.upper_bound_){nullptr}
    , decltype(_impl_.lower_bound_){nullptr}
    , decltype(_impl_.output_type_){nullptr}
    , decltype(_impl_.function_reference_){0u}
    , decltype(_impl_.phase_){0}
    , decltype(_impl_.invocation_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Expression_WindowFunction::~Expression_WindowFunction() {
  // @@protoc_insertion_point(destructor:substrait.Expression.WindowFunction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_WindowFunction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.partitions_.~RepeatedPtrField();
  _impl_.sorts_.~RepeatedPtrField();
  _impl_.args_.~RepeatedPtrField();
  _impl_.arguments_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.upper_bound_;
  if (this != internal_default_instance()) delete _impl_.lower_bound_;
  if (this != internal_default_instance()) delete _impl_.output_type_;
}

void Expression_WindowFunction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_WindowFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.WindowFunction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.partitions_.Clear();
  _impl_.sorts_.Clear();
  _impl_.args_.Clear();
  _impl_.arguments_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.upper_bound_ != nullptr) {
    delete _impl_.upper_bound_;
  }
  _impl_.upper_bound_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.lower_bound_ != nullptr) {
    delete _impl_.lower_bound_;
  }
  _impl_.lower_bound_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.output_type_ != nullptr) {
    delete _impl_.output_type_;
  }
  _impl_.output_type_ = nullptr;
  ::memset(&_impl_.function_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.invocation_) -
      reinterpret_cast<char*>(&_impl_.function_reference_)) + sizeof(_impl_.invocation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_WindowFunction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 function_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.function_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .substrait.Expression partitions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_partitions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .substrait.SortField sorts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sorts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.WindowFunction.Bound upper_bound = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_upper_bound(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.WindowFunction.Bound lower_bound = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_lower_bound(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.AggregationPhase phase = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_phase(static_cast<::substrait::AggregationPhase>(val));
        } else
          goto handle_unusual;
        continue;
      // .substrait.Type output_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .substrait.Expression args = 8 [deprecated = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .substrait.FunctionArgument arguments = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arguments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .substrait.AggregateFunction.AggregationInvocation invocation = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_invocation(static_cast<::substrait::AggregateFunction_AggregationInvocation>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_WindowFunction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.WindowFunction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 function_reference = 1;
  if (this->_internal_function_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_function_reference(), target);
  }

  // repeated .substrait.Expression partitions = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_partitions_size()); i < n; i++) {
    const auto& repfield = this->_internal_partitions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .substrait.SortField sorts = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sorts_size()); i < n; i++) {
    const auto& repfield = this->_internal_sorts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .substrait.Expression.WindowFunction.Bound upper_bound = 4;
  if (this->_internal_has_upper_bound()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::upper_bound(this),
        _Internal::upper_bound(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression.WindowFunction.Bound lower_bound = 5;
  if (this->_internal_has_lower_bound()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::lower_bound(this),
        _Internal::lower_bound(this).GetCachedSize(), target, stream);
  }

  // .substrait.AggregationPhase phase = 6;
  if (this->_internal_phase() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_phase(), target);
  }

  // .substrait.Type output_type = 7;
  if (this->_internal_has_output_type()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::output_type(this),
        _Internal::output_type(this).GetCachedSize(), target, stream);
  }

  // repeated .substrait.Expression args = 8 [deprecated = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_args_size()); i < n; i++) {
    const auto& repfield = this->_internal_args(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .substrait.FunctionArgument arguments = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_arguments_size()); i < n; i++) {
    const auto& repfield = this->_internal_arguments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .substrait.AggregateFunction.AggregationInvocation invocation = 10;
  if (this->_internal_invocation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_invocation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.WindowFunction)
  return target;
}

size_t Expression_WindowFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.WindowFunction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.Expression partitions = 2;
  total_size += 1UL * this->_internal_partitions_size();
  for (const auto& msg : this->_impl_.partitions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .substrait.SortField sorts = 3;
  total_size += 1UL * this->_internal_sorts_size();
  for (const auto& msg : this->_impl_.sorts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .substrait.Expression args = 8 [deprecated = true];
  total_size += 1UL * this->_internal_args_size();
  for (const auto& msg : this->_impl_.args_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .substrait.FunctionArgument arguments = 9;
  total_size += 1UL * this->_internal_arguments_size();
  for (const auto& msg : this->_impl_.arguments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.Expression.WindowFunction.Bound upper_bound = 4;
  if (this->_internal_has_upper_bound()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.upper_bound_);
  }

  // .substrait.Expression.WindowFunction.Bound lower_bound = 5;
  if (this->_internal_has_lower_bound()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.lower_bound_);
  }

  // .substrait.Type output_type = 7;
  if (this->_internal_has_output_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.output_type_);
  }

  // uint32 function_reference = 1;
  if (this->_internal_function_reference() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_function_reference());
  }

  // .substrait.AggregationPhase phase = 6;
  if (this->_internal_phase() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_phase());
  }

  // .substrait.AggregateFunction.AggregationInvocation invocation = 10;
  if (this->_internal_invocation() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_invocation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_WindowFunction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_WindowFunction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_WindowFunction::GetClassData() const { return &_class_data_; }


void Expression_WindowFunction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_WindowFunction*>(&to_msg);
  auto& from = static_cast<const Expression_WindowFunction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.WindowFunction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.partitions_.MergeFrom(from._impl_.partitions_);
  _this->_impl_.sorts_.MergeFrom(from._impl_.sorts_);
  _this->_impl_.args_.MergeFrom(from._impl_.args_);
  _this->_impl_.arguments_.MergeFrom(from._impl_.arguments_);
  if (from._internal_has_upper_bound()) {
    _this->_internal_mutable_upper_bound()->::substrait::Expression_WindowFunction_Bound::MergeFrom(
        from._internal_upper_bound());
  }
  if (from._internal_has_lower_bound()) {
    _this->_internal_mutable_lower_bound()->::substrait::Expression_WindowFunction_Bound::MergeFrom(
        from._internal_lower_bound());
  }
  if (from._internal_has_output_type()) {
    _this->_internal_mutable_output_type()->::substrait::Type::MergeFrom(
        from._internal_output_type());
  }
  if (from._internal_function_reference() != 0) {
    _this->_internal_set_function_reference(from._internal_function_reference());
  }
  if (from._internal_phase() != 0) {
    _this->_internal_set_phase(from._internal_phase());
  }
  if (from._internal_invocation() != 0) {
    _this->_internal_set_invocation(from._internal_invocation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_WindowFunction::CopyFrom(const Expression_WindowFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.WindowFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_WindowFunction::IsInitialized() const {
  return true;
}

void Expression_WindowFunction::InternalSwap(Expression_WindowFunction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.partitions_.InternalSwap(&other->_impl_.partitions_);
  _impl_.sorts_.InternalSwap(&other->_impl_.sorts_);
  _impl_.args_.InternalSwap(&other->_impl_.args_);
  _impl_.arguments_.InternalSwap(&other->_impl_.arguments_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_WindowFunction, _impl_.invocation_)
      + sizeof(Expression_WindowFunction::_impl_.invocation_)
      - PROTOBUF_FIELD_OFFSET(Expression_WindowFunction, _impl_.upper_bound_)>(
          reinterpret_cast<char*>(&_impl_.upper_bound_),
          reinterpret_cast<char*>(&other->_impl_.upper_bound_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_WindowFunction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[62]);
}

// ===================================================================

class Expression_IfThen_IfClause::_Internal {
 public:
  static const ::substrait::Expression& if_(const Expression_IfThen_IfClause* msg);
  static const ::substrait::Expression& then(const Expression_IfThen_IfClause* msg);
};

const ::substrait::Expression&
Expression_IfThen_IfClause::_Internal::if_(const Expression_IfThen_IfClause* msg) {
  return *msg->_impl_.if__;
}
const ::substrait::Expression&
Expression_IfThen_IfClause::_Internal::then(const Expression_IfThen_IfClause* msg) {
  return *msg->_impl_.then_;
}
Expression_IfThen_IfClause::Expression_IfThen_IfClause(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.IfThen.IfClause)
}
Expression_IfThen_IfClause::Expression_IfThen_IfClause(const Expression_IfThen_IfClause& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_IfThen_IfClause* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.if__){nullptr}
    , decltype(_impl_.then_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_if_()) {
    _this->_impl_.if__ = new ::substrait::Expression(*from._impl_.if__);
  }
  if (from._internal_has_then()) {
    _this->_impl_.then_ = new ::substrait::Expression(*from._impl_.then_);
  }
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.IfThen.IfClause)
}

inline void Expression_IfThen_IfClause::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.if__){nullptr}
    , decltype(_impl_.then_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Expression_IfThen_IfClause::~Expression_IfThen_IfClause() {
  // @@protoc_insertion_point(destructor:substrait.Expression.IfThen.IfClause)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_IfThen_IfClause::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.if__;
  if (this != internal_default_instance()) delete _impl_.then_;
}

void Expression_IfThen_IfClause::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_IfThen_IfClause::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.IfThen.IfClause)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.if__ != nullptr) {
    delete _impl_.if__;
  }
  _impl_.if__ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.then_ != nullptr) {
    delete _impl_.then_;
  }
  _impl_.then_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_IfThen_IfClause::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.Expression if = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_if_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression then = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_then(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_IfThen_IfClause::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.IfThen.IfClause)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.Expression if = 1;
  if (this->_internal_has_if_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::if_(this),
        _Internal::if_(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression then = 2;
  if (this->_internal_has_then()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::then(this),
        _Internal::then(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.IfThen.IfClause)
  return target;
}

size_t Expression_IfThen_IfClause::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.IfThen.IfClause)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.Expression if = 1;
  if (this->_internal_has_if_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.if__);
  }

  // .substrait.Expression then = 2;
  if (this->_internal_has_then()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.then_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_IfThen_IfClause::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_IfThen_IfClause::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_IfThen_IfClause::GetClassData() const { return &_class_data_; }


void Expression_IfThen_IfClause::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_IfThen_IfClause*>(&to_msg);
  auto& from = static_cast<const Expression_IfThen_IfClause&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.IfThen.IfClause)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_if_()) {
    _this->_internal_mutable_if_()->::substrait::Expression::MergeFrom(
        from._internal_if_());
  }
  if (from._internal_has_then()) {
    _this->_internal_mutable_then()->::substrait::Expression::MergeFrom(
        from._internal_then());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_IfThen_IfClause::CopyFrom(const Expression_IfThen_IfClause& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.IfThen.IfClause)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_IfThen_IfClause::IsInitialized() const {
  return true;
}

void Expression_IfThen_IfClause::InternalSwap(Expression_IfThen_IfClause* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_IfThen_IfClause, _impl_.then_)
      + sizeof(Expression_IfThen_IfClause::_impl_.then_)
      - PROTOBUF_FIELD_OFFSET(Expression_IfThen_IfClause, _impl_.if__)>(
          reinterpret_cast<char*>(&_impl_.if__),
          reinterpret_cast<char*>(&other->_impl_.if__));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_IfThen_IfClause::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[63]);
}

// ===================================================================

class Expression_IfThen::_Internal {
 public:
  static const ::substrait::Expression& else_(const Expression_IfThen* msg);
};

const ::substrait::Expression&
Expression_IfThen::_Internal::else_(const Expression_IfThen* msg) {
  return *msg->_impl_.else__;
}
Expression_IfThen::Expression_IfThen(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.IfThen)
}
Expression_IfThen::Expression_IfThen(const Expression_IfThen& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_IfThen* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ifs_){from._impl_.ifs_}
    , decltype(_impl_.else__){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_else_()) {
    _this->_impl_.else__ = new ::substrait::Expression(*from._impl_.else__);
  }
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.IfThen)
}

inline void Expression_IfThen::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ifs_){arena}
    , decltype(_impl_.else__){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Expression_IfThen::~Expression_IfThen() {
  // @@protoc_insertion_point(destructor:substrait.Expression.IfThen)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_IfThen::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ifs_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.else__;
}

void Expression_IfThen::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_IfThen::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.IfThen)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ifs_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.else__ != nullptr) {
    delete _impl_.else__;
  }
  _impl_.else__ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_IfThen::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .substrait.Expression.IfThen.IfClause ifs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ifs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression else = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_else_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_IfThen::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.IfThen)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.Expression.IfThen.IfClause ifs = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ifs_size()); i < n; i++) {
    const auto& repfield = this->_internal_ifs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .substrait.Expression else = 2;
  if (this->_internal_has_else_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::else_(this),
        _Internal::else_(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.IfThen)
  return target;
}

size_t Expression_IfThen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.IfThen)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.Expression.IfThen.IfClause ifs = 1;
  total_size += 1UL * this->_internal_ifs_size();
  for (const auto& msg : this->_impl_.ifs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.Expression else = 2;
  if (this->_internal_has_else_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.else__);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_IfThen::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_IfThen::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_IfThen::GetClassData() const { return &_class_data_; }


void Expression_IfThen::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_IfThen*>(&to_msg);
  auto& from = static_cast<const Expression_IfThen&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.IfThen)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ifs_.MergeFrom(from._impl_.ifs_);
  if (from._internal_has_else_()) {
    _this->_internal_mutable_else_()->::substrait::Expression::MergeFrom(
        from._internal_else_());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_IfThen::CopyFrom(const Expression_IfThen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.IfThen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_IfThen::IsInitialized() const {
  return true;
}

void Expression_IfThen::InternalSwap(Expression_IfThen* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ifs_.InternalSwap(&other->_impl_.ifs_);
  swap(_impl_.else__, other->_impl_.else__);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_IfThen::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[64]);
}

// ===================================================================

class Expression_Cast::_Internal {
 public:
  static const ::substrait::Type& type(const Expression_Cast* msg);
  static const ::substrait::Expression& input(const Expression_Cast* msg);
};

const ::substrait::Type&
Expression_Cast::_Internal::type(const Expression_Cast* msg) {
  return *msg->_impl_.type_;
}
const ::substrait::Expression&
Expression_Cast::_Internal::input(const Expression_Cast* msg) {
  return *msg->_impl_.input_;
}
void Expression_Cast::clear_type() {
  if (GetArenaForAllocation() == nullptr && _impl_.type_ != nullptr) {
    delete _impl_.type_;
  }
  _impl_.type_ = nullptr;
}
Expression_Cast::Expression_Cast(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.Cast)
}
Expression_Cast::Expression_Cast(const Expression_Cast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_Cast* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){nullptr}
    , decltype(_impl_.input_){nullptr}
    , decltype(_impl_.failure_behavior_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_type()) {
    _this->_impl_.type_ = new ::substrait::Type(*from._impl_.type_);
  }
  if (from._internal_has_input()) {
    _this->_impl_.input_ = new ::substrait::Expression(*from._impl_.input_);
  }
  _this->_impl_.failure_behavior_ = from._impl_.failure_behavior_;
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.Cast)
}

inline void Expression_Cast::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){nullptr}
    , decltype(_impl_.input_){nullptr}
    , decltype(_impl_.failure_behavior_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Expression_Cast::~Expression_Cast() {
  // @@protoc_insertion_point(destructor:substrait.Expression.Cast)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_Cast::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.type_;
  if (this != internal_default_instance()) delete _impl_.input_;
}

void Expression_Cast::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_Cast::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.Cast)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.type_ != nullptr) {
    delete _impl_.type_;
  }
  _impl_.type_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.input_ != nullptr) {
    delete _impl_.input_;
  }
  _impl_.input_ = nullptr;
  _impl_.failure_behavior_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Cast::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.Cast.FailureBehavior failure_behavior = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_failure_behavior(static_cast<::substrait::Expression_Cast_FailureBehavior>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_Cast::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.Cast)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.Type type = 1;
  if (this->_internal_has_type()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::type(this),
        _Internal::type(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression input = 2;
  if (this->_internal_has_input()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::input(this),
        _Internal::input(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression.Cast.FailureBehavior failure_behavior = 3;
  if (this->_internal_failure_behavior() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_failure_behavior(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.Cast)
  return target;
}

size_t Expression_Cast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.Cast)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.Type type = 1;
  if (this->_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.type_);
  }

  // .substrait.Expression input = 2;
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.input_);
  }

  // .substrait.Expression.Cast.FailureBehavior failure_behavior = 3;
  if (this->_internal_failure_behavior() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_failure_behavior());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_Cast::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_Cast::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_Cast::GetClassData() const { return &_class_data_; }


void Expression_Cast::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_Cast*>(&to_msg);
  auto& from = static_cast<const Expression_Cast&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.Cast)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_type()) {
    _this->_internal_mutable_type()->::substrait::Type::MergeFrom(
        from._internal_type());
  }
  if (from._internal_has_input()) {
    _this->_internal_mutable_input()->::substrait::Expression::MergeFrom(
        from._internal_input());
  }
  if (from._internal_failure_behavior() != 0) {
    _this->_internal_set_failure_behavior(from._internal_failure_behavior());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_Cast::CopyFrom(const Expression_Cast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.Cast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Cast::IsInitialized() const {
  return true;
}

void Expression_Cast::InternalSwap(Expression_Cast* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_Cast, _impl_.failure_behavior_)
      + sizeof(Expression_Cast::_impl_.failure_behavior_)
      - PROTOBUF_FIELD_OFFSET(Expression_Cast, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Cast::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[65]);
}

// ===================================================================

class Expression_SwitchExpression_IfValue::_Internal {
 public:
  static const ::substrait::Expression_Literal& if_(const Expression_SwitchExpression_IfValue* msg);
  static const ::substrait::Expression& then(const Expression_SwitchExpression_IfValue* msg);
};

const ::substrait::Expression_Literal&
Expression_SwitchExpression_IfValue::_Internal::if_(const Expression_SwitchExpression_IfValue* msg) {
  return *msg->_impl_.if__;
}
const ::substrait::Expression&
Expression_SwitchExpression_IfValue::_Internal::then(const Expression_SwitchExpression_IfValue* msg) {
  return *msg->_impl_.then_;
}
Expression_SwitchExpression_IfValue::Expression_SwitchExpression_IfValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.SwitchExpression.IfValue)
}
Expression_SwitchExpression_IfValue::Expression_SwitchExpression_IfValue(const Expression_SwitchExpression_IfValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_SwitchExpression_IfValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.if__){nullptr}
    , decltype(_impl_.then_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_if_()) {
    _this->_impl_.if__ = new ::substrait::Expression_Literal(*from._impl_.if__);
  }
  if (from._internal_has_then()) {
    _this->_impl_.then_ = new ::substrait::Expression(*from._impl_.then_);
  }
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.SwitchExpression.IfValue)
}

inline void Expression_SwitchExpression_IfValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.if__){nullptr}
    , decltype(_impl_.then_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Expression_SwitchExpression_IfValue::~Expression_SwitchExpression_IfValue() {
  // @@protoc_insertion_point(destructor:substrait.Expression.SwitchExpression.IfValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_SwitchExpression_IfValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.if__;
  if (this != internal_default_instance()) delete _impl_.then_;
}

void Expression_SwitchExpression_IfValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_SwitchExpression_IfValue::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.SwitchExpression.IfValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.if__ != nullptr) {
    delete _impl_.if__;
  }
  _impl_.if__ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.then_ != nullptr) {
    delete _impl_.then_;
  }
  _impl_.then_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_SwitchExpression_IfValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.Expression.Literal if = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_if_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression then = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_then(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_SwitchExpression_IfValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.SwitchExpression.IfValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.Expression.Literal if = 1;
  if (this->_internal_has_if_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::if_(this),
        _Internal::if_(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression then = 2;
  if (this->_internal_has_then()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::then(this),
        _Internal::then(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.SwitchExpression.IfValue)
  return target;
}

size_t Expression_SwitchExpression_IfValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.SwitchExpression.IfValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.Expression.Literal if = 1;
  if (this->_internal_has_if_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.if__);
  }

  // .substrait.Expression then = 2;
  if (this->_internal_has_then()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.then_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_SwitchExpression_IfValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_SwitchExpression_IfValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_SwitchExpression_IfValue::GetClassData() const { return &_class_data_; }


void Expression_SwitchExpression_IfValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_SwitchExpression_IfValue*>(&to_msg);
  auto& from = static_cast<const Expression_SwitchExpression_IfValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.SwitchExpression.IfValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_if_()) {
    _this->_internal_mutable_if_()->::substrait::Expression_Literal::MergeFrom(
        from._internal_if_());
  }
  if (from._internal_has_then()) {
    _this->_internal_mutable_then()->::substrait::Expression::MergeFrom(
        from._internal_then());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_SwitchExpression_IfValue::CopyFrom(const Expression_SwitchExpression_IfValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.SwitchExpression.IfValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_SwitchExpression_IfValue::IsInitialized() const {
  return true;
}

void Expression_SwitchExpression_IfValue::InternalSwap(Expression_SwitchExpression_IfValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_SwitchExpression_IfValue, _impl_.then_)
      + sizeof(Expression_SwitchExpression_IfValue::_impl_.then_)
      - PROTOBUF_FIELD_OFFSET(Expression_SwitchExpression_IfValue, _impl_.if__)>(
          reinterpret_cast<char*>(&_impl_.if__),
          reinterpret_cast<char*>(&other->_impl_.if__));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_SwitchExpression_IfValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[66]);
}

// ===================================================================

class Expression_SwitchExpression::_Internal {
 public:
  static const ::substrait::Expression& match(const Expression_SwitchExpression* msg);
  static const ::substrait::Expression& else_(const Expression_SwitchExpression* msg);
};

const ::substrait::Expression&
Expression_SwitchExpression::_Internal::match(const Expression_SwitchExpression* msg) {
  return *msg->_impl_.match_;
}
const ::substrait::Expression&
Expression_SwitchExpression::_Internal::else_(const Expression_SwitchExpression* msg) {
  return *msg->_impl_.else__;
}
Expression_SwitchExpression::Expression_SwitchExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.SwitchExpression)
}
Expression_SwitchExpression::Expression_SwitchExpression(const Expression_SwitchExpression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_SwitchExpression* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ifs_){from._impl_.ifs_}
    , decltype(_impl_.else__){nullptr}
    , decltype(_impl_.match_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_else_()) {
    _this->_impl_.else__ = new ::substrait::Expression(*from._impl_.else__);
  }
  if (from._internal_has_match()) {
    _this->_impl_.match_ = new ::substrait::Expression(*from._impl_.match_);
  }
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.SwitchExpression)
}

inline void Expression_SwitchExpression::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ifs_){arena}
    , decltype(_impl_.else__){nullptr}
    , decltype(_impl_.match_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Expression_SwitchExpression::~Expression_SwitchExpression() {
  // @@protoc_insertion_point(destructor:substrait.Expression.SwitchExpression)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_SwitchExpression::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ifs_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.else__;
  if (this != internal_default_instance()) delete _impl_.match_;
}

void Expression_SwitchExpression::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_SwitchExpression::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.SwitchExpression)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ifs_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.else__ != nullptr) {
    delete _impl_.else__;
  }
  _impl_.else__ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.match_ != nullptr) {
    delete _impl_.match_;
  }
  _impl_.match_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_SwitchExpression::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .substrait.Expression.SwitchExpression.IfValue ifs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ifs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression else = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_else_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression match = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_match(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_SwitchExpression::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.SwitchExpression)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.Expression.SwitchExpression.IfValue ifs = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ifs_size()); i < n; i++) {
    const auto& repfield = this->_internal_ifs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .substrait.Expression else = 2;
  if (this->_internal_has_else_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::else_(this),
        _Internal::else_(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression match = 3;
  if (this->_internal_has_match()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::match(this),
        _Internal::match(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.SwitchExpression)
  return target;
}

size_t Expression_SwitchExpression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.SwitchExpression)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.Expression.SwitchExpression.IfValue ifs = 1;
  total_size += 1UL * this->_internal_ifs_size();
  for (const auto& msg : this->_impl_.ifs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.Expression else = 2;
  if (this->_internal_has_else_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.else__);
  }

  // .substrait.Expression match = 3;
  if (this->_internal_has_match()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.match_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_SwitchExpression::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_SwitchExpression::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_SwitchExpression::GetClassData() const { return &_class_data_; }


void Expression_SwitchExpression::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_SwitchExpression*>(&to_msg);
  auto& from = static_cast<const Expression_SwitchExpression&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.SwitchExpression)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ifs_.MergeFrom(from._impl_.ifs_);
  if (from._internal_has_else_()) {
    _this->_internal_mutable_else_()->::substrait::Expression::MergeFrom(
        from._internal_else_());
  }
  if (from._internal_has_match()) {
    _this->_internal_mutable_match()->::substrait::Expression::MergeFrom(
        from._internal_match());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_SwitchExpression::CopyFrom(const Expression_SwitchExpression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.SwitchExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_SwitchExpression::IsInitialized() const {
  return true;
}

void Expression_SwitchExpression::InternalSwap(Expression_SwitchExpression* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ifs_.InternalSwap(&other->_impl_.ifs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_SwitchExpression, _impl_.match_)
      + sizeof(Expression_SwitchExpression::_impl_.match_)
      - PROTOBUF_FIELD_OFFSET(Expression_SwitchExpression, _impl_.else__)>(
          reinterpret_cast<char*>(&_impl_.else__),
          reinterpret_cast<char*>(&other->_impl_.else__));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_SwitchExpression::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[67]);
}

// ===================================================================

class Expression_SingularOrList::_Internal {
 public:
  static const ::substrait::Expression& value(const Expression_SingularOrList* msg);
};

const ::substrait::Expression&
Expression_SingularOrList::_Internal::value(const Expression_SingularOrList* msg) {
  return *msg->_impl_.value_;
}
Expression_SingularOrList::Expression_SingularOrList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.SingularOrList)
}
Expression_SingularOrList::Expression_SingularOrList(const Expression_SingularOrList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_SingularOrList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.options_){from._impl_.options_}
    , decltype(_impl_.value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::substrait::Expression(*from._impl_.value_);
  }
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.SingularOrList)
}

inline void Expression_SingularOrList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.options_){arena}
    , decltype(_impl_.value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Expression_SingularOrList::~Expression_SingularOrList() {
  // @@protoc_insertion_point(destructor:substrait.Expression.SingularOrList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_SingularOrList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.options_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.value_;
}

void Expression_SingularOrList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_SingularOrList::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.SingularOrList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.options_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_SingularOrList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.Expression value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .substrait.Expression options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_options(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_SingularOrList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.SingularOrList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.Expression value = 1;
  if (this->_internal_has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  // repeated .substrait.Expression options = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_options_size()); i < n; i++) {
    const auto& repfield = this->_internal_options(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.SingularOrList)
  return target;
}

size_t Expression_SingularOrList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.SingularOrList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.Expression options = 2;
  total_size += 1UL * this->_internal_options_size();
  for (const auto& msg : this->_impl_.options_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.Expression value = 1;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.value_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_SingularOrList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_SingularOrList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_SingularOrList::GetClassData() const { return &_class_data_; }


void Expression_SingularOrList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_SingularOrList*>(&to_msg);
  auto& from = static_cast<const Expression_SingularOrList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.SingularOrList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.options_.MergeFrom(from._impl_.options_);
  if (from._internal_has_value()) {
    _this->_internal_mutable_value()->::substrait::Expression::MergeFrom(
        from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_SingularOrList::CopyFrom(const Expression_SingularOrList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.SingularOrList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_SingularOrList::IsInitialized() const {
  return true;
}

void Expression_SingularOrList::InternalSwap(Expression_SingularOrList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.options_.InternalSwap(&other->_impl_.options_);
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_SingularOrList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[68]);
}

// ===================================================================

class Expression_MultiOrList_Record::_Internal {
 public:
};

Expression_MultiOrList_Record::Expression_MultiOrList_Record(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.MultiOrList.Record)
}
Expression_MultiOrList_Record::Expression_MultiOrList_Record(const Expression_MultiOrList_Record& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_MultiOrList_Record* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_){from._impl_.fields_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.MultiOrList.Record)
}

inline void Expression_MultiOrList_Record::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Expression_MultiOrList_Record::~Expression_MultiOrList_Record() {
  // @@protoc_insertion_point(destructor:substrait.Expression.MultiOrList.Record)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_MultiOrList_Record::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fields_.~RepeatedPtrField();
}

void Expression_MultiOrList_Record::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_MultiOrList_Record::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.MultiOrList.Record)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fields_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_MultiOrList_Record::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .substrait.Expression fields = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_MultiOrList_Record::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.MultiOrList.Record)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.Expression fields = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fields_size()); i < n; i++) {
    const auto& repfield = this->_internal_fields(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.MultiOrList.Record)
  return target;
}

size_t Expression_MultiOrList_Record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.MultiOrList.Record)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.Expression fields = 1;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->_impl_.fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_MultiOrList_Record::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_MultiOrList_Record::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_MultiOrList_Record::GetClassData() const { return &_class_data_; }


void Expression_MultiOrList_Record::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_MultiOrList_Record*>(&to_msg);
  auto& from = static_cast<const Expression_MultiOrList_Record&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.MultiOrList.Record)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.fields_.MergeFrom(from._impl_.fields_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_MultiOrList_Record::CopyFrom(const Expression_MultiOrList_Record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.MultiOrList.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_MultiOrList_Record::IsInitialized() const {
  return true;
}

void Expression_MultiOrList_Record::InternalSwap(Expression_MultiOrList_Record* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.fields_.InternalSwap(&other->_impl_.fields_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_MultiOrList_Record::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[69]);
}

// ===================================================================

class Expression_MultiOrList::_Internal {
 public:
};

Expression_MultiOrList::Expression_MultiOrList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.MultiOrList)
}
Expression_MultiOrList::Expression_MultiOrList(const Expression_MultiOrList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_MultiOrList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){from._impl_.value_}
    , decltype(_impl_.options_){from._impl_.options_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.MultiOrList)
}

inline void Expression_MultiOrList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){arena}
    , decltype(_impl_.options_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Expression_MultiOrList::~Expression_MultiOrList() {
  // @@protoc_insertion_point(destructor:substrait.Expression.MultiOrList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_MultiOrList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.~RepeatedPtrField();
  _impl_.options_.~RepeatedPtrField();
}

void Expression_MultiOrList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_MultiOrList::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.MultiOrList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.Clear();
  _impl_.options_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_MultiOrList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .substrait.Expression value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .substrait.Expression.MultiOrList.Record options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_options(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_MultiOrList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.MultiOrList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.Expression value = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_value_size()); i < n; i++) {
    const auto& repfield = this->_internal_value(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .substrait.Expression.MultiOrList.Record options = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_options_size()); i < n; i++) {
    const auto& repfield = this->_internal_options(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.MultiOrList)
  return target;
}

size_t Expression_MultiOrList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.MultiOrList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.Expression value = 1;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->_impl_.value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .substrait.Expression.MultiOrList.Record options = 2;
  total_size += 1UL * this->_internal_options_size();
  for (const auto& msg : this->_impl_.options_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_MultiOrList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_MultiOrList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_MultiOrList::GetClassData() const { return &_class_data_; }


void Expression_MultiOrList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_MultiOrList*>(&to_msg);
  auto& from = static_cast<const Expression_MultiOrList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.MultiOrList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.value_.MergeFrom(from._impl_.value_);
  _this->_impl_.options_.MergeFrom(from._impl_.options_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_MultiOrList::CopyFrom(const Expression_MultiOrList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.MultiOrList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_MultiOrList::IsInitialized() const {
  return true;
}

void Expression_MultiOrList::InternalSwap(Expression_MultiOrList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
  _impl_.options_.InternalSwap(&other->_impl_.options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_MultiOrList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[70]);
}

// ===================================================================

class Expression_EmbeddedFunction_PythonPickleFunction::_Internal {
 public:
};

Expression_EmbeddedFunction_PythonPickleFunction::Expression_EmbeddedFunction_PythonPickleFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.EmbeddedFunction.PythonPickleFunction)
}
Expression_EmbeddedFunction_PythonPickleFunction::Expression_EmbeddedFunction_PythonPickleFunction(const Expression_EmbeddedFunction_PythonPickleFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_EmbeddedFunction_PythonPickleFunction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.prerequisite_){from._impl_.prerequisite_}
    , decltype(_impl_.function_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.function_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.function_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_function().empty()) {
    _this->_impl_.function_.Set(from._internal_function(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.EmbeddedFunction.PythonPickleFunction)
}

inline void Expression_EmbeddedFunction_PythonPickleFunction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.prerequisite_){arena}
    , decltype(_impl_.function_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.function_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.function_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Expression_EmbeddedFunction_PythonPickleFunction::~Expression_EmbeddedFunction_PythonPickleFunction() {
  // @@protoc_insertion_point(destructor:substrait.Expression.EmbeddedFunction.PythonPickleFunction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_EmbeddedFunction_PythonPickleFunction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.prerequisite_.~RepeatedPtrField();
  _impl_.function_.Destroy();
}

void Expression_EmbeddedFunction_PythonPickleFunction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_EmbeddedFunction_PythonPickleFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.EmbeddedFunction.PythonPickleFunction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.prerequisite_.Clear();
  _impl_.function_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_EmbeddedFunction_PythonPickleFunction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes function = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_function();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string prerequisite = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_prerequisite();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "substrait.Expression.EmbeddedFunction.PythonPickleFunction.prerequisite"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_EmbeddedFunction_PythonPickleFunction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.EmbeddedFunction.PythonPickleFunction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes function = 1;
  if (!this->_internal_function().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_function(), target);
  }

  // repeated string prerequisite = 2;
  for (int i = 0, n = this->_internal_prerequisite_size(); i < n; i++) {
    const auto& s = this->_internal_prerequisite(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.Expression.EmbeddedFunction.PythonPickleFunction.prerequisite");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.EmbeddedFunction.PythonPickleFunction)
  return target;
}

size_t Expression_EmbeddedFunction_PythonPickleFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.EmbeddedFunction.PythonPickleFunction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string prerequisite = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.prerequisite_.size());
  for (int i = 0, n = _impl_.prerequisite_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.prerequisite_.Get(i));
  }

  // bytes function = 1;
  if (!this->_internal_function().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_function());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_EmbeddedFunction_PythonPickleFunction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_EmbeddedFunction_PythonPickleFunction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_EmbeddedFunction_PythonPickleFunction::GetClassData() const { return &_class_data_; }


void Expression_EmbeddedFunction_PythonPickleFunction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_EmbeddedFunction_PythonPickleFunction*>(&to_msg);
  auto& from = static_cast<const Expression_EmbeddedFunction_PythonPickleFunction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.EmbeddedFunction.PythonPickleFunction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.prerequisite_.MergeFrom(from._impl_.prerequisite_);
  if (!from._internal_function().empty()) {
    _this->_internal_set_function(from._internal_function());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_EmbeddedFunction_PythonPickleFunction::CopyFrom(const Expression_EmbeddedFunction_PythonPickleFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.EmbeddedFunction.PythonPickleFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_EmbeddedFunction_PythonPickleFunction::IsInitialized() const {
  return true;
}

void Expression_EmbeddedFunction_PythonPickleFunction::InternalSwap(Expression_EmbeddedFunction_PythonPickleFunction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.prerequisite_.InternalSwap(&other->_impl_.prerequisite_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.function_, lhs_arena,
      &other->_impl_.function_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_EmbeddedFunction_PythonPickleFunction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[71]);
}

// ===================================================================

class Expression_EmbeddedFunction_WebAssemblyFunction::_Internal {
 public:
};

Expression_EmbeddedFunction_WebAssemblyFunction::Expression_EmbeddedFunction_WebAssemblyFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.EmbeddedFunction.WebAssemblyFunction)
}
Expression_EmbeddedFunction_WebAssemblyFunction::Expression_EmbeddedFunction_WebAssemblyFunction(const Expression_EmbeddedFunction_WebAssemblyFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_EmbeddedFunction_WebAssemblyFunction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.prerequisite_){from._impl_.prerequisite_}
    , decltype(_impl_.script_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.script_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.script_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_script().empty()) {
    _this->_impl_.script_.Set(from._internal_script(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.EmbeddedFunction.WebAssemblyFunction)
}

inline void Expression_EmbeddedFunction_WebAssemblyFunction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.prerequisite_){arena}
    , decltype(_impl_.script_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.script_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.script_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Expression_EmbeddedFunction_WebAssemblyFunction::~Expression_EmbeddedFunction_WebAssemblyFunction() {
  // @@protoc_insertion_point(destructor:substrait.Expression.EmbeddedFunction.WebAssemblyFunction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_EmbeddedFunction_WebAssemblyFunction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.prerequisite_.~RepeatedPtrField();
  _impl_.script_.Destroy();
}

void Expression_EmbeddedFunction_WebAssemblyFunction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_EmbeddedFunction_WebAssemblyFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.EmbeddedFunction.WebAssemblyFunction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.prerequisite_.Clear();
  _impl_.script_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_EmbeddedFunction_WebAssemblyFunction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes script = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_script();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string prerequisite = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_prerequisite();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "substrait.Expression.EmbeddedFunction.WebAssemblyFunction.prerequisite"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_EmbeddedFunction_WebAssemblyFunction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.EmbeddedFunction.WebAssemblyFunction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes script = 1;
  if (!this->_internal_script().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_script(), target);
  }

  // repeated string prerequisite = 2;
  for (int i = 0, n = this->_internal_prerequisite_size(); i < n; i++) {
    const auto& s = this->_internal_prerequisite(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.Expression.EmbeddedFunction.WebAssemblyFunction.prerequisite");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.EmbeddedFunction.WebAssemblyFunction)
  return target;
}

size_t Expression_EmbeddedFunction_WebAssemblyFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.EmbeddedFunction.WebAssemblyFunction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string prerequisite = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.prerequisite_.size());
  for (int i = 0, n = _impl_.prerequisite_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.prerequisite_.Get(i));
  }

  // bytes script = 1;
  if (!this->_internal_script().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_script());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_EmbeddedFunction_WebAssemblyFunction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_EmbeddedFunction_WebAssemblyFunction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_EmbeddedFunction_WebAssemblyFunction::GetClassData() const { return &_class_data_; }


void Expression_EmbeddedFunction_WebAssemblyFunction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_EmbeddedFunction_WebAssemblyFunction*>(&to_msg);
  auto& from = static_cast<const Expression_EmbeddedFunction_WebAssemblyFunction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.EmbeddedFunction.WebAssemblyFunction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.prerequisite_.MergeFrom(from._impl_.prerequisite_);
  if (!from._internal_script().empty()) {
    _this->_internal_set_script(from._internal_script());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_EmbeddedFunction_WebAssemblyFunction::CopyFrom(const Expression_EmbeddedFunction_WebAssemblyFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.EmbeddedFunction.WebAssemblyFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_EmbeddedFunction_WebAssemblyFunction::IsInitialized() const {
  return true;
}

void Expression_EmbeddedFunction_WebAssemblyFunction::InternalSwap(Expression_EmbeddedFunction_WebAssemblyFunction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.prerequisite_.InternalSwap(&other->_impl_.prerequisite_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.script_, lhs_arena,
      &other->_impl_.script_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_EmbeddedFunction_WebAssemblyFunction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[72]);
}

// ===================================================================

class Expression_EmbeddedFunction::_Internal {
 public:
  static const ::substrait::Type& output_type(const Expression_EmbeddedFunction* msg);
  static const ::substrait::Expression_EmbeddedFunction_PythonPickleFunction& python_pickle_function(const Expression_EmbeddedFunction* msg);
  static const ::substrait::Expression_EmbeddedFunction_WebAssemblyFunction& web_assembly_function(const Expression_EmbeddedFunction* msg);
};

const ::substrait::Type&
Expression_EmbeddedFunction::_Internal::output_type(const Expression_EmbeddedFunction* msg) {
  return *msg->_impl_.output_type_;
}
const ::substrait::Expression_EmbeddedFunction_PythonPickleFunction&
Expression_EmbeddedFunction::_Internal::python_pickle_function(const Expression_EmbeddedFunction* msg) {
  return *msg->_impl_.kind_.python_pickle_function_;
}
const ::substrait::Expression_EmbeddedFunction_WebAssemblyFunction&
Expression_EmbeddedFunction::_Internal::web_assembly_function(const Expression_EmbeddedFunction* msg) {
  return *msg->_impl_.kind_.web_assembly_function_;
}
void Expression_EmbeddedFunction::clear_output_type() {
  if (GetArenaForAllocation() == nullptr && _impl_.output_type_ != nullptr) {
    delete _impl_.output_type_;
  }
  _impl_.output_type_ = nullptr;
}
void Expression_EmbeddedFunction::set_allocated_python_pickle_function(::substrait::Expression_EmbeddedFunction_PythonPickleFunction* python_pickle_function) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (python_pickle_function) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(python_pickle_function);
    if (message_arena != submessage_arena) {
      python_pickle_function = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, python_pickle_function, submessage_arena);
    }
    set_has_python_pickle_function();
    _impl_.kind_.python_pickle_function_ = python_pickle_function;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.EmbeddedFunction.python_pickle_function)
}
void Expression_EmbeddedFunction::set_allocated_web_assembly_function(::substrait::Expression_EmbeddedFunction_WebAssemblyFunction* web_assembly_function) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (web_assembly_function) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(web_assembly_function);
    if (message_arena != submessage_arena) {
      web_assembly_function = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, web_assembly_function, submessage_arena);
    }
    set_has_web_assembly_function();
    _impl_.kind_.web_assembly_function_ = web_assembly_function;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.EmbeddedFunction.web_assembly_function)
}
Expression_EmbeddedFunction::Expression_EmbeddedFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.EmbeddedFunction)
}
Expression_EmbeddedFunction::Expression_EmbeddedFunction(const Expression_EmbeddedFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_EmbeddedFunction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.arguments_){from._impl_.arguments_}
    , decltype(_impl_.output_type_){nullptr}
    , decltype(_impl_.kind_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_output_type()) {
    _this->_impl_.output_type_ = new ::substrait::Type(*from._impl_.output_type_);
  }
  clear_has_kind();
  switch (from.kind_case()) {
    case kPythonPickleFunction: {
      _this->_internal_mutable_python_pickle_function()->::substrait::Expression_EmbeddedFunction_PythonPickleFunction::MergeFrom(
          from._internal_python_pickle_function());
      break;
    }
    case kWebAssemblyFunction: {
      _this->_internal_mutable_web_assembly_function()->::substrait::Expression_EmbeddedFunction_WebAssemblyFunction::MergeFrom(
          from._internal_web_assembly_function());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.EmbeddedFunction)
}

inline void Expression_EmbeddedFunction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.arguments_){arena}
    , decltype(_impl_.output_type_){nullptr}
    , decltype(_impl_.kind_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_kind();
}

Expression_EmbeddedFunction::~Expression_EmbeddedFunction() {
  // @@protoc_insertion_point(destructor:substrait.Expression.EmbeddedFunction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_EmbeddedFunction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.arguments_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.output_type_;
  if (has_kind()) {
    clear_kind();
  }
}

void Expression_EmbeddedFunction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_EmbeddedFunction::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:substrait.Expression.EmbeddedFunction)
  switch (kind_case()) {
    case kPythonPickleFunction: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.python_pickle_function_;
      }
      break;
    }
    case kWebAssemblyFunction: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.web_assembly_function_;
      }
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}


void Expression_EmbeddedFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.EmbeddedFunction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.arguments_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.output_type_ != nullptr) {
    delete _impl_.output_type_;
  }
  _impl_.output_type_ = nullptr;
  clear_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_EmbeddedFunction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .substrait.Expression arguments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arguments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .substrait.Type output_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.EmbeddedFunction.PythonPickleFunction python_pickle_function = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_python_pickle_function(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.EmbeddedFunction.WebAssemblyFunction web_assembly_function = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_web_assembly_function(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_EmbeddedFunction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.EmbeddedFunction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.Expression arguments = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_arguments_size()); i < n; i++) {
    const auto& repfield = this->_internal_arguments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .substrait.Type output_type = 2;
  if (this->_internal_has_output_type()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::output_type(this),
        _Internal::output_type(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression.EmbeddedFunction.PythonPickleFunction python_pickle_function = 3;
  if (_internal_has_python_pickle_function()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::python_pickle_function(this),
        _Internal::python_pickle_function(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression.EmbeddedFunction.WebAssemblyFunction web_assembly_function = 4;
  if (_internal_has_web_assembly_function()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::web_assembly_function(this),
        _Internal::web_assembly_function(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.EmbeddedFunction)
  return target;
}

size_t Expression_EmbeddedFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.EmbeddedFunction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.Expression arguments = 1;
  total_size += 1UL * this->_internal_arguments_size();
  for (const auto& msg : this->_impl_.arguments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.Type output_type = 2;
  if (this->_internal_has_output_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.output_type_);
  }

  switch (kind_case()) {
    // .substrait.Expression.EmbeddedFunction.PythonPickleFunction python_pickle_function = 3;
    case kPythonPickleFunction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.python_pickle_function_);
      break;
    }
    // .substrait.Expression.EmbeddedFunction.WebAssemblyFunction web_assembly_function = 4;
    case kWebAssemblyFunction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.web_assembly_function_);
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_EmbeddedFunction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_EmbeddedFunction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_EmbeddedFunction::GetClassData() const { return &_class_data_; }


void Expression_EmbeddedFunction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_EmbeddedFunction*>(&to_msg);
  auto& from = static_cast<const Expression_EmbeddedFunction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.EmbeddedFunction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.arguments_.MergeFrom(from._impl_.arguments_);
  if (from._internal_has_output_type()) {
    _this->_internal_mutable_output_type()->::substrait::Type::MergeFrom(
        from._internal_output_type());
  }
  switch (from.kind_case()) {
    case kPythonPickleFunction: {
      _this->_internal_mutable_python_pickle_function()->::substrait::Expression_EmbeddedFunction_PythonPickleFunction::MergeFrom(
          from._internal_python_pickle_function());
      break;
    }
    case kWebAssemblyFunction: {
      _this->_internal_mutable_web_assembly_function()->::substrait::Expression_EmbeddedFunction_WebAssemblyFunction::MergeFrom(
          from._internal_web_assembly_function());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_EmbeddedFunction::CopyFrom(const Expression_EmbeddedFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.EmbeddedFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_EmbeddedFunction::IsInitialized() const {
  return true;
}

void Expression_EmbeddedFunction::InternalSwap(Expression_EmbeddedFunction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.arguments_.InternalSwap(&other->_impl_.arguments_);
  swap(_impl_.output_type_, other->_impl_.output_type_);
  swap(_impl_.kind_, other->_impl_.kind_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_EmbeddedFunction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[73]);
}

// ===================================================================

class Expression_ReferenceSegment_MapKey::_Internal {
 public:
  static const ::substrait::Expression_Literal& map_key(const Expression_ReferenceSegment_MapKey* msg);
  static const ::substrait::Expression_ReferenceSegment& child(const Expression_ReferenceSegment_MapKey* msg);
};

const ::substrait::Expression_Literal&
Expression_ReferenceSegment_MapKey::_Internal::map_key(const Expression_ReferenceSegment_MapKey* msg) {
  return *msg->_impl_.map_key_;
}
const ::substrait::Expression_ReferenceSegment&
Expression_ReferenceSegment_MapKey::_Internal::child(const Expression_ReferenceSegment_MapKey* msg) {
  return *msg->_impl_.child_;
}
Expression_ReferenceSegment_MapKey::Expression_ReferenceSegment_MapKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.ReferenceSegment.MapKey)
}
Expression_ReferenceSegment_MapKey::Expression_ReferenceSegment_MapKey(const Expression_ReferenceSegment_MapKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_ReferenceSegment_MapKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.map_key_){nullptr}
    , decltype(_impl_.child_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_map_key()) {
    _this->_impl_.map_key_ = new ::substrait::Expression_Literal(*from._impl_.map_key_);
  }
  if (from._internal_has_child()) {
    _this->_impl_.child_ = new ::substrait::Expression_ReferenceSegment(*from._impl_.child_);
  }
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.ReferenceSegment.MapKey)
}

inline void Expression_ReferenceSegment_MapKey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.map_key_){nullptr}
    , decltype(_impl_.child_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Expression_ReferenceSegment_MapKey::~Expression_ReferenceSegment_MapKey() {
  // @@protoc_insertion_point(destructor:substrait.Expression.ReferenceSegment.MapKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_ReferenceSegment_MapKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.map_key_;
  if (this != internal_default_instance()) delete _impl_.child_;
}

void Expression_ReferenceSegment_MapKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_ReferenceSegment_MapKey::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.ReferenceSegment.MapKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.map_key_ != nullptr) {
    delete _impl_.map_key_;
  }
  _impl_.map_key_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.child_ != nullptr) {
    delete _impl_.child_;
  }
  _impl_.child_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_ReferenceSegment_MapKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.Expression.Literal map_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.ReferenceSegment child = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_ReferenceSegment_MapKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.ReferenceSegment.MapKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.Expression.Literal map_key = 1;
  if (this->_internal_has_map_key()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::map_key(this),
        _Internal::map_key(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression.ReferenceSegment child = 2;
  if (this->_internal_has_child()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::child(this),
        _Internal::child(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.ReferenceSegment.MapKey)
  return target;
}

size_t Expression_ReferenceSegment_MapKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.ReferenceSegment.MapKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.Expression.Literal map_key = 1;
  if (this->_internal_has_map_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.map_key_);
  }

  // .substrait.Expression.ReferenceSegment child = 2;
  if (this->_internal_has_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.child_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_ReferenceSegment_MapKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_ReferenceSegment_MapKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_ReferenceSegment_MapKey::GetClassData() const { return &_class_data_; }


void Expression_ReferenceSegment_MapKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_ReferenceSegment_MapKey*>(&to_msg);
  auto& from = static_cast<const Expression_ReferenceSegment_MapKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.ReferenceSegment.MapKey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_map_key()) {
    _this->_internal_mutable_map_key()->::substrait::Expression_Literal::MergeFrom(
        from._internal_map_key());
  }
  if (from._internal_has_child()) {
    _this->_internal_mutable_child()->::substrait::Expression_ReferenceSegment::MergeFrom(
        from._internal_child());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_ReferenceSegment_MapKey::CopyFrom(const Expression_ReferenceSegment_MapKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.ReferenceSegment.MapKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_ReferenceSegment_MapKey::IsInitialized() const {
  return true;
}

void Expression_ReferenceSegment_MapKey::InternalSwap(Expression_ReferenceSegment_MapKey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_ReferenceSegment_MapKey, _impl_.child_)
      + sizeof(Expression_ReferenceSegment_MapKey::_impl_.child_)
      - PROTOBUF_FIELD_OFFSET(Expression_ReferenceSegment_MapKey, _impl_.map_key_)>(
          reinterpret_cast<char*>(&_impl_.map_key_),
          reinterpret_cast<char*>(&other->_impl_.map_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_ReferenceSegment_MapKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[74]);
}

// ===================================================================

class Expression_ReferenceSegment_StructField::_Internal {
 public:
  static const ::substrait::Expression_ReferenceSegment& child(const Expression_ReferenceSegment_StructField* msg);
};

const ::substrait::Expression_ReferenceSegment&
Expression_ReferenceSegment_StructField::_Internal::child(const Expression_ReferenceSegment_StructField* msg) {
  return *msg->_impl_.child_;
}
Expression_ReferenceSegment_StructField::Expression_ReferenceSegment_StructField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.ReferenceSegment.StructField)
}
Expression_ReferenceSegment_StructField::Expression_ReferenceSegment_StructField(const Expression_ReferenceSegment_StructField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_ReferenceSegment_StructField* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.child_){nullptr}
    , decltype(_impl_.field_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_child()) {
    _this->_impl_.child_ = new ::substrait::Expression_ReferenceSegment(*from._impl_.child_);
  }
  _this->_impl_.field_ = from._impl_.field_;
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.ReferenceSegment.StructField)
}

inline void Expression_ReferenceSegment_StructField::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.child_){nullptr}
    , decltype(_impl_.field_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Expression_ReferenceSegment_StructField::~Expression_ReferenceSegment_StructField() {
  // @@protoc_insertion_point(destructor:substrait.Expression.ReferenceSegment.StructField)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_ReferenceSegment_StructField::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.child_;
}

void Expression_ReferenceSegment_StructField::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_ReferenceSegment_StructField::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.ReferenceSegment.StructField)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.child_ != nullptr) {
    delete _impl_.child_;
  }
  _impl_.child_ = nullptr;
  _impl_.field_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_ReferenceSegment_StructField::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.ReferenceSegment child = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_ReferenceSegment_StructField::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.ReferenceSegment.StructField)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 field = 1;
  if (this->_internal_field() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_field(), target);
  }

  // .substrait.Expression.ReferenceSegment child = 2;
  if (this->_internal_has_child()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::child(this),
        _Internal::child(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.ReferenceSegment.StructField)
  return target;
}

size_t Expression_ReferenceSegment_StructField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.ReferenceSegment.StructField)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.Expression.ReferenceSegment child = 2;
  if (this->_internal_has_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.child_);
  }

  // int32 field = 1;
  if (this->_internal_field() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_field());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_ReferenceSegment_StructField::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_ReferenceSegment_StructField::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_ReferenceSegment_StructField::GetClassData() const { return &_class_data_; }


void Expression_ReferenceSegment_StructField::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_ReferenceSegment_StructField*>(&to_msg);
  auto& from = static_cast<const Expression_ReferenceSegment_StructField&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.ReferenceSegment.StructField)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_child()) {
    _this->_internal_mutable_child()->::substrait::Expression_ReferenceSegment::MergeFrom(
        from._internal_child());
  }
  if (from._internal_field() != 0) {
    _this->_internal_set_field(from._internal_field());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_ReferenceSegment_StructField::CopyFrom(const Expression_ReferenceSegment_StructField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.ReferenceSegment.StructField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_ReferenceSegment_StructField::IsInitialized() const {
  return true;
}

void Expression_ReferenceSegment_StructField::InternalSwap(Expression_ReferenceSegment_StructField* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_ReferenceSegment_StructField, _impl_.field_)
      + sizeof(Expression_ReferenceSegment_StructField::_impl_.field_)
      - PROTOBUF_FIELD_OFFSET(Expression_ReferenceSegment_StructField, _impl_.child_)>(
          reinterpret_cast<char*>(&_impl_.child_),
          reinterpret_cast<char*>(&other->_impl_.child_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_ReferenceSegment_StructField::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[75]);
}

// ===================================================================

class Expression_ReferenceSegment_ListElement::_Internal {
 public:
  static const ::substrait::Expression_ReferenceSegment& child(const Expression_ReferenceSegment_ListElement* msg);
};

const ::substrait::Expression_ReferenceSegment&
Expression_ReferenceSegment_ListElement::_Internal::child(const Expression_ReferenceSegment_ListElement* msg) {
  return *msg->_impl_.child_;
}
Expression_ReferenceSegment_ListElement::Expression_ReferenceSegment_ListElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.ReferenceSegment.ListElement)
}
Expression_ReferenceSegment_ListElement::Expression_ReferenceSegment_ListElement(const Expression_ReferenceSegment_ListElement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_ReferenceSegment_ListElement* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.child_){nullptr}
    , decltype(_impl_.offset_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_child()) {
    _this->_impl_.child_ = new ::substrait::Expression_ReferenceSegment(*from._impl_.child_);
  }
  _this->_impl_.offset_ = from._impl_.offset_;
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.ReferenceSegment.ListElement)
}

inline void Expression_ReferenceSegment_ListElement::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.child_){nullptr}
    , decltype(_impl_.offset_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Expression_ReferenceSegment_ListElement::~Expression_ReferenceSegment_ListElement() {
  // @@protoc_insertion_point(destructor:substrait.Expression.ReferenceSegment.ListElement)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_ReferenceSegment_ListElement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.child_;
}

void Expression_ReferenceSegment_ListElement::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_ReferenceSegment_ListElement::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.ReferenceSegment.ListElement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.child_ != nullptr) {
    delete _impl_.child_;
  }
  _impl_.child_ = nullptr;
  _impl_.offset_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_ReferenceSegment_ListElement::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.ReferenceSegment child = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_ReferenceSegment_ListElement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.ReferenceSegment.ListElement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 offset = 1;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_offset(), target);
  }

  // .substrait.Expression.ReferenceSegment child = 2;
  if (this->_internal_has_child()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::child(this),
        _Internal::child(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.ReferenceSegment.ListElement)
  return target;
}

size_t Expression_ReferenceSegment_ListElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.ReferenceSegment.ListElement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.Expression.ReferenceSegment child = 2;
  if (this->_internal_has_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.child_);
  }

  // int32 offset = 1;
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_offset());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_ReferenceSegment_ListElement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_ReferenceSegment_ListElement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_ReferenceSegment_ListElement::GetClassData() const { return &_class_data_; }


void Expression_ReferenceSegment_ListElement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_ReferenceSegment_ListElement*>(&to_msg);
  auto& from = static_cast<const Expression_ReferenceSegment_ListElement&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.ReferenceSegment.ListElement)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_child()) {
    _this->_internal_mutable_child()->::substrait::Expression_ReferenceSegment::MergeFrom(
        from._internal_child());
  }
  if (from._internal_offset() != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_ReferenceSegment_ListElement::CopyFrom(const Expression_ReferenceSegment_ListElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.ReferenceSegment.ListElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_ReferenceSegment_ListElement::IsInitialized() const {
  return true;
}

void Expression_ReferenceSegment_ListElement::InternalSwap(Expression_ReferenceSegment_ListElement* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_ReferenceSegment_ListElement, _impl_.offset_)
      + sizeof(Expression_ReferenceSegment_ListElement::_impl_.offset_)
      - PROTOBUF_FIELD_OFFSET(Expression_ReferenceSegment_ListElement, _impl_.child_)>(
          reinterpret_cast<char*>(&_impl_.child_),
          reinterpret_cast<char*>(&other->_impl_.child_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_ReferenceSegment_ListElement::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[76]);
}

// ===================================================================

class Expression_ReferenceSegment::_Internal {
 public:
  static const ::substrait::Expression_ReferenceSegment_MapKey& map_key(const Expression_ReferenceSegment* msg);
  static const ::substrait::Expression_ReferenceSegment_StructField& struct_field(const Expression_ReferenceSegment* msg);
  static const ::substrait::Expression_ReferenceSegment_ListElement& list_element(const Expression_ReferenceSegment* msg);
};

const ::substrait::Expression_ReferenceSegment_MapKey&
Expression_ReferenceSegment::_Internal::map_key(const Expression_ReferenceSegment* msg) {
  return *msg->_impl_.reference_type_.map_key_;
}
const ::substrait::Expression_ReferenceSegment_StructField&
Expression_ReferenceSegment::_Internal::struct_field(const Expression_ReferenceSegment* msg) {
  return *msg->_impl_.reference_type_.struct_field_;
}
const ::substrait::Expression_ReferenceSegment_ListElement&
Expression_ReferenceSegment::_Internal::list_element(const Expression_ReferenceSegment* msg) {
  return *msg->_impl_.reference_type_.list_element_;
}
void Expression_ReferenceSegment::set_allocated_map_key(::substrait::Expression_ReferenceSegment_MapKey* map_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_reference_type();
  if (map_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(map_key);
    if (message_arena != submessage_arena) {
      map_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_key, submessage_arena);
    }
    set_has_map_key();
    _impl_.reference_type_.map_key_ = map_key;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.ReferenceSegment.map_key)
}
void Expression_ReferenceSegment::set_allocated_struct_field(::substrait::Expression_ReferenceSegment_StructField* struct_field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_reference_type();
  if (struct_field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(struct_field);
    if (message_arena != submessage_arena) {
      struct_field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_field, submessage_arena);
    }
    set_has_struct_field();
    _impl_.reference_type_.struct_field_ = struct_field;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.ReferenceSegment.struct_field)
}
void Expression_ReferenceSegment::set_allocated_list_element(::substrait::Expression_ReferenceSegment_ListElement* list_element) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_reference_type();
  if (list_element) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(list_element);
    if (message_arena != submessage_arena) {
      list_element = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_element, submessage_arena);
    }
    set_has_list_element();
    _impl_.reference_type_.list_element_ = list_element;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.ReferenceSegment.list_element)
}
Expression_ReferenceSegment::Expression_ReferenceSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.ReferenceSegment)
}
Expression_ReferenceSegment::Expression_ReferenceSegment(const Expression_ReferenceSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_ReferenceSegment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reference_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_reference_type();
  switch (from.reference_type_case()) {
    case kMapKey: {
      _this->_internal_mutable_map_key()->::substrait::Expression_ReferenceSegment_MapKey::MergeFrom(
          from._internal_map_key());
      break;
    }
    case kStructField: {
      _this->_internal_mutable_struct_field()->::substrait::Expression_ReferenceSegment_StructField::MergeFrom(
          from._internal_struct_field());
      break;
    }
    case kListElement: {
      _this->_internal_mutable_list_element()->::substrait::Expression_ReferenceSegment_ListElement::MergeFrom(
          from._internal_list_element());
      break;
    }
    case REFERENCE_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.ReferenceSegment)
}

inline void Expression_ReferenceSegment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reference_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_reference_type();
}

Expression_ReferenceSegment::~Expression_ReferenceSegment() {
  // @@protoc_insertion_point(destructor:substrait.Expression.ReferenceSegment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_ReferenceSegment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_reference_type()) {
    clear_reference_type();
  }
}

void Expression_ReferenceSegment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_ReferenceSegment::clear_reference_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.Expression.ReferenceSegment)
  switch (reference_type_case()) {
    case kMapKey: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.reference_type_.map_key_;
      }
      break;
    }
    case kStructField: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.reference_type_.struct_field_;
      }
      break;
    }
    case kListElement: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.reference_type_.list_element_;
      }
      break;
    }
    case REFERENCE_TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = REFERENCE_TYPE_NOT_SET;
}


void Expression_ReferenceSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.ReferenceSegment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_reference_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_ReferenceSegment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.Expression.ReferenceSegment.MapKey map_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.ReferenceSegment.StructField struct_field = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_field(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.ReferenceSegment.ListElement list_element = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_element(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_ReferenceSegment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.ReferenceSegment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.Expression.ReferenceSegment.MapKey map_key = 1;
  if (_internal_has_map_key()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::map_key(this),
        _Internal::map_key(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression.ReferenceSegment.StructField struct_field = 2;
  if (_internal_has_struct_field()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::struct_field(this),
        _Internal::struct_field(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression.ReferenceSegment.ListElement list_element = 3;
  if (_internal_has_list_element()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::list_element(this),
        _Internal::list_element(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.ReferenceSegment)
  return target;
}

size_t Expression_ReferenceSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.ReferenceSegment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (reference_type_case()) {
    // .substrait.Expression.ReferenceSegment.MapKey map_key = 1;
    case kMapKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.reference_type_.map_key_);
      break;
    }
    // .substrait.Expression.ReferenceSegment.StructField struct_field = 2;
    case kStructField: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.reference_type_.struct_field_);
      break;
    }
    // .substrait.Expression.ReferenceSegment.ListElement list_element = 3;
    case kListElement: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.reference_type_.list_element_);
      break;
    }
    case REFERENCE_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_ReferenceSegment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_ReferenceSegment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_ReferenceSegment::GetClassData() const { return &_class_data_; }


void Expression_ReferenceSegment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_ReferenceSegment*>(&to_msg);
  auto& from = static_cast<const Expression_ReferenceSegment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.ReferenceSegment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.reference_type_case()) {
    case kMapKey: {
      _this->_internal_mutable_map_key()->::substrait::Expression_ReferenceSegment_MapKey::MergeFrom(
          from._internal_map_key());
      break;
    }
    case kStructField: {
      _this->_internal_mutable_struct_field()->::substrait::Expression_ReferenceSegment_StructField::MergeFrom(
          from._internal_struct_field());
      break;
    }
    case kListElement: {
      _this->_internal_mutable_list_element()->::substrait::Expression_ReferenceSegment_ListElement::MergeFrom(
          from._internal_list_element());
      break;
    }
    case REFERENCE_TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_ReferenceSegment::CopyFrom(const Expression_ReferenceSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.ReferenceSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_ReferenceSegment::IsInitialized() const {
  return true;
}

void Expression_ReferenceSegment::InternalSwap(Expression_ReferenceSegment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.reference_type_, other->_impl_.reference_type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_ReferenceSegment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[77]);
}

// ===================================================================

class Expression_MaskExpression_Select::_Internal {
 public:
  static const ::substrait::Expression_MaskExpression_StructSelect& struct_(const Expression_MaskExpression_Select* msg);
  static const ::substrait::Expression_MaskExpression_ListSelect& list(const Expression_MaskExpression_Select* msg);
  static const ::substrait::Expression_MaskExpression_MapSelect& map(const Expression_MaskExpression_Select* msg);
};

const ::substrait::Expression_MaskExpression_StructSelect&
Expression_MaskExpression_Select::_Internal::struct_(const Expression_MaskExpression_Select* msg) {
  return *msg->_impl_.type_.struct__;
}
const ::substrait::Expression_MaskExpression_ListSelect&
Expression_MaskExpression_Select::_Internal::list(const Expression_MaskExpression_Select* msg) {
  return *msg->_impl_.type_.list_;
}
const ::substrait::Expression_MaskExpression_MapSelect&
Expression_MaskExpression_Select::_Internal::map(const Expression_MaskExpression_Select* msg) {
  return *msg->_impl_.type_.map_;
}
void Expression_MaskExpression_Select::set_allocated_struct_(::substrait::Expression_MaskExpression_StructSelect* struct_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (struct_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(struct_);
    if (message_arena != submessage_arena) {
      struct_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_, submessage_arena);
    }
    set_has_struct_();
    _impl_.type_.struct__ = struct_;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.MaskExpression.Select.struct)
}
void Expression_MaskExpression_Select::set_allocated_list(::substrait::Expression_MaskExpression_ListSelect* list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(list);
    if (message_arena != submessage_arena) {
      list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list, submessage_arena);
    }
    set_has_list();
    _impl_.type_.list_ = list;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.MaskExpression.Select.list)
}
void Expression_MaskExpression_Select::set_allocated_map(::substrait::Expression_MaskExpression_MapSelect* map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(map);
    if (message_arena != submessage_arena) {
      map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map, submessage_arena);
    }
    set_has_map();
    _impl_.type_.map_ = map;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.MaskExpression.Select.map)
}
Expression_MaskExpression_Select::Expression_MaskExpression_Select(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.MaskExpression.Select)
}
Expression_MaskExpression_Select::Expression_MaskExpression_Select(const Expression_MaskExpression_Select& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_MaskExpression_Select* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kStruct: {
      _this->_internal_mutable_struct_()->::substrait::Expression_MaskExpression_StructSelect::MergeFrom(
          from._internal_struct_());
      break;
    }
    case kList: {
      _this->_internal_mutable_list()->::substrait::Expression_MaskExpression_ListSelect::MergeFrom(
          from._internal_list());
      break;
    }
    case kMap: {
      _this->_internal_mutable_map()->::substrait::Expression_MaskExpression_MapSelect::MergeFrom(
          from._internal_map());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.MaskExpression.Select)
}

inline void Expression_MaskExpression_Select::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_type();
}

Expression_MaskExpression_Select::~Expression_MaskExpression_Select() {
  // @@protoc_insertion_point(destructor:substrait.Expression.MaskExpression.Select)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_MaskExpression_Select::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void Expression_MaskExpression_Select::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_MaskExpression_Select::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.Expression.MaskExpression.Select)
  switch (type_case()) {
    case kStruct: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.struct__;
      }
      break;
    }
    case kList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.list_;
      }
      break;
    }
    case kMap: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.map_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TYPE_NOT_SET;
}


void Expression_MaskExpression_Select::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.MaskExpression.Select)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_MaskExpression_Select::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.Expression.MaskExpression.StructSelect struct = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.MaskExpression.ListSelect list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.MaskExpression.MapSelect map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_MaskExpression_Select::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.MaskExpression.Select)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.Expression.MaskExpression.StructSelect struct = 1;
  if (_internal_has_struct_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::struct_(this),
        _Internal::struct_(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression.MaskExpression.ListSelect list = 2;
  if (_internal_has_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::list(this),
        _Internal::list(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression.MaskExpression.MapSelect map = 3;
  if (_internal_has_map()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::map(this),
        _Internal::map(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.MaskExpression.Select)
  return target;
}

size_t Expression_MaskExpression_Select::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.MaskExpression.Select)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .substrait.Expression.MaskExpression.StructSelect struct = 1;
    case kStruct: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.struct__);
      break;
    }
    // .substrait.Expression.MaskExpression.ListSelect list = 2;
    case kList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.list_);
      break;
    }
    // .substrait.Expression.MaskExpression.MapSelect map = 3;
    case kMap: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.map_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_MaskExpression_Select::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_MaskExpression_Select::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_MaskExpression_Select::GetClassData() const { return &_class_data_; }


void Expression_MaskExpression_Select::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_MaskExpression_Select*>(&to_msg);
  auto& from = static_cast<const Expression_MaskExpression_Select&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.MaskExpression.Select)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kStruct: {
      _this->_internal_mutable_struct_()->::substrait::Expression_MaskExpression_StructSelect::MergeFrom(
          from._internal_struct_());
      break;
    }
    case kList: {
      _this->_internal_mutable_list()->::substrait::Expression_MaskExpression_ListSelect::MergeFrom(
          from._internal_list());
      break;
    }
    case kMap: {
      _this->_internal_mutable_map()->::substrait::Expression_MaskExpression_MapSelect::MergeFrom(
          from._internal_map());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_MaskExpression_Select::CopyFrom(const Expression_MaskExpression_Select& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.MaskExpression.Select)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_MaskExpression_Select::IsInitialized() const {
  return true;
}

void Expression_MaskExpression_Select::InternalSwap(Expression_MaskExpression_Select* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_MaskExpression_Select::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[78]);
}

// ===================================================================

class Expression_MaskExpression_StructSelect::_Internal {
 public:
};

Expression_MaskExpression_StructSelect::Expression_MaskExpression_StructSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.MaskExpression.StructSelect)
}
Expression_MaskExpression_StructSelect::Expression_MaskExpression_StructSelect(const Expression_MaskExpression_StructSelect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_MaskExpression_StructSelect* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.struct_items_){from._impl_.struct_items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.MaskExpression.StructSelect)
}

inline void Expression_MaskExpression_StructSelect::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.struct_items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Expression_MaskExpression_StructSelect::~Expression_MaskExpression_StructSelect() {
  // @@protoc_insertion_point(destructor:substrait.Expression.MaskExpression.StructSelect)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_MaskExpression_StructSelect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.struct_items_.~RepeatedPtrField();
}

void Expression_MaskExpression_StructSelect::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_MaskExpression_StructSelect::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.MaskExpression.StructSelect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.struct_items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_MaskExpression_StructSelect::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .substrait.Expression.MaskExpression.StructItem struct_items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_struct_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_MaskExpression_StructSelect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.MaskExpression.StructSelect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.Expression.MaskExpression.StructItem struct_items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_struct_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_struct_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.MaskExpression.StructSelect)
  return target;
}

size_t Expression_MaskExpression_StructSelect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.MaskExpression.StructSelect)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.Expression.MaskExpression.StructItem struct_items = 1;
  total_size += 1UL * this->_internal_struct_items_size();
  for (const auto& msg : this->_impl_.struct_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_MaskExpression_StructSelect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_MaskExpression_StructSelect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_MaskExpression_StructSelect::GetClassData() const { return &_class_data_; }


void Expression_MaskExpression_StructSelect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_MaskExpression_StructSelect*>(&to_msg);
  auto& from = static_cast<const Expression_MaskExpression_StructSelect&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.MaskExpression.StructSelect)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.struct_items_.MergeFrom(from._impl_.struct_items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_MaskExpression_StructSelect::CopyFrom(const Expression_MaskExpression_StructSelect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.MaskExpression.StructSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_MaskExpression_StructSelect::IsInitialized() const {
  return true;
}

void Expression_MaskExpression_StructSelect::InternalSwap(Expression_MaskExpression_StructSelect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.struct_items_.InternalSwap(&other->_impl_.struct_items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_MaskExpression_StructSelect::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[79]);
}

// ===================================================================

class Expression_MaskExpression_StructItem::_Internal {
 public:
  static const ::substrait::Expression_MaskExpression_Select& child(const Expression_MaskExpression_StructItem* msg);
};

const ::substrait::Expression_MaskExpression_Select&
Expression_MaskExpression_StructItem::_Internal::child(const Expression_MaskExpression_StructItem* msg) {
  return *msg->_impl_.child_;
}
Expression_MaskExpression_StructItem::Expression_MaskExpression_StructItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.MaskExpression.StructItem)
}
Expression_MaskExpression_StructItem::Expression_MaskExpression_StructItem(const Expression_MaskExpression_StructItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_MaskExpression_StructItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.child_){nullptr}
    , decltype(_impl_.field_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_child()) {
    _this->_impl_.child_ = new ::substrait::Expression_MaskExpression_Select(*from._impl_.child_);
  }
  _this->_impl_.field_ = from._impl_.field_;
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.MaskExpression.StructItem)
}

inline void Expression_MaskExpression_StructItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.child_){nullptr}
    , decltype(_impl_.field_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Expression_MaskExpression_StructItem::~Expression_MaskExpression_StructItem() {
  // @@protoc_insertion_point(destructor:substrait.Expression.MaskExpression.StructItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_MaskExpression_StructItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.child_;
}

void Expression_MaskExpression_StructItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_MaskExpression_StructItem::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.MaskExpression.StructItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.child_ != nullptr) {
    delete _impl_.child_;
  }
  _impl_.child_ = nullptr;
  _impl_.field_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_MaskExpression_StructItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.MaskExpression.Select child = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_MaskExpression_StructItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.MaskExpression.StructItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 field = 1;
  if (this->_internal_field() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_field(), target);
  }

  // .substrait.Expression.MaskExpression.Select child = 2;
  if (this->_internal_has_child()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::child(this),
        _Internal::child(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.MaskExpression.StructItem)
  return target;
}

size_t Expression_MaskExpression_StructItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.MaskExpression.StructItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.Expression.MaskExpression.Select child = 2;
  if (this->_internal_has_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.child_);
  }

  // int32 field = 1;
  if (this->_internal_field() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_field());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_MaskExpression_StructItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_MaskExpression_StructItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_MaskExpression_StructItem::GetClassData() const { return &_class_data_; }


void Expression_MaskExpression_StructItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_MaskExpression_StructItem*>(&to_msg);
  auto& from = static_cast<const Expression_MaskExpression_StructItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.MaskExpression.StructItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_child()) {
    _this->_internal_mutable_child()->::substrait::Expression_MaskExpression_Select::MergeFrom(
        from._internal_child());
  }
  if (from._internal_field() != 0) {
    _this->_internal_set_field(from._internal_field());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_MaskExpression_StructItem::CopyFrom(const Expression_MaskExpression_StructItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.MaskExpression.StructItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_MaskExpression_StructItem::IsInitialized() const {
  return true;
}

void Expression_MaskExpression_StructItem::InternalSwap(Expression_MaskExpression_StructItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_MaskExpression_StructItem, _impl_.field_)
      + sizeof(Expression_MaskExpression_StructItem::_impl_.field_)
      - PROTOBUF_FIELD_OFFSET(Expression_MaskExpression_StructItem, _impl_.child_)>(
          reinterpret_cast<char*>(&_impl_.child_),
          reinterpret_cast<char*>(&other->_impl_.child_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_MaskExpression_StructItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[80]);
}

// ===================================================================

class Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::_Internal {
 public:
};

Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement)
}
Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement(const Expression_MaskExpression_ListSelect_ListSelectItem_ListElement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.field_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.field_ = from._impl_.field_;
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement)
}

inline void Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.field_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::~Expression_MaskExpression_ListSelect_ListSelectItem_ListElement() {
  // @@protoc_insertion_point(destructor:substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.field_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 field = 1;
  if (this->_internal_field() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_field(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement)
  return target;
}

size_t Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 field = 1;
  if (this->_internal_field() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_field());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::GetClassData() const { return &_class_data_; }


void Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_MaskExpression_ListSelect_ListSelectItem_ListElement*>(&to_msg);
  auto& from = static_cast<const Expression_MaskExpression_ListSelect_ListSelectItem_ListElement&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_field() != 0) {
    _this->_internal_set_field(from._internal_field());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::CopyFrom(const Expression_MaskExpression_ListSelect_ListSelectItem_ListElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::IsInitialized() const {
  return true;
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::InternalSwap(Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.field_, other->_impl_.field_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[81]);
}

// ===================================================================

class Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::_Internal {
 public:
};

Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice)
}
Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice(const Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.start_){}
    , decltype(_impl_.end_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.start_, &from._impl_.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.end_) -
    reinterpret_cast<char*>(&_impl_.start_)) + sizeof(_impl_.end_));
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice)
}

inline void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.start_){0}
    , decltype(_impl_.end_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::~Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice() {
  // @@protoc_insertion_point(destructor:substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.end_) -
      reinterpret_cast<char*>(&_impl_.start_)) + sizeof(_impl_.end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 start = 1;
  if (this->_internal_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_start(), target);
  }

  // int32 end = 2;
  if (this->_internal_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice)
  return target;
}

size_t Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 start = 1;
  if (this->_internal_start() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_start());
  }

  // int32 end = 2;
  if (this->_internal_end() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_end());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::GetClassData() const { return &_class_data_; }


void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice*>(&to_msg);
  auto& from = static_cast<const Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_start() != 0) {
    _this->_internal_set_start(from._internal_start());
  }
  if (from._internal_end() != 0) {
    _this->_internal_set_end(from._internal_end());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::CopyFrom(const Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::IsInitialized() const {
  return true;
}

void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::InternalSwap(Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice, _impl_.end_)
      + sizeof(Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::_impl_.end_)
      - PROTOBUF_FIELD_OFFSET(Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice, _impl_.start_)>(
          reinterpret_cast<char*>(&_impl_.start_),
          reinterpret_cast<char*>(&other->_impl_.start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[82]);
}

// ===================================================================

class Expression_MaskExpression_ListSelect_ListSelectItem::_Internal {
 public:
  static const ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement& item(const Expression_MaskExpression_ListSelect_ListSelectItem* msg);
  static const ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice& slice(const Expression_MaskExpression_ListSelect_ListSelectItem* msg);
};

const ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement&
Expression_MaskExpression_ListSelect_ListSelectItem::_Internal::item(const Expression_MaskExpression_ListSelect_ListSelectItem* msg) {
  return *msg->_impl_.type_.item_;
}
const ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice&
Expression_MaskExpression_ListSelect_ListSelectItem::_Internal::slice(const Expression_MaskExpression_ListSelect_ListSelectItem* msg) {
  return *msg->_impl_.type_.slice_;
}
void Expression_MaskExpression_ListSelect_ListSelectItem::set_allocated_item(::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(item);
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    set_has_item();
    _impl_.type_.item_ = item;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.MaskExpression.ListSelect.ListSelectItem.item)
}
void Expression_MaskExpression_ListSelect_ListSelectItem::set_allocated_slice(::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* slice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (slice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(slice);
    if (message_arena != submessage_arena) {
      slice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slice, submessage_arena);
    }
    set_has_slice();
    _impl_.type_.slice_ = slice;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.MaskExpression.ListSelect.ListSelectItem.slice)
}
Expression_MaskExpression_ListSelect_ListSelectItem::Expression_MaskExpression_ListSelect_ListSelectItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.MaskExpression.ListSelect.ListSelectItem)
}
Expression_MaskExpression_ListSelect_ListSelectItem::Expression_MaskExpression_ListSelect_ListSelectItem(const Expression_MaskExpression_ListSelect_ListSelectItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_MaskExpression_ListSelect_ListSelectItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kItem: {
      _this->_internal_mutable_item()->::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::MergeFrom(
          from._internal_item());
      break;
    }
    case kSlice: {
      _this->_internal_mutable_slice()->::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::MergeFrom(
          from._internal_slice());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.MaskExpression.ListSelect.ListSelectItem)
}

inline void Expression_MaskExpression_ListSelect_ListSelectItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_type();
}

Expression_MaskExpression_ListSelect_ListSelectItem::~Expression_MaskExpression_ListSelect_ListSelectItem() {
  // @@protoc_insertion_point(destructor:substrait.Expression.MaskExpression.ListSelect.ListSelectItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_MaskExpression_ListSelect_ListSelectItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void Expression_MaskExpression_ListSelect_ListSelectItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_MaskExpression_ListSelect_ListSelectItem::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.Expression.MaskExpression.ListSelect.ListSelectItem)
  switch (type_case()) {
    case kItem: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.item_;
      }
      break;
    }
    case kSlice: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.slice_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TYPE_NOT_SET;
}


void Expression_MaskExpression_ListSelect_ListSelectItem::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.MaskExpression.ListSelect.ListSelectItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_MaskExpression_ListSelect_ListSelectItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice slice = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slice(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_MaskExpression_ListSelect_ListSelectItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.MaskExpression.ListSelect.ListSelectItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement item = 1;
  if (_internal_has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::item(this),
        _Internal::item(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice slice = 2;
  if (_internal_has_slice()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slice(this),
        _Internal::slice(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.MaskExpression.ListSelect.ListSelectItem)
  return target;
}

size_t Expression_MaskExpression_ListSelect_ListSelectItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.MaskExpression.ListSelect.ListSelectItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement item = 1;
    case kItem: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.item_);
      break;
    }
    // .substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice slice = 2;
    case kSlice: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.slice_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_MaskExpression_ListSelect_ListSelectItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_MaskExpression_ListSelect_ListSelectItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_MaskExpression_ListSelect_ListSelectItem::GetClassData() const { return &_class_data_; }


void Expression_MaskExpression_ListSelect_ListSelectItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_MaskExpression_ListSelect_ListSelectItem*>(&to_msg);
  auto& from = static_cast<const Expression_MaskExpression_ListSelect_ListSelectItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.MaskExpression.ListSelect.ListSelectItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kItem: {
      _this->_internal_mutable_item()->::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::MergeFrom(
          from._internal_item());
      break;
    }
    case kSlice: {
      _this->_internal_mutable_slice()->::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::MergeFrom(
          from._internal_slice());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_MaskExpression_ListSelect_ListSelectItem::CopyFrom(const Expression_MaskExpression_ListSelect_ListSelectItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.MaskExpression.ListSelect.ListSelectItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_MaskExpression_ListSelect_ListSelectItem::IsInitialized() const {
  return true;
}

void Expression_MaskExpression_ListSelect_ListSelectItem::InternalSwap(Expression_MaskExpression_ListSelect_ListSelectItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_MaskExpression_ListSelect_ListSelectItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[83]);
}

// ===================================================================

class Expression_MaskExpression_ListSelect::_Internal {
 public:
  static const ::substrait::Expression_MaskExpression_Select& child(const Expression_MaskExpression_ListSelect* msg);
};

const ::substrait::Expression_MaskExpression_Select&
Expression_MaskExpression_ListSelect::_Internal::child(const Expression_MaskExpression_ListSelect* msg) {
  return *msg->_impl_.child_;
}
Expression_MaskExpression_ListSelect::Expression_MaskExpression_ListSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.MaskExpression.ListSelect)
}
Expression_MaskExpression_ListSelect::Expression_MaskExpression_ListSelect(const Expression_MaskExpression_ListSelect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_MaskExpression_ListSelect* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.selection_){from._impl_.selection_}
    , decltype(_impl_.child_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_child()) {
    _this->_impl_.child_ = new ::substrait::Expression_MaskExpression_Select(*from._impl_.child_);
  }
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.MaskExpression.ListSelect)
}

inline void Expression_MaskExpression_ListSelect::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.selection_){arena}
    , decltype(_impl_.child_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Expression_MaskExpression_ListSelect::~Expression_MaskExpression_ListSelect() {
  // @@protoc_insertion_point(destructor:substrait.Expression.MaskExpression.ListSelect)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_MaskExpression_ListSelect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.selection_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.child_;
}

void Expression_MaskExpression_ListSelect::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_MaskExpression_ListSelect::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.MaskExpression.ListSelect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.selection_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.child_ != nullptr) {
    delete _impl_.child_;
  }
  _impl_.child_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_MaskExpression_ListSelect::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .substrait.Expression.MaskExpression.ListSelect.ListSelectItem selection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_selection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.MaskExpression.Select child = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_MaskExpression_ListSelect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.MaskExpression.ListSelect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.Expression.MaskExpression.ListSelect.ListSelectItem selection = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_selection_size()); i < n; i++) {
    const auto& repfield = this->_internal_selection(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .substrait.Expression.MaskExpression.Select child = 2;
  if (this->_internal_has_child()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::child(this),
        _Internal::child(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.MaskExpression.ListSelect)
  return target;
}

size_t Expression_MaskExpression_ListSelect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.MaskExpression.ListSelect)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.Expression.MaskExpression.ListSelect.ListSelectItem selection = 1;
  total_size += 1UL * this->_internal_selection_size();
  for (const auto& msg : this->_impl_.selection_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.Expression.MaskExpression.Select child = 2;
  if (this->_internal_has_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.child_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_MaskExpression_ListSelect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_MaskExpression_ListSelect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_MaskExpression_ListSelect::GetClassData() const { return &_class_data_; }


void Expression_MaskExpression_ListSelect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_MaskExpression_ListSelect*>(&to_msg);
  auto& from = static_cast<const Expression_MaskExpression_ListSelect&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.MaskExpression.ListSelect)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.selection_.MergeFrom(from._impl_.selection_);
  if (from._internal_has_child()) {
    _this->_internal_mutable_child()->::substrait::Expression_MaskExpression_Select::MergeFrom(
        from._internal_child());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_MaskExpression_ListSelect::CopyFrom(const Expression_MaskExpression_ListSelect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.MaskExpression.ListSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_MaskExpression_ListSelect::IsInitialized() const {
  return true;
}

void Expression_MaskExpression_ListSelect::InternalSwap(Expression_MaskExpression_ListSelect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.selection_.InternalSwap(&other->_impl_.selection_);
  swap(_impl_.child_, other->_impl_.child_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_MaskExpression_ListSelect::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[84]);
}

// ===================================================================

class Expression_MaskExpression_MapSelect_MapKey::_Internal {
 public:
};

Expression_MaskExpression_MapSelect_MapKey::Expression_MaskExpression_MapSelect_MapKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.MaskExpression.MapSelect.MapKey)
}
Expression_MaskExpression_MapSelect_MapKey::Expression_MaskExpression_MapSelect_MapKey(const Expression_MaskExpression_MapSelect_MapKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_MaskExpression_MapSelect_MapKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.map_key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.map_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_map_key().empty()) {
    _this->_impl_.map_key_.Set(from._internal_map_key(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.MaskExpression.MapSelect.MapKey)
}

inline void Expression_MaskExpression_MapSelect_MapKey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.map_key_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.map_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Expression_MaskExpression_MapSelect_MapKey::~Expression_MaskExpression_MapSelect_MapKey() {
  // @@protoc_insertion_point(destructor:substrait.Expression.MaskExpression.MapSelect.MapKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_MaskExpression_MapSelect_MapKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.map_key_.Destroy();
}

void Expression_MaskExpression_MapSelect_MapKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_MaskExpression_MapSelect_MapKey::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.MaskExpression.MapSelect.MapKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.map_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_MaskExpression_MapSelect_MapKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string map_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_map_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "substrait.Expression.MaskExpression.MapSelect.MapKey.map_key"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_MaskExpression_MapSelect_MapKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.MaskExpression.MapSelect.MapKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string map_key = 1;
  if (!this->_internal_map_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_map_key().data(), static_cast<int>(this->_internal_map_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.Expression.MaskExpression.MapSelect.MapKey.map_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_map_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.MaskExpression.MapSelect.MapKey)
  return target;
}

size_t Expression_MaskExpression_MapSelect_MapKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.MaskExpression.MapSelect.MapKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string map_key = 1;
  if (!this->_internal_map_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_MaskExpression_MapSelect_MapKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_MaskExpression_MapSelect_MapKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_MaskExpression_MapSelect_MapKey::GetClassData() const { return &_class_data_; }


void Expression_MaskExpression_MapSelect_MapKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_MaskExpression_MapSelect_MapKey*>(&to_msg);
  auto& from = static_cast<const Expression_MaskExpression_MapSelect_MapKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.MaskExpression.MapSelect.MapKey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_map_key().empty()) {
    _this->_internal_set_map_key(from._internal_map_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_MaskExpression_MapSelect_MapKey::CopyFrom(const Expression_MaskExpression_MapSelect_MapKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.MaskExpression.MapSelect.MapKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_MaskExpression_MapSelect_MapKey::IsInitialized() const {
  return true;
}

void Expression_MaskExpression_MapSelect_MapKey::InternalSwap(Expression_MaskExpression_MapSelect_MapKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.map_key_, lhs_arena,
      &other->_impl_.map_key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_MaskExpression_MapSelect_MapKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[85]);
}

// ===================================================================

class Expression_MaskExpression_MapSelect_MapKeyExpression::_Internal {
 public:
};

Expression_MaskExpression_MapSelect_MapKeyExpression::Expression_MaskExpression_MapSelect_MapKeyExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.MaskExpression.MapSelect.MapKeyExpression)
}
Expression_MaskExpression_MapSelect_MapKeyExpression::Expression_MaskExpression_MapSelect_MapKeyExpression(const Expression_MaskExpression_MapSelect_MapKeyExpression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_MaskExpression_MapSelect_MapKeyExpression* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.map_key_expression_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.map_key_expression_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_key_expression_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_map_key_expression().empty()) {
    _this->_impl_.map_key_expression_.Set(from._internal_map_key_expression(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.MaskExpression.MapSelect.MapKeyExpression)
}

inline void Expression_MaskExpression_MapSelect_MapKeyExpression::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.map_key_expression_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.map_key_expression_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_key_expression_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Expression_MaskExpression_MapSelect_MapKeyExpression::~Expression_MaskExpression_MapSelect_MapKeyExpression() {
  // @@protoc_insertion_point(destructor:substrait.Expression.MaskExpression.MapSelect.MapKeyExpression)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_MaskExpression_MapSelect_MapKeyExpression::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.map_key_expression_.Destroy();
}

void Expression_MaskExpression_MapSelect_MapKeyExpression::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_MaskExpression_MapSelect_MapKeyExpression::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.MaskExpression.MapSelect.MapKeyExpression)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.map_key_expression_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_MaskExpression_MapSelect_MapKeyExpression::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string map_key_expression = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_map_key_expression();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "substrait.Expression.MaskExpression.MapSelect.MapKeyExpression.map_key_expression"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_MaskExpression_MapSelect_MapKeyExpression::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.MaskExpression.MapSelect.MapKeyExpression)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string map_key_expression = 1;
  if (!this->_internal_map_key_expression().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_map_key_expression().data(), static_cast<int>(this->_internal_map_key_expression().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.Expression.MaskExpression.MapSelect.MapKeyExpression.map_key_expression");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_map_key_expression(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.MaskExpression.MapSelect.MapKeyExpression)
  return target;
}

size_t Expression_MaskExpression_MapSelect_MapKeyExpression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.MaskExpression.MapSelect.MapKeyExpression)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string map_key_expression = 1;
  if (!this->_internal_map_key_expression().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map_key_expression());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_MaskExpression_MapSelect_MapKeyExpression::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_MaskExpression_MapSelect_MapKeyExpression::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_MaskExpression_MapSelect_MapKeyExpression::GetClassData() const { return &_class_data_; }


void Expression_MaskExpression_MapSelect_MapKeyExpression::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_MaskExpression_MapSelect_MapKeyExpression*>(&to_msg);
  auto& from = static_cast<const Expression_MaskExpression_MapSelect_MapKeyExpression&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.MaskExpression.MapSelect.MapKeyExpression)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_map_key_expression().empty()) {
    _this->_internal_set_map_key_expression(from._internal_map_key_expression());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_MaskExpression_MapSelect_MapKeyExpression::CopyFrom(const Expression_MaskExpression_MapSelect_MapKeyExpression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.MaskExpression.MapSelect.MapKeyExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_MaskExpression_MapSelect_MapKeyExpression::IsInitialized() const {
  return true;
}

void Expression_MaskExpression_MapSelect_MapKeyExpression::InternalSwap(Expression_MaskExpression_MapSelect_MapKeyExpression* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.map_key_expression_, lhs_arena,
      &other->_impl_.map_key_expression_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_MaskExpression_MapSelect_MapKeyExpression::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[86]);
}

// ===================================================================

class Expression_MaskExpression_MapSelect::_Internal {
 public:
  static const ::substrait::Expression_MaskExpression_MapSelect_MapKey& key(const Expression_MaskExpression_MapSelect* msg);
  static const ::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression& expression(const Expression_MaskExpression_MapSelect* msg);
  static const ::substrait::Expression_MaskExpression_Select& child(const Expression_MaskExpression_MapSelect* msg);
};

const ::substrait::Expression_MaskExpression_MapSelect_MapKey&
Expression_MaskExpression_MapSelect::_Internal::key(const Expression_MaskExpression_MapSelect* msg) {
  return *msg->_impl_.select_.key_;
}
const ::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression&
Expression_MaskExpression_MapSelect::_Internal::expression(const Expression_MaskExpression_MapSelect* msg) {
  return *msg->_impl_.select_.expression_;
}
const ::substrait::Expression_MaskExpression_Select&
Expression_MaskExpression_MapSelect::_Internal::child(const Expression_MaskExpression_MapSelect* msg) {
  return *msg->_impl_.child_;
}
void Expression_MaskExpression_MapSelect::set_allocated_key(::substrait::Expression_MaskExpression_MapSelect_MapKey* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_select();
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(key);
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    set_has_key();
    _impl_.select_.key_ = key;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.MaskExpression.MapSelect.key)
}
void Expression_MaskExpression_MapSelect::set_allocated_expression(::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression* expression) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_select();
  if (expression) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(expression);
    if (message_arena != submessage_arena) {
      expression = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expression, submessage_arena);
    }
    set_has_expression();
    _impl_.select_.expression_ = expression;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.MaskExpression.MapSelect.expression)
}
Expression_MaskExpression_MapSelect::Expression_MaskExpression_MapSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.MaskExpression.MapSelect)
}
Expression_MaskExpression_MapSelect::Expression_MaskExpression_MapSelect(const Expression_MaskExpression_MapSelect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_MaskExpression_MapSelect* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.child_){nullptr}
    , decltype(_impl_.select_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_child()) {
    _this->_impl_.child_ = new ::substrait::Expression_MaskExpression_Select(*from._impl_.child_);
  }
  clear_has_select();
  switch (from.select_case()) {
    case kKey: {
      _this->_internal_mutable_key()->::substrait::Expression_MaskExpression_MapSelect_MapKey::MergeFrom(
          from._internal_key());
      break;
    }
    case kExpression: {
      _this->_internal_mutable_expression()->::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression::MergeFrom(
          from._internal_expression());
      break;
    }
    case SELECT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.MaskExpression.MapSelect)
}

inline void Expression_MaskExpression_MapSelect::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.child_){nullptr}
    , decltype(_impl_.select_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_select();
}

Expression_MaskExpression_MapSelect::~Expression_MaskExpression_MapSelect() {
  // @@protoc_insertion_point(destructor:substrait.Expression.MaskExpression.MapSelect)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_MaskExpression_MapSelect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.child_;
  if (has_select()) {
    clear_select();
  }
}

void Expression_MaskExpression_MapSelect::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_MaskExpression_MapSelect::clear_select() {
// @@protoc_insertion_point(one_of_clear_start:substrait.Expression.MaskExpression.MapSelect)
  switch (select_case()) {
    case kKey: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.select_.key_;
      }
      break;
    }
    case kExpression: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.select_.expression_;
      }
      break;
    }
    case SELECT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SELECT_NOT_SET;
}


void Expression_MaskExpression_MapSelect::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.MaskExpression.MapSelect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.child_ != nullptr) {
    delete _impl_.child_;
  }
  _impl_.child_ = nullptr;
  clear_select();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_MaskExpression_MapSelect::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.Expression.MaskExpression.MapSelect.MapKey key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.MaskExpression.MapSelect.MapKeyExpression expression = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_expression(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.MaskExpression.Select child = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_MaskExpression_MapSelect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.MaskExpression.MapSelect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.Expression.MaskExpression.MapSelect.MapKey key = 1;
  if (_internal_has_key()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::key(this),
        _Internal::key(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression.MaskExpression.MapSelect.MapKeyExpression expression = 2;
  if (_internal_has_expression()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::expression(this),
        _Internal::expression(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression.MaskExpression.Select child = 3;
  if (this->_internal_has_child()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::child(this),
        _Internal::child(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.MaskExpression.MapSelect)
  return target;
}

size_t Expression_MaskExpression_MapSelect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.MaskExpression.MapSelect)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.Expression.MaskExpression.Select child = 3;
  if (this->_internal_has_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.child_);
  }

  switch (select_case()) {
    // .substrait.Expression.MaskExpression.MapSelect.MapKey key = 1;
    case kKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.select_.key_);
      break;
    }
    // .substrait.Expression.MaskExpression.MapSelect.MapKeyExpression expression = 2;
    case kExpression: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.select_.expression_);
      break;
    }
    case SELECT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_MaskExpression_MapSelect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_MaskExpression_MapSelect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_MaskExpression_MapSelect::GetClassData() const { return &_class_data_; }


void Expression_MaskExpression_MapSelect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_MaskExpression_MapSelect*>(&to_msg);
  auto& from = static_cast<const Expression_MaskExpression_MapSelect&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.MaskExpression.MapSelect)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_child()) {
    _this->_internal_mutable_child()->::substrait::Expression_MaskExpression_Select::MergeFrom(
        from._internal_child());
  }
  switch (from.select_case()) {
    case kKey: {
      _this->_internal_mutable_key()->::substrait::Expression_MaskExpression_MapSelect_MapKey::MergeFrom(
          from._internal_key());
      break;
    }
    case kExpression: {
      _this->_internal_mutable_expression()->::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression::MergeFrom(
          from._internal_expression());
      break;
    }
    case SELECT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_MaskExpression_MapSelect::CopyFrom(const Expression_MaskExpression_MapSelect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.MaskExpression.MapSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_MaskExpression_MapSelect::IsInitialized() const {
  return true;
}

void Expression_MaskExpression_MapSelect::InternalSwap(Expression_MaskExpression_MapSelect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.child_, other->_impl_.child_);
  swap(_impl_.select_, other->_impl_.select_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_MaskExpression_MapSelect::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[87]);
}

// ===================================================================

class Expression_MaskExpression::_Internal {
 public:
  static const ::substrait::Expression_MaskExpression_StructSelect& select(const Expression_MaskExpression* msg);
};

const ::substrait::Expression_MaskExpression_StructSelect&
Expression_MaskExpression::_Internal::select(const Expression_MaskExpression* msg) {
  return *msg->_impl_.select_;
}
Expression_MaskExpression::Expression_MaskExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.MaskExpression)
}
Expression_MaskExpression::Expression_MaskExpression(const Expression_MaskExpression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_MaskExpression* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.select_){nullptr}
    , decltype(_impl_.maintain_singular_struct_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_select()) {
    _this->_impl_.select_ = new ::substrait::Expression_MaskExpression_StructSelect(*from._impl_.select_);
  }
  _this->_impl_.maintain_singular_struct_ = from._impl_.maintain_singular_struct_;
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.MaskExpression)
}

inline void Expression_MaskExpression::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.select_){nullptr}
    , decltype(_impl_.maintain_singular_struct_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Expression_MaskExpression::~Expression_MaskExpression() {
  // @@protoc_insertion_point(destructor:substrait.Expression.MaskExpression)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_MaskExpression::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.select_;
}

void Expression_MaskExpression::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_MaskExpression::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.MaskExpression)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.select_ != nullptr) {
    delete _impl_.select_;
  }
  _impl_.select_ = nullptr;
  _impl_.maintain_singular_struct_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_MaskExpression::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.Expression.MaskExpression.StructSelect select = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_select(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool maintain_singular_struct = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.maintain_singular_struct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_MaskExpression::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.MaskExpression)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.Expression.MaskExpression.StructSelect select = 1;
  if (this->_internal_has_select()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::select(this),
        _Internal::select(this).GetCachedSize(), target, stream);
  }

  // bool maintain_singular_struct = 2;
  if (this->_internal_maintain_singular_struct() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_maintain_singular_struct(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.MaskExpression)
  return target;
}

size_t Expression_MaskExpression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.MaskExpression)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.Expression.MaskExpression.StructSelect select = 1;
  if (this->_internal_has_select()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.select_);
  }

  // bool maintain_singular_struct = 2;
  if (this->_internal_maintain_singular_struct() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_MaskExpression::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_MaskExpression::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_MaskExpression::GetClassData() const { return &_class_data_; }


void Expression_MaskExpression::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_MaskExpression*>(&to_msg);
  auto& from = static_cast<const Expression_MaskExpression&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.MaskExpression)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_select()) {
    _this->_internal_mutable_select()->::substrait::Expression_MaskExpression_StructSelect::MergeFrom(
        from._internal_select());
  }
  if (from._internal_maintain_singular_struct() != 0) {
    _this->_internal_set_maintain_singular_struct(from._internal_maintain_singular_struct());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_MaskExpression::CopyFrom(const Expression_MaskExpression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.MaskExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_MaskExpression::IsInitialized() const {
  return true;
}

void Expression_MaskExpression::InternalSwap(Expression_MaskExpression* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_MaskExpression, _impl_.maintain_singular_struct_)
      + sizeof(Expression_MaskExpression::_impl_.maintain_singular_struct_)
      - PROTOBUF_FIELD_OFFSET(Expression_MaskExpression, _impl_.select_)>(
          reinterpret_cast<char*>(&_impl_.select_),
          reinterpret_cast<char*>(&other->_impl_.select_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_MaskExpression::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[88]);
}

// ===================================================================

class Expression_FieldReference_RootReference::_Internal {
 public:
};

Expression_FieldReference_RootReference::Expression_FieldReference_RootReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.FieldReference.RootReference)
}
Expression_FieldReference_RootReference::Expression_FieldReference_RootReference(const Expression_FieldReference_RootReference& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Expression_FieldReference_RootReference* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.FieldReference.RootReference)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_FieldReference_RootReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_FieldReference_RootReference::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Expression_FieldReference_RootReference::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[89]);
}

// ===================================================================

class Expression_FieldReference_OuterReference::_Internal {
 public:
};

Expression_FieldReference_OuterReference::Expression_FieldReference_OuterReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.FieldReference.OuterReference)
}
Expression_FieldReference_OuterReference::Expression_FieldReference_OuterReference(const Expression_FieldReference_OuterReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_FieldReference_OuterReference* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.steps_out_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.steps_out_ = from._impl_.steps_out_;
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.FieldReference.OuterReference)
}

inline void Expression_FieldReference_OuterReference::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.steps_out_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Expression_FieldReference_OuterReference::~Expression_FieldReference_OuterReference() {
  // @@protoc_insertion_point(destructor:substrait.Expression.FieldReference.OuterReference)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_FieldReference_OuterReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Expression_FieldReference_OuterReference::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_FieldReference_OuterReference::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.FieldReference.OuterReference)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.steps_out_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_FieldReference_OuterReference::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 steps_out = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.steps_out_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_FieldReference_OuterReference::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.FieldReference.OuterReference)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 steps_out = 1;
  if (this->_internal_steps_out() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_steps_out(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.FieldReference.OuterReference)
  return target;
}

size_t Expression_FieldReference_OuterReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.FieldReference.OuterReference)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 steps_out = 1;
  if (this->_internal_steps_out() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_steps_out());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_FieldReference_OuterReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_FieldReference_OuterReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_FieldReference_OuterReference::GetClassData() const { return &_class_data_; }


void Expression_FieldReference_OuterReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_FieldReference_OuterReference*>(&to_msg);
  auto& from = static_cast<const Expression_FieldReference_OuterReference&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.FieldReference.OuterReference)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_steps_out() != 0) {
    _this->_internal_set_steps_out(from._internal_steps_out());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_FieldReference_OuterReference::CopyFrom(const Expression_FieldReference_OuterReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.FieldReference.OuterReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_FieldReference_OuterReference::IsInitialized() const {
  return true;
}

void Expression_FieldReference_OuterReference::InternalSwap(Expression_FieldReference_OuterReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.steps_out_, other->_impl_.steps_out_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_FieldReference_OuterReference::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[90]);
}

// ===================================================================

class Expression_FieldReference::_Internal {
 public:
  static const ::substrait::Expression_ReferenceSegment& direct_reference(const Expression_FieldReference* msg);
  static const ::substrait::Expression_MaskExpression& masked_reference(const Expression_FieldReference* msg);
  static const ::substrait::Expression& expression(const Expression_FieldReference* msg);
  static const ::substrait::Expression_FieldReference_RootReference& root_reference(const Expression_FieldReference* msg);
  static const ::substrait::Expression_FieldReference_OuterReference& outer_reference(const Expression_FieldReference* msg);
};

const ::substrait::Expression_ReferenceSegment&
Expression_FieldReference::_Internal::direct_reference(const Expression_FieldReference* msg) {
  return *msg->_impl_.reference_type_.direct_reference_;
}
const ::substrait::Expression_MaskExpression&
Expression_FieldReference::_Internal::masked_reference(const Expression_FieldReference* msg) {
  return *msg->_impl_.reference_type_.masked_reference_;
}
const ::substrait::Expression&
Expression_FieldReference::_Internal::expression(const Expression_FieldReference* msg) {
  return *msg->_impl_.root_type_.expression_;
}
const ::substrait::Expression_FieldReference_RootReference&
Expression_FieldReference::_Internal::root_reference(const Expression_FieldReference* msg) {
  return *msg->_impl_.root_type_.root_reference_;
}
const ::substrait::Expression_FieldReference_OuterReference&
Expression_FieldReference::_Internal::outer_reference(const Expression_FieldReference* msg) {
  return *msg->_impl_.root_type_.outer_reference_;
}
void Expression_FieldReference::set_allocated_direct_reference(::substrait::Expression_ReferenceSegment* direct_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_reference_type();
  if (direct_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(direct_reference);
    if (message_arena != submessage_arena) {
      direct_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direct_reference, submessage_arena);
    }
    set_has_direct_reference();
    _impl_.reference_type_.direct_reference_ = direct_reference;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.FieldReference.direct_reference)
}
void Expression_FieldReference::set_allocated_masked_reference(::substrait::Expression_MaskExpression* masked_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_reference_type();
  if (masked_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(masked_reference);
    if (message_arena != submessage_arena) {
      masked_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, masked_reference, submessage_arena);
    }
    set_has_masked_reference();
    _impl_.reference_type_.masked_reference_ = masked_reference;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.FieldReference.masked_reference)
}
void Expression_FieldReference::set_allocated_expression(::substrait::Expression* expression) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_root_type();
  if (expression) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(expression);
    if (message_arena != submessage_arena) {
      expression = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expression, submessage_arena);
    }
    set_has_expression();
    _impl_.root_type_.expression_ = expression;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.FieldReference.expression)
}
void Expression_FieldReference::set_allocated_root_reference(::substrait::Expression_FieldReference_RootReference* root_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_root_type();
  if (root_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(root_reference);
    if (message_arena != submessage_arena) {
      root_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, root_reference, submessage_arena);
    }
    set_has_root_reference();
    _impl_.root_type_.root_reference_ = root_reference;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.FieldReference.root_reference)
}
void Expression_FieldReference::set_allocated_outer_reference(::substrait::Expression_FieldReference_OuterReference* outer_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_root_type();
  if (outer_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(outer_reference);
    if (message_arena != submessage_arena) {
      outer_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, outer_reference, submessage_arena);
    }
    set_has_outer_reference();
    _impl_.root_type_.outer_reference_ = outer_reference;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.FieldReference.outer_reference)
}
Expression_FieldReference::Expression_FieldReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.FieldReference)
}
Expression_FieldReference::Expression_FieldReference(const Expression_FieldReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_FieldReference* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reference_type_){}
    , decltype(_impl_.root_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_reference_type();
  switch (from.reference_type_case()) {
    case kDirectReference: {
      _this->_internal_mutable_direct_reference()->::substrait::Expression_ReferenceSegment::MergeFrom(
          from._internal_direct_reference());
      break;
    }
    case kMaskedReference: {
      _this->_internal_mutable_masked_reference()->::substrait::Expression_MaskExpression::MergeFrom(
          from._internal_masked_reference());
      break;
    }
    case REFERENCE_TYPE_NOT_SET: {
      break;
    }
  }
  clear_has_root_type();
  switch (from.root_type_case()) {
    case kExpression: {
      _this->_internal_mutable_expression()->::substrait::Expression::MergeFrom(
          from._internal_expression());
      break;
    }
    case kRootReference: {
      _this->_internal_mutable_root_reference()->::substrait::Expression_FieldReference_RootReference::MergeFrom(
          from._internal_root_reference());
      break;
    }
    case kOuterReference: {
      _this->_internal_mutable_outer_reference()->::substrait::Expression_FieldReference_OuterReference::MergeFrom(
          from._internal_outer_reference());
      break;
    }
    case ROOT_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.FieldReference)
}

inline void Expression_FieldReference::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reference_type_){}
    , decltype(_impl_.root_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_reference_type();
  clear_has_root_type();
}

Expression_FieldReference::~Expression_FieldReference() {
  // @@protoc_insertion_point(destructor:substrait.Expression.FieldReference)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_FieldReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_reference_type()) {
    clear_reference_type();
  }
  if (has_root_type()) {
    clear_root_type();
  }
}

void Expression_FieldReference::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_FieldReference::clear_reference_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.Expression.FieldReference)
  switch (reference_type_case()) {
    case kDirectReference: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.reference_type_.direct_reference_;
      }
      break;
    }
    case kMaskedReference: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.reference_type_.masked_reference_;
      }
      break;
    }
    case REFERENCE_TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = REFERENCE_TYPE_NOT_SET;
}

void Expression_FieldReference::clear_root_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.Expression.FieldReference)
  switch (root_type_case()) {
    case kExpression: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.root_type_.expression_;
      }
      break;
    }
    case kRootReference: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.root_type_.root_reference_;
      }
      break;
    }
    case kOuterReference: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.root_type_.outer_reference_;
      }
      break;
    }
    case ROOT_TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = ROOT_TYPE_NOT_SET;
}


void Expression_FieldReference::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.FieldReference)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_reference_type();
  clear_root_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_FieldReference::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.Expression.ReferenceSegment direct_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_direct_reference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.MaskExpression masked_reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_masked_reference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression expression = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_expression(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.FieldReference.RootReference root_reference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_root_reference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.FieldReference.OuterReference outer_reference = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_outer_reference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_FieldReference::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.FieldReference)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.Expression.ReferenceSegment direct_reference = 1;
  if (_internal_has_direct_reference()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::direct_reference(this),
        _Internal::direct_reference(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression.MaskExpression masked_reference = 2;
  if (_internal_has_masked_reference()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::masked_reference(this),
        _Internal::masked_reference(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression expression = 3;
  if (_internal_has_expression()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::expression(this),
        _Internal::expression(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression.FieldReference.RootReference root_reference = 4;
  if (_internal_has_root_reference()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::root_reference(this),
        _Internal::root_reference(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression.FieldReference.OuterReference outer_reference = 5;
  if (_internal_has_outer_reference()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::outer_reference(this),
        _Internal::outer_reference(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.FieldReference)
  return target;
}

size_t Expression_FieldReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.FieldReference)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (reference_type_case()) {
    // .substrait.Expression.ReferenceSegment direct_reference = 1;
    case kDirectReference: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.reference_type_.direct_reference_);
      break;
    }
    // .substrait.Expression.MaskExpression masked_reference = 2;
    case kMaskedReference: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.reference_type_.masked_reference_);
      break;
    }
    case REFERENCE_TYPE_NOT_SET: {
      break;
    }
  }
  switch (root_type_case()) {
    // .substrait.Expression expression = 3;
    case kExpression: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.root_type_.expression_);
      break;
    }
    // .substrait.Expression.FieldReference.RootReference root_reference = 4;
    case kRootReference: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.root_type_.root_reference_);
      break;
    }
    // .substrait.Expression.FieldReference.OuterReference outer_reference = 5;
    case kOuterReference: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.root_type_.outer_reference_);
      break;
    }
    case ROOT_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_FieldReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_FieldReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_FieldReference::GetClassData() const { return &_class_data_; }


void Expression_FieldReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_FieldReference*>(&to_msg);
  auto& from = static_cast<const Expression_FieldReference&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.FieldReference)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.reference_type_case()) {
    case kDirectReference: {
      _this->_internal_mutable_direct_reference()->::substrait::Expression_ReferenceSegment::MergeFrom(
          from._internal_direct_reference());
      break;
    }
    case kMaskedReference: {
      _this->_internal_mutable_masked_reference()->::substrait::Expression_MaskExpression::MergeFrom(
          from._internal_masked_reference());
      break;
    }
    case REFERENCE_TYPE_NOT_SET: {
      break;
    }
  }
  switch (from.root_type_case()) {
    case kExpression: {
      _this->_internal_mutable_expression()->::substrait::Expression::MergeFrom(
          from._internal_expression());
      break;
    }
    case kRootReference: {
      _this->_internal_mutable_root_reference()->::substrait::Expression_FieldReference_RootReference::MergeFrom(
          from._internal_root_reference());
      break;
    }
    case kOuterReference: {
      _this->_internal_mutable_outer_reference()->::substrait::Expression_FieldReference_OuterReference::MergeFrom(
          from._internal_outer_reference());
      break;
    }
    case ROOT_TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_FieldReference::CopyFrom(const Expression_FieldReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.FieldReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_FieldReference::IsInitialized() const {
  return true;
}

void Expression_FieldReference::InternalSwap(Expression_FieldReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.reference_type_, other->_impl_.reference_type_);
  swap(_impl_.root_type_, other->_impl_.root_type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_FieldReference::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[91]);
}

// ===================================================================

class Expression_Subquery_Scalar::_Internal {
 public:
  static const ::substrait::Rel& input(const Expression_Subquery_Scalar* msg);
};

const ::substrait::Rel&
Expression_Subquery_Scalar::_Internal::input(const Expression_Subquery_Scalar* msg) {
  return *msg->_impl_.input_;
}
Expression_Subquery_Scalar::Expression_Subquery_Scalar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.Subquery.Scalar)
}
Expression_Subquery_Scalar::Expression_Subquery_Scalar(const Expression_Subquery_Scalar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_Subquery_Scalar* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.input_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_input()) {
    _this->_impl_.input_ = new ::substrait::Rel(*from._impl_.input_);
  }
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.Subquery.Scalar)
}

inline void Expression_Subquery_Scalar::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.input_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Expression_Subquery_Scalar::~Expression_Subquery_Scalar() {
  // @@protoc_insertion_point(destructor:substrait.Expression.Subquery.Scalar)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_Subquery_Scalar::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.input_;
}

void Expression_Subquery_Scalar::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_Subquery_Scalar::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.Subquery.Scalar)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.input_ != nullptr) {
    delete _impl_.input_;
  }
  _impl_.input_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Subquery_Scalar::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.Rel input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_Subquery_Scalar::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.Subquery.Scalar)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.Rel input = 1;
  if (this->_internal_has_input()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::input(this),
        _Internal::input(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.Subquery.Scalar)
  return target;
}

size_t Expression_Subquery_Scalar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.Subquery.Scalar)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.Rel input = 1;
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.input_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_Subquery_Scalar::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_Subquery_Scalar::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_Subquery_Scalar::GetClassData() const { return &_class_data_; }


void Expression_Subquery_Scalar::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_Subquery_Scalar*>(&to_msg);
  auto& from = static_cast<const Expression_Subquery_Scalar&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.Subquery.Scalar)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_input()) {
    _this->_internal_mutable_input()->::substrait::Rel::MergeFrom(
        from._internal_input());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_Subquery_Scalar::CopyFrom(const Expression_Subquery_Scalar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.Subquery.Scalar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Subquery_Scalar::IsInitialized() const {
  return true;
}

void Expression_Subquery_Scalar::InternalSwap(Expression_Subquery_Scalar* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.input_, other->_impl_.input_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Subquery_Scalar::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[92]);
}

// ===================================================================

class Expression_Subquery_InPredicate::_Internal {
 public:
  static const ::substrait::Rel& haystack(const Expression_Subquery_InPredicate* msg);
};

const ::substrait::Rel&
Expression_Subquery_InPredicate::_Internal::haystack(const Expression_Subquery_InPredicate* msg) {
  return *msg->_impl_.haystack_;
}
Expression_Subquery_InPredicate::Expression_Subquery_InPredicate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.Subquery.InPredicate)
}
Expression_Subquery_InPredicate::Expression_Subquery_InPredicate(const Expression_Subquery_InPredicate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_Subquery_InPredicate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.needles_){from._impl_.needles_}
    , decltype(_impl_.haystack_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_haystack()) {
    _this->_impl_.haystack_ = new ::substrait::Rel(*from._impl_.haystack_);
  }
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.Subquery.InPredicate)
}

inline void Expression_Subquery_InPredicate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.needles_){arena}
    , decltype(_impl_.haystack_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Expression_Subquery_InPredicate::~Expression_Subquery_InPredicate() {
  // @@protoc_insertion_point(destructor:substrait.Expression.Subquery.InPredicate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_Subquery_InPredicate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.needles_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.haystack_;
}

void Expression_Subquery_InPredicate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_Subquery_InPredicate::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.Subquery.InPredicate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.needles_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.haystack_ != nullptr) {
    delete _impl_.haystack_;
  }
  _impl_.haystack_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Subquery_InPredicate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .substrait.Expression needles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_needles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .substrait.Rel haystack = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_haystack(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_Subquery_InPredicate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.Subquery.InPredicate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.Expression needles = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_needles_size()); i < n; i++) {
    const auto& repfield = this->_internal_needles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .substrait.Rel haystack = 2;
  if (this->_internal_has_haystack()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::haystack(this),
        _Internal::haystack(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.Subquery.InPredicate)
  return target;
}

size_t Expression_Subquery_InPredicate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.Subquery.InPredicate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.Expression needles = 1;
  total_size += 1UL * this->_internal_needles_size();
  for (const auto& msg : this->_impl_.needles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.Rel haystack = 2;
  if (this->_internal_has_haystack()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.haystack_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_Subquery_InPredicate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_Subquery_InPredicate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_Subquery_InPredicate::GetClassData() const { return &_class_data_; }


void Expression_Subquery_InPredicate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_Subquery_InPredicate*>(&to_msg);
  auto& from = static_cast<const Expression_Subquery_InPredicate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.Subquery.InPredicate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.needles_.MergeFrom(from._impl_.needles_);
  if (from._internal_has_haystack()) {
    _this->_internal_mutable_haystack()->::substrait::Rel::MergeFrom(
        from._internal_haystack());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_Subquery_InPredicate::CopyFrom(const Expression_Subquery_InPredicate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.Subquery.InPredicate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Subquery_InPredicate::IsInitialized() const {
  return true;
}

void Expression_Subquery_InPredicate::InternalSwap(Expression_Subquery_InPredicate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.needles_.InternalSwap(&other->_impl_.needles_);
  swap(_impl_.haystack_, other->_impl_.haystack_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Subquery_InPredicate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[93]);
}

// ===================================================================

class Expression_Subquery_SetPredicate::_Internal {
 public:
  static const ::substrait::Rel& tuples(const Expression_Subquery_SetPredicate* msg);
};

const ::substrait::Rel&
Expression_Subquery_SetPredicate::_Internal::tuples(const Expression_Subquery_SetPredicate* msg) {
  return *msg->_impl_.tuples_;
}
Expression_Subquery_SetPredicate::Expression_Subquery_SetPredicate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.Subquery.SetPredicate)
}
Expression_Subquery_SetPredicate::Expression_Subquery_SetPredicate(const Expression_Subquery_SetPredicate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_Subquery_SetPredicate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tuples_){nullptr}
    , decltype(_impl_.predicate_op_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tuples()) {
    _this->_impl_.tuples_ = new ::substrait::Rel(*from._impl_.tuples_);
  }
  _this->_impl_.predicate_op_ = from._impl_.predicate_op_;
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.Subquery.SetPredicate)
}

inline void Expression_Subquery_SetPredicate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tuples_){nullptr}
    , decltype(_impl_.predicate_op_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Expression_Subquery_SetPredicate::~Expression_Subquery_SetPredicate() {
  // @@protoc_insertion_point(destructor:substrait.Expression.Subquery.SetPredicate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_Subquery_SetPredicate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.tuples_;
}

void Expression_Subquery_SetPredicate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_Subquery_SetPredicate::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.Subquery.SetPredicate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.tuples_ != nullptr) {
    delete _impl_.tuples_;
  }
  _impl_.tuples_ = nullptr;
  _impl_.predicate_op_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Subquery_SetPredicate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.Expression.Subquery.SetPredicate.PredicateOp predicate_op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_predicate_op(static_cast<::substrait::Expression_Subquery_SetPredicate_PredicateOp>(val));
        } else
          goto handle_unusual;
        continue;
      // .substrait.Rel tuples = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tuples(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_Subquery_SetPredicate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.Subquery.SetPredicate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.Expression.Subquery.SetPredicate.PredicateOp predicate_op = 1;
  if (this->_internal_predicate_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_predicate_op(), target);
  }

  // .substrait.Rel tuples = 2;
  if (this->_internal_has_tuples()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tuples(this),
        _Internal::tuples(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.Subquery.SetPredicate)
  return target;
}

size_t Expression_Subquery_SetPredicate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.Subquery.SetPredicate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.Rel tuples = 2;
  if (this->_internal_has_tuples()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tuples_);
  }

  // .substrait.Expression.Subquery.SetPredicate.PredicateOp predicate_op = 1;
  if (this->_internal_predicate_op() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_predicate_op());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_Subquery_SetPredicate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_Subquery_SetPredicate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_Subquery_SetPredicate::GetClassData() const { return &_class_data_; }


void Expression_Subquery_SetPredicate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_Subquery_SetPredicate*>(&to_msg);
  auto& from = static_cast<const Expression_Subquery_SetPredicate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.Subquery.SetPredicate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tuples()) {
    _this->_internal_mutable_tuples()->::substrait::Rel::MergeFrom(
        from._internal_tuples());
  }
  if (from._internal_predicate_op() != 0) {
    _this->_internal_set_predicate_op(from._internal_predicate_op());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_Subquery_SetPredicate::CopyFrom(const Expression_Subquery_SetPredicate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.Subquery.SetPredicate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Subquery_SetPredicate::IsInitialized() const {
  return true;
}

void Expression_Subquery_SetPredicate::InternalSwap(Expression_Subquery_SetPredicate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_Subquery_SetPredicate, _impl_.predicate_op_)
      + sizeof(Expression_Subquery_SetPredicate::_impl_.predicate_op_)
      - PROTOBUF_FIELD_OFFSET(Expression_Subquery_SetPredicate, _impl_.tuples_)>(
          reinterpret_cast<char*>(&_impl_.tuples_),
          reinterpret_cast<char*>(&other->_impl_.tuples_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Subquery_SetPredicate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[94]);
}

// ===================================================================

class Expression_Subquery_SetComparison::_Internal {
 public:
  static const ::substrait::Expression& left(const Expression_Subquery_SetComparison* msg);
  static const ::substrait::Rel& right(const Expression_Subquery_SetComparison* msg);
};

const ::substrait::Expression&
Expression_Subquery_SetComparison::_Internal::left(const Expression_Subquery_SetComparison* msg) {
  return *msg->_impl_.left_;
}
const ::substrait::Rel&
Expression_Subquery_SetComparison::_Internal::right(const Expression_Subquery_SetComparison* msg) {
  return *msg->_impl_.right_;
}
Expression_Subquery_SetComparison::Expression_Subquery_SetComparison(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.Subquery.SetComparison)
}
Expression_Subquery_SetComparison::Expression_Subquery_SetComparison(const Expression_Subquery_SetComparison& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_Subquery_SetComparison* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.left_){nullptr}
    , decltype(_impl_.right_){nullptr}
    , decltype(_impl_.reduction_op_){}
    , decltype(_impl_.comparison_op_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_left()) {
    _this->_impl_.left_ = new ::substrait::Expression(*from._impl_.left_);
  }
  if (from._internal_has_right()) {
    _this->_impl_.right_ = new ::substrait::Rel(*from._impl_.right_);
  }
  ::memcpy(&_impl_.reduction_op_, &from._impl_.reduction_op_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.comparison_op_) -
    reinterpret_cast<char*>(&_impl_.reduction_op_)) + sizeof(_impl_.comparison_op_));
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.Subquery.SetComparison)
}

inline void Expression_Subquery_SetComparison::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.left_){nullptr}
    , decltype(_impl_.right_){nullptr}
    , decltype(_impl_.reduction_op_){0}
    , decltype(_impl_.comparison_op_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Expression_Subquery_SetComparison::~Expression_Subquery_SetComparison() {
  // @@protoc_insertion_point(destructor:substrait.Expression.Subquery.SetComparison)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_Subquery_SetComparison::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.left_;
  if (this != internal_default_instance()) delete _impl_.right_;
}

void Expression_Subquery_SetComparison::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_Subquery_SetComparison::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.Subquery.SetComparison)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.left_ != nullptr) {
    delete _impl_.left_;
  }
  _impl_.left_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.right_ != nullptr) {
    delete _impl_.right_;
  }
  _impl_.right_ = nullptr;
  ::memset(&_impl_.reduction_op_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.comparison_op_) -
      reinterpret_cast<char*>(&_impl_.reduction_op_)) + sizeof(_impl_.comparison_op_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Subquery_SetComparison::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.Expression.Subquery.SetComparison.ReductionOp reduction_op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reduction_op(static_cast<::substrait::Expression_Subquery_SetComparison_ReductionOp>(val));
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.Subquery.SetComparison.ComparisonOp comparison_op = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_comparison_op(static_cast<::substrait::Expression_Subquery_SetComparison_ComparisonOp>(val));
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression left = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_left(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Rel right = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_right(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_Subquery_SetComparison::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.Subquery.SetComparison)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.Expression.Subquery.SetComparison.ReductionOp reduction_op = 1;
  if (this->_internal_reduction_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reduction_op(), target);
  }

  // .substrait.Expression.Subquery.SetComparison.ComparisonOp comparison_op = 2;
  if (this->_internal_comparison_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_comparison_op(), target);
  }

  // .substrait.Expression left = 3;
  if (this->_internal_has_left()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::left(this),
        _Internal::left(this).GetCachedSize(), target, stream);
  }

  // .substrait.Rel right = 4;
  if (this->_internal_has_right()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::right(this),
        _Internal::right(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.Subquery.SetComparison)
  return target;
}

size_t Expression_Subquery_SetComparison::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.Subquery.SetComparison)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.Expression left = 3;
  if (this->_internal_has_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.left_);
  }

  // .substrait.Rel right = 4;
  if (this->_internal_has_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.right_);
  }

  // .substrait.Expression.Subquery.SetComparison.ReductionOp reduction_op = 1;
  if (this->_internal_reduction_op() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_reduction_op());
  }

  // .substrait.Expression.Subquery.SetComparison.ComparisonOp comparison_op = 2;
  if (this->_internal_comparison_op() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_comparison_op());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_Subquery_SetComparison::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_Subquery_SetComparison::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_Subquery_SetComparison::GetClassData() const { return &_class_data_; }


void Expression_Subquery_SetComparison::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_Subquery_SetComparison*>(&to_msg);
  auto& from = static_cast<const Expression_Subquery_SetComparison&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.Subquery.SetComparison)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_left()) {
    _this->_internal_mutable_left()->::substrait::Expression::MergeFrom(
        from._internal_left());
  }
  if (from._internal_has_right()) {
    _this->_internal_mutable_right()->::substrait::Rel::MergeFrom(
        from._internal_right());
  }
  if (from._internal_reduction_op() != 0) {
    _this->_internal_set_reduction_op(from._internal_reduction_op());
  }
  if (from._internal_comparison_op() != 0) {
    _this->_internal_set_comparison_op(from._internal_comparison_op());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_Subquery_SetComparison::CopyFrom(const Expression_Subquery_SetComparison& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.Subquery.SetComparison)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Subquery_SetComparison::IsInitialized() const {
  return true;
}

void Expression_Subquery_SetComparison::InternalSwap(Expression_Subquery_SetComparison* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Expression_Subquery_SetComparison, _impl_.comparison_op_)
      + sizeof(Expression_Subquery_SetComparison::_impl_.comparison_op_)
      - PROTOBUF_FIELD_OFFSET(Expression_Subquery_SetComparison, _impl_.left_)>(
          reinterpret_cast<char*>(&_impl_.left_),
          reinterpret_cast<char*>(&other->_impl_.left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Subquery_SetComparison::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[95]);
}

// ===================================================================

class Expression_Subquery::_Internal {
 public:
  static const ::substrait::Expression_Subquery_Scalar& scalar(const Expression_Subquery* msg);
  static const ::substrait::Expression_Subquery_InPredicate& in_predicate(const Expression_Subquery* msg);
  static const ::substrait::Expression_Subquery_SetPredicate& set_predicate(const Expression_Subquery* msg);
  static const ::substrait::Expression_Subquery_SetComparison& set_comparison(const Expression_Subquery* msg);
};

const ::substrait::Expression_Subquery_Scalar&
Expression_Subquery::_Internal::scalar(const Expression_Subquery* msg) {
  return *msg->_impl_.subquery_type_.scalar_;
}
const ::substrait::Expression_Subquery_InPredicate&
Expression_Subquery::_Internal::in_predicate(const Expression_Subquery* msg) {
  return *msg->_impl_.subquery_type_.in_predicate_;
}
const ::substrait::Expression_Subquery_SetPredicate&
Expression_Subquery::_Internal::set_predicate(const Expression_Subquery* msg) {
  return *msg->_impl_.subquery_type_.set_predicate_;
}
const ::substrait::Expression_Subquery_SetComparison&
Expression_Subquery::_Internal::set_comparison(const Expression_Subquery* msg) {
  return *msg->_impl_.subquery_type_.set_comparison_;
}
void Expression_Subquery::set_allocated_scalar(::substrait::Expression_Subquery_Scalar* scalar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_subquery_type();
  if (scalar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(scalar);
    if (message_arena != submessage_arena) {
      scalar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalar, submessage_arena);
    }
    set_has_scalar();
    _impl_.subquery_type_.scalar_ = scalar;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.Subquery.scalar)
}
void Expression_Subquery::set_allocated_in_predicate(::substrait::Expression_Subquery_InPredicate* in_predicate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_subquery_type();
  if (in_predicate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(in_predicate);
    if (message_arena != submessage_arena) {
      in_predicate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, in_predicate, submessage_arena);
    }
    set_has_in_predicate();
    _impl_.subquery_type_.in_predicate_ = in_predicate;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.Subquery.in_predicate)
}
void Expression_Subquery::set_allocated_set_predicate(::substrait::Expression_Subquery_SetPredicate* set_predicate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_subquery_type();
  if (set_predicate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(set_predicate);
    if (message_arena != submessage_arena) {
      set_predicate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_predicate, submessage_arena);
    }
    set_has_set_predicate();
    _impl_.subquery_type_.set_predicate_ = set_predicate;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.Subquery.set_predicate)
}
void Expression_Subquery::set_allocated_set_comparison(::substrait::Expression_Subquery_SetComparison* set_comparison) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_subquery_type();
  if (set_comparison) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(set_comparison);
    if (message_arena != submessage_arena) {
      set_comparison = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_comparison, submessage_arena);
    }
    set_has_set_comparison();
    _impl_.subquery_type_.set_comparison_ = set_comparison;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.Subquery.set_comparison)
}
Expression_Subquery::Expression_Subquery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression.Subquery)
}
Expression_Subquery::Expression_Subquery(const Expression_Subquery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression_Subquery* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subquery_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_subquery_type();
  switch (from.subquery_type_case()) {
    case kScalar: {
      _this->_internal_mutable_scalar()->::substrait::Expression_Subquery_Scalar::MergeFrom(
          from._internal_scalar());
      break;
    }
    case kInPredicate: {
      _this->_internal_mutable_in_predicate()->::substrait::Expression_Subquery_InPredicate::MergeFrom(
          from._internal_in_predicate());
      break;
    }
    case kSetPredicate: {
      _this->_internal_mutable_set_predicate()->::substrait::Expression_Subquery_SetPredicate::MergeFrom(
          from._internal_set_predicate());
      break;
    }
    case kSetComparison: {
      _this->_internal_mutable_set_comparison()->::substrait::Expression_Subquery_SetComparison::MergeFrom(
          from._internal_set_comparison());
      break;
    }
    case SUBQUERY_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.Expression.Subquery)
}

inline void Expression_Subquery::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.subquery_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_subquery_type();
}

Expression_Subquery::~Expression_Subquery() {
  // @@protoc_insertion_point(destructor:substrait.Expression.Subquery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression_Subquery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_subquery_type()) {
    clear_subquery_type();
  }
}

void Expression_Subquery::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression_Subquery::clear_subquery_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.Expression.Subquery)
  switch (subquery_type_case()) {
    case kScalar: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.subquery_type_.scalar_;
      }
      break;
    }
    case kInPredicate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.subquery_type_.in_predicate_;
      }
      break;
    }
    case kSetPredicate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.subquery_type_.set_predicate_;
      }
      break;
    }
    case kSetComparison: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.subquery_type_.set_comparison_;
      }
      break;
    }
    case SUBQUERY_TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SUBQUERY_TYPE_NOT_SET;
}


void Expression_Subquery::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression.Subquery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_subquery_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression_Subquery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.Expression.Subquery.Scalar scalar = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalar(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.Subquery.InPredicate in_predicate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_in_predicate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.Subquery.SetPredicate set_predicate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_predicate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.Subquery.SetComparison set_comparison = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_comparison(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression_Subquery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression.Subquery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.Expression.Subquery.Scalar scalar = 1;
  if (_internal_has_scalar()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::scalar(this),
        _Internal::scalar(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression.Subquery.InPredicate in_predicate = 2;
  if (_internal_has_in_predicate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::in_predicate(this),
        _Internal::in_predicate(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression.Subquery.SetPredicate set_predicate = 3;
  if (_internal_has_set_predicate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::set_predicate(this),
        _Internal::set_predicate(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression.Subquery.SetComparison set_comparison = 4;
  if (_internal_has_set_comparison()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::set_comparison(this),
        _Internal::set_comparison(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression.Subquery)
  return target;
}

size_t Expression_Subquery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression.Subquery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (subquery_type_case()) {
    // .substrait.Expression.Subquery.Scalar scalar = 1;
    case kScalar: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.subquery_type_.scalar_);
      break;
    }
    // .substrait.Expression.Subquery.InPredicate in_predicate = 2;
    case kInPredicate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.subquery_type_.in_predicate_);
      break;
    }
    // .substrait.Expression.Subquery.SetPredicate set_predicate = 3;
    case kSetPredicate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.subquery_type_.set_predicate_);
      break;
    }
    // .substrait.Expression.Subquery.SetComparison set_comparison = 4;
    case kSetComparison: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.subquery_type_.set_comparison_);
      break;
    }
    case SUBQUERY_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression_Subquery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression_Subquery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression_Subquery::GetClassData() const { return &_class_data_; }


void Expression_Subquery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression_Subquery*>(&to_msg);
  auto& from = static_cast<const Expression_Subquery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression.Subquery)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.subquery_type_case()) {
    case kScalar: {
      _this->_internal_mutable_scalar()->::substrait::Expression_Subquery_Scalar::MergeFrom(
          from._internal_scalar());
      break;
    }
    case kInPredicate: {
      _this->_internal_mutable_in_predicate()->::substrait::Expression_Subquery_InPredicate::MergeFrom(
          from._internal_in_predicate());
      break;
    }
    case kSetPredicate: {
      _this->_internal_mutable_set_predicate()->::substrait::Expression_Subquery_SetPredicate::MergeFrom(
          from._internal_set_predicate());
      break;
    }
    case kSetComparison: {
      _this->_internal_mutable_set_comparison()->::substrait::Expression_Subquery_SetComparison::MergeFrom(
          from._internal_set_comparison());
      break;
    }
    case SUBQUERY_TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression_Subquery::CopyFrom(const Expression_Subquery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression.Subquery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression_Subquery::IsInitialized() const {
  return true;
}

void Expression_Subquery::InternalSwap(Expression_Subquery* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.subquery_type_, other->_impl_.subquery_type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression_Subquery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[96]);
}

// ===================================================================

class Expression::_Internal {
 public:
  static const ::substrait::Expression_Literal& literal(const Expression* msg);
  static const ::substrait::Expression_FieldReference& selection(const Expression* msg);
  static const ::substrait::Expression_ScalarFunction& scalar_function(const Expression* msg);
  static const ::substrait::Expression_WindowFunction& window_function(const Expression* msg);
  static const ::substrait::Expression_IfThen& if_then(const Expression* msg);
  static const ::substrait::Expression_SwitchExpression& switch_expression(const Expression* msg);
  static const ::substrait::Expression_SingularOrList& singular_or_list(const Expression* msg);
  static const ::substrait::Expression_MultiOrList& multi_or_list(const Expression* msg);
  static const ::substrait::Expression_Cast& cast(const Expression* msg);
  static const ::substrait::Expression_Subquery& subquery(const Expression* msg);
  static const ::substrait::Expression_Enum& enum_(const Expression* msg);
};

const ::substrait::Expression_Literal&
Expression::_Internal::literal(const Expression* msg) {
  return *msg->_impl_.rex_type_.literal_;
}
const ::substrait::Expression_FieldReference&
Expression::_Internal::selection(const Expression* msg) {
  return *msg->_impl_.rex_type_.selection_;
}
const ::substrait::Expression_ScalarFunction&
Expression::_Internal::scalar_function(const Expression* msg) {
  return *msg->_impl_.rex_type_.scalar_function_;
}
const ::substrait::Expression_WindowFunction&
Expression::_Internal::window_function(const Expression* msg) {
  return *msg->_impl_.rex_type_.window_function_;
}
const ::substrait::Expression_IfThen&
Expression::_Internal::if_then(const Expression* msg) {
  return *msg->_impl_.rex_type_.if_then_;
}
const ::substrait::Expression_SwitchExpression&
Expression::_Internal::switch_expression(const Expression* msg) {
  return *msg->_impl_.rex_type_.switch_expression_;
}
const ::substrait::Expression_SingularOrList&
Expression::_Internal::singular_or_list(const Expression* msg) {
  return *msg->_impl_.rex_type_.singular_or_list_;
}
const ::substrait::Expression_MultiOrList&
Expression::_Internal::multi_or_list(const Expression* msg) {
  return *msg->_impl_.rex_type_.multi_or_list_;
}
const ::substrait::Expression_Cast&
Expression::_Internal::cast(const Expression* msg) {
  return *msg->_impl_.rex_type_.cast_;
}
const ::substrait::Expression_Subquery&
Expression::_Internal::subquery(const Expression* msg) {
  return *msg->_impl_.rex_type_.subquery_;
}
const ::substrait::Expression_Enum&
Expression::_Internal::enum_(const Expression* msg) {
  return *msg->_impl_.rex_type_.enum__;
}
void Expression::set_allocated_literal(::substrait::Expression_Literal* literal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rex_type();
  if (literal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(literal);
    if (message_arena != submessage_arena) {
      literal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, literal, submessage_arena);
    }
    set_has_literal();
    _impl_.rex_type_.literal_ = literal;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.literal)
}
void Expression::set_allocated_selection(::substrait::Expression_FieldReference* selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rex_type();
  if (selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(selection);
    if (message_arena != submessage_arena) {
      selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection, submessage_arena);
    }
    set_has_selection();
    _impl_.rex_type_.selection_ = selection;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.selection)
}
void Expression::set_allocated_scalar_function(::substrait::Expression_ScalarFunction* scalar_function) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rex_type();
  if (scalar_function) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(scalar_function);
    if (message_arena != submessage_arena) {
      scalar_function = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalar_function, submessage_arena);
    }
    set_has_scalar_function();
    _impl_.rex_type_.scalar_function_ = scalar_function;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.scalar_function)
}
void Expression::set_allocated_window_function(::substrait::Expression_WindowFunction* window_function) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rex_type();
  if (window_function) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(window_function);
    if (message_arena != submessage_arena) {
      window_function = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window_function, submessage_arena);
    }
    set_has_window_function();
    _impl_.rex_type_.window_function_ = window_function;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.window_function)
}
void Expression::set_allocated_if_then(::substrait::Expression_IfThen* if_then) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rex_type();
  if (if_then) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(if_then);
    if (message_arena != submessage_arena) {
      if_then = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, if_then, submessage_arena);
    }
    set_has_if_then();
    _impl_.rex_type_.if_then_ = if_then;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.if_then)
}
void Expression::set_allocated_switch_expression(::substrait::Expression_SwitchExpression* switch_expression) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rex_type();
  if (switch_expression) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(switch_expression);
    if (message_arena != submessage_arena) {
      switch_expression = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, switch_expression, submessage_arena);
    }
    set_has_switch_expression();
    _impl_.rex_type_.switch_expression_ = switch_expression;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.switch_expression)
}
void Expression::set_allocated_singular_or_list(::substrait::Expression_SingularOrList* singular_or_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rex_type();
  if (singular_or_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(singular_or_list);
    if (message_arena != submessage_arena) {
      singular_or_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, singular_or_list, submessage_arena);
    }
    set_has_singular_or_list();
    _impl_.rex_type_.singular_or_list_ = singular_or_list;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.singular_or_list)
}
void Expression::set_allocated_multi_or_list(::substrait::Expression_MultiOrList* multi_or_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rex_type();
  if (multi_or_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(multi_or_list);
    if (message_arena != submessage_arena) {
      multi_or_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multi_or_list, submessage_arena);
    }
    set_has_multi_or_list();
    _impl_.rex_type_.multi_or_list_ = multi_or_list;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.multi_or_list)
}
void Expression::set_allocated_cast(::substrait::Expression_Cast* cast) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rex_type();
  if (cast) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cast);
    if (message_arena != submessage_arena) {
      cast = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cast, submessage_arena);
    }
    set_has_cast();
    _impl_.rex_type_.cast_ = cast;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.cast)
}
void Expression::set_allocated_subquery(::substrait::Expression_Subquery* subquery) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rex_type();
  if (subquery) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(subquery);
    if (message_arena != submessage_arena) {
      subquery = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subquery, submessage_arena);
    }
    set_has_subquery();
    _impl_.rex_type_.subquery_ = subquery;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.subquery)
}
void Expression::set_allocated_enum_(::substrait::Expression_Enum* enum_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rex_type();
  if (enum_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(enum_);
    if (message_arena != submessage_arena) {
      enum_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enum_, submessage_arena);
    }
    set_has_enum_();
    _impl_.rex_type_.enum__ = enum_;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.enum)
}
Expression::Expression(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Expression)
}
Expression::Expression(const Expression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Expression* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rex_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_rex_type();
  switch (from.rex_type_case()) {
    case kLiteral: {
      _this->_internal_mutable_literal()->::substrait::Expression_Literal::MergeFrom(
          from._internal_literal());
      break;
    }
    case kSelection: {
      _this->_internal_mutable_selection()->::substrait::Expression_FieldReference::MergeFrom(
          from._internal_selection());
      break;
    }
    case kScalarFunction: {
      _this->_internal_mutable_scalar_function()->::substrait::Expression_ScalarFunction::MergeFrom(
          from._internal_scalar_function());
      break;
    }
    case kWindowFunction: {
      _this->_internal_mutable_window_function()->::substrait::Expression_WindowFunction::MergeFrom(
          from._internal_window_function());
      break;
    }
    case kIfThen: {
      _this->_internal_mutable_if_then()->::substrait::Expression_IfThen::MergeFrom(
          from._internal_if_then());
      break;
    }
    case kSwitchExpression: {
      _this->_internal_mutable_switch_expression()->::substrait::Expression_SwitchExpression::MergeFrom(
          from._internal_switch_expression());
      break;
    }
    case kSingularOrList: {
      _this->_internal_mutable_singular_or_list()->::substrait::Expression_SingularOrList::MergeFrom(
          from._internal_singular_or_list());
      break;
    }
    case kMultiOrList: {
      _this->_internal_mutable_multi_or_list()->::substrait::Expression_MultiOrList::MergeFrom(
          from._internal_multi_or_list());
      break;
    }
    case kCast: {
      _this->_internal_mutable_cast()->::substrait::Expression_Cast::MergeFrom(
          from._internal_cast());
      break;
    }
    case kSubquery: {
      _this->_internal_mutable_subquery()->::substrait::Expression_Subquery::MergeFrom(
          from._internal_subquery());
      break;
    }
    case kEnum: {
      _this->_internal_mutable_enum_()->::substrait::Expression_Enum::MergeFrom(
          from._internal_enum_());
      break;
    }
    case REX_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.Expression)
}

inline void Expression::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rex_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_rex_type();
}

Expression::~Expression() {
  // @@protoc_insertion_point(destructor:substrait.Expression)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Expression::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_rex_type()) {
    clear_rex_type();
  }
}

void Expression::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Expression::clear_rex_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.Expression)
  switch (rex_type_case()) {
    case kLiteral: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.rex_type_.literal_;
      }
      break;
    }
    case kSelection: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.rex_type_.selection_;
      }
      break;
    }
    case kScalarFunction: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.rex_type_.scalar_function_;
      }
      break;
    }
    case kWindowFunction: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.rex_type_.window_function_;
      }
      break;
    }
    case kIfThen: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.rex_type_.if_then_;
      }
      break;
    }
    case kSwitchExpression: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.rex_type_.switch_expression_;
      }
      break;
    }
    case kSingularOrList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.rex_type_.singular_or_list_;
      }
      break;
    }
    case kMultiOrList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.rex_type_.multi_or_list_;
      }
      break;
    }
    case kCast: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.rex_type_.cast_;
      }
      break;
    }
    case kSubquery: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.rex_type_.subquery_;
      }
      break;
    }
    case kEnum: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.rex_type_.enum__;
      }
      break;
    }
    case REX_TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = REX_TYPE_NOT_SET;
}


void Expression::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Expression)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_rex_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.Expression.Literal literal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_literal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.FieldReference selection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_selection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.ScalarFunction scalar_function = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalar_function(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.WindowFunction window_function = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_window_function(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.IfThen if_then = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_if_then(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.SwitchExpression switch_expression = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_switch_expression(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.SingularOrList singular_or_list = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_singular_or_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.MultiOrList multi_or_list = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_multi_or_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.Enum enum = 10 [deprecated = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_enum_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.Cast cast = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_cast(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.Subquery subquery = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_subquery(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Expression::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Expression)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.Expression.Literal literal = 1;
  if (_internal_has_literal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::literal(this),
        _Internal::literal(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression.FieldReference selection = 2;
  if (_internal_has_selection()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::selection(this),
        _Internal::selection(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression.ScalarFunction scalar_function = 3;
  if (_internal_has_scalar_function()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::scalar_function(this),
        _Internal::scalar_function(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression.WindowFunction window_function = 5;
  if (_internal_has_window_function()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::window_function(this),
        _Internal::window_function(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression.IfThen if_then = 6;
  if (_internal_has_if_then()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::if_then(this),
        _Internal::if_then(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression.SwitchExpression switch_expression = 7;
  if (_internal_has_switch_expression()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::switch_expression(this),
        _Internal::switch_expression(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression.SingularOrList singular_or_list = 8;
  if (_internal_has_singular_or_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::singular_or_list(this),
        _Internal::singular_or_list(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression.MultiOrList multi_or_list = 9;
  if (_internal_has_multi_or_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::multi_or_list(this),
        _Internal::multi_or_list(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression.Enum enum = 10 [deprecated = true];
  if (_internal_has_enum_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::enum_(this),
        _Internal::enum_(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression.Cast cast = 11;
  if (_internal_has_cast()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::cast(this),
        _Internal::cast(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression.Subquery subquery = 12;
  if (_internal_has_subquery()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::subquery(this),
        _Internal::subquery(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Expression)
  return target;
}

size_t Expression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Expression)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (rex_type_case()) {
    // .substrait.Expression.Literal literal = 1;
    case kLiteral: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rex_type_.literal_);
      break;
    }
    // .substrait.Expression.FieldReference selection = 2;
    case kSelection: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rex_type_.selection_);
      break;
    }
    // .substrait.Expression.ScalarFunction scalar_function = 3;
    case kScalarFunction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rex_type_.scalar_function_);
      break;
    }
    // .substrait.Expression.WindowFunction window_function = 5;
    case kWindowFunction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rex_type_.window_function_);
      break;
    }
    // .substrait.Expression.IfThen if_then = 6;
    case kIfThen: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rex_type_.if_then_);
      break;
    }
    // .substrait.Expression.SwitchExpression switch_expression = 7;
    case kSwitchExpression: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rex_type_.switch_expression_);
      break;
    }
    // .substrait.Expression.SingularOrList singular_or_list = 8;
    case kSingularOrList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rex_type_.singular_or_list_);
      break;
    }
    // .substrait.Expression.MultiOrList multi_or_list = 9;
    case kMultiOrList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rex_type_.multi_or_list_);
      break;
    }
    // .substrait.Expression.Cast cast = 11;
    case kCast: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rex_type_.cast_);
      break;
    }
    // .substrait.Expression.Subquery subquery = 12;
    case kSubquery: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rex_type_.subquery_);
      break;
    }
    // .substrait.Expression.Enum enum = 10 [deprecated = true];
    case kEnum: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rex_type_.enum__);
      break;
    }
    case REX_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Expression::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression::GetClassData() const { return &_class_data_; }


void Expression::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Expression*>(&to_msg);
  auto& from = static_cast<const Expression&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Expression)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.rex_type_case()) {
    case kLiteral: {
      _this->_internal_mutable_literal()->::substrait::Expression_Literal::MergeFrom(
          from._internal_literal());
      break;
    }
    case kSelection: {
      _this->_internal_mutable_selection()->::substrait::Expression_FieldReference::MergeFrom(
          from._internal_selection());
      break;
    }
    case kScalarFunction: {
      _this->_internal_mutable_scalar_function()->::substrait::Expression_ScalarFunction::MergeFrom(
          from._internal_scalar_function());
      break;
    }
    case kWindowFunction: {
      _this->_internal_mutable_window_function()->::substrait::Expression_WindowFunction::MergeFrom(
          from._internal_window_function());
      break;
    }
    case kIfThen: {
      _this->_internal_mutable_if_then()->::substrait::Expression_IfThen::MergeFrom(
          from._internal_if_then());
      break;
    }
    case kSwitchExpression: {
      _this->_internal_mutable_switch_expression()->::substrait::Expression_SwitchExpression::MergeFrom(
          from._internal_switch_expression());
      break;
    }
    case kSingularOrList: {
      _this->_internal_mutable_singular_or_list()->::substrait::Expression_SingularOrList::MergeFrom(
          from._internal_singular_or_list());
      break;
    }
    case kMultiOrList: {
      _this->_internal_mutable_multi_or_list()->::substrait::Expression_MultiOrList::MergeFrom(
          from._internal_multi_or_list());
      break;
    }
    case kCast: {
      _this->_internal_mutable_cast()->::substrait::Expression_Cast::MergeFrom(
          from._internal_cast());
      break;
    }
    case kSubquery: {
      _this->_internal_mutable_subquery()->::substrait::Expression_Subquery::MergeFrom(
          from._internal_subquery());
      break;
    }
    case kEnum: {
      _this->_internal_mutable_enum_()->::substrait::Expression_Enum::MergeFrom(
          from._internal_enum_());
      break;
    }
    case REX_TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression::CopyFrom(const Expression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Expression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression::IsInitialized() const {
  return true;
}

void Expression::InternalSwap(Expression* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.rex_type_, other->_impl_.rex_type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[97]);
}

// ===================================================================

class SortField::_Internal {
 public:
  static const ::substrait::Expression& expr(const SortField* msg);
};

const ::substrait::Expression&
SortField::_Internal::expr(const SortField* msg) {
  return *msg->_impl_.expr_;
}
SortField::SortField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.SortField)
}
SortField::SortField(const SortField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SortField* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.expr_){nullptr}
    , decltype(_impl_.sort_kind_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_expr()) {
    _this->_impl_.expr_ = new ::substrait::Expression(*from._impl_.expr_);
  }
  clear_has_sort_kind();
  switch (from.sort_kind_case()) {
    case kDirection: {
      _this->_internal_set_direction(from._internal_direction());
      break;
    }
    case kComparisonFunctionReference: {
      _this->_internal_set_comparison_function_reference(from._internal_comparison_function_reference());
      break;
    }
    case SORT_KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.SortField)
}

inline void SortField::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.expr_){nullptr}
    , decltype(_impl_.sort_kind_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_sort_kind();
}

SortField::~SortField() {
  // @@protoc_insertion_point(destructor:substrait.SortField)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SortField::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.expr_;
  if (has_sort_kind()) {
    clear_sort_kind();
  }
}

void SortField::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SortField::clear_sort_kind() {
// @@protoc_insertion_point(one_of_clear_start:substrait.SortField)
  switch (sort_kind_case()) {
    case kDirection: {
      // No need to clear
      break;
    }
    case kComparisonFunctionReference: {
      // No need to clear
      break;
    }
    case SORT_KIND_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SORT_KIND_NOT_SET;
}


void SortField::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.SortField)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.expr_ != nullptr) {
    delete _impl_.expr_;
  }
  _impl_.expr_ = nullptr;
  clear_sort_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SortField::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.Expression expr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_expr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.SortField.SortDirection direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::substrait::SortField_SortDirection>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 comparison_function_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_comparison_function_reference(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SortField::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.SortField)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.Expression expr = 1;
  if (this->_internal_has_expr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::expr(this),
        _Internal::expr(this).GetCachedSize(), target, stream);
  }

  // .substrait.SortField.SortDirection direction = 2;
  if (_internal_has_direction()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_direction(), target);
  }

  // uint32 comparison_function_reference = 3;
  if (_internal_has_comparison_function_reference()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_comparison_function_reference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.SortField)
  return target;
}

size_t SortField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.SortField)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.Expression expr = 1;
  if (this->_internal_has_expr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expr_);
  }

  switch (sort_kind_case()) {
    // .substrait.SortField.SortDirection direction = 2;
    case kDirection: {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_direction());
      break;
    }
    // uint32 comparison_function_reference = 3;
    case kComparisonFunctionReference: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_comparison_function_reference());
      break;
    }
    case SORT_KIND_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SortField::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SortField::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SortField::GetClassData() const { return &_class_data_; }


void SortField::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SortField*>(&to_msg);
  auto& from = static_cast<const SortField&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.SortField)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_expr()) {
    _this->_internal_mutable_expr()->::substrait::Expression::MergeFrom(
        from._internal_expr());
  }
  switch (from.sort_kind_case()) {
    case kDirection: {
      _this->_internal_set_direction(from._internal_direction());
      break;
    }
    case kComparisonFunctionReference: {
      _this->_internal_set_comparison_function_reference(from._internal_comparison_function_reference());
      break;
    }
    case SORT_KIND_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SortField::CopyFrom(const SortField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.SortField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SortField::IsInitialized() const {
  return true;
}

void SortField::InternalSwap(SortField* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.expr_, other->_impl_.expr_);
  swap(_impl_.sort_kind_, other->_impl_.sort_kind_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SortField::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[98]);
}

// ===================================================================

class AggregateFunction_ReferenceRel::_Internal {
 public:
};

AggregateFunction_ReferenceRel::AggregateFunction_ReferenceRel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.AggregateFunction.ReferenceRel)
}
AggregateFunction_ReferenceRel::AggregateFunction_ReferenceRel(const AggregateFunction_ReferenceRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AggregateFunction_ReferenceRel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subtree_ordinal_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.subtree_ordinal_ = from._impl_.subtree_ordinal_;
  // @@protoc_insertion_point(copy_constructor:substrait.AggregateFunction.ReferenceRel)
}

inline void AggregateFunction_ReferenceRel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.subtree_ordinal_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AggregateFunction_ReferenceRel::~AggregateFunction_ReferenceRel() {
  // @@protoc_insertion_point(destructor:substrait.AggregateFunction.ReferenceRel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AggregateFunction_ReferenceRel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AggregateFunction_ReferenceRel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AggregateFunction_ReferenceRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.AggregateFunction.ReferenceRel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subtree_ordinal_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AggregateFunction_ReferenceRel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 subtree_ordinal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.subtree_ordinal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AggregateFunction_ReferenceRel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.AggregateFunction.ReferenceRel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 subtree_ordinal = 1;
  if (this->_internal_subtree_ordinal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_subtree_ordinal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.AggregateFunction.ReferenceRel)
  return target;
}

size_t AggregateFunction_ReferenceRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.AggregateFunction.ReferenceRel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 subtree_ordinal = 1;
  if (this->_internal_subtree_ordinal() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_subtree_ordinal());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AggregateFunction_ReferenceRel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AggregateFunction_ReferenceRel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AggregateFunction_ReferenceRel::GetClassData() const { return &_class_data_; }


void AggregateFunction_ReferenceRel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AggregateFunction_ReferenceRel*>(&to_msg);
  auto& from = static_cast<const AggregateFunction_ReferenceRel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.AggregateFunction.ReferenceRel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_subtree_ordinal() != 0) {
    _this->_internal_set_subtree_ordinal(from._internal_subtree_ordinal());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AggregateFunction_ReferenceRel::CopyFrom(const AggregateFunction_ReferenceRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.AggregateFunction.ReferenceRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregateFunction_ReferenceRel::IsInitialized() const {
  return true;
}

void AggregateFunction_ReferenceRel::InternalSwap(AggregateFunction_ReferenceRel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.subtree_ordinal_, other->_impl_.subtree_ordinal_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AggregateFunction_ReferenceRel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[99]);
}

// ===================================================================

class AggregateFunction::_Internal {
 public:
  static const ::substrait::Type& output_type(const AggregateFunction* msg);
};

const ::substrait::Type&
AggregateFunction::_Internal::output_type(const AggregateFunction* msg) {
  return *msg->_impl_.output_type_;
}
void AggregateFunction::clear_output_type() {
  if (GetArenaForAllocation() == nullptr && _impl_.output_type_ != nullptr) {
    delete _impl_.output_type_;
  }
  _impl_.output_type_ = nullptr;
}
AggregateFunction::AggregateFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.AggregateFunction)
}
AggregateFunction::AggregateFunction(const AggregateFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AggregateFunction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.args_){from._impl_.args_}
    , decltype(_impl_.sorts_){from._impl_.sorts_}
    , decltype(_impl_.arguments_){from._impl_.arguments_}
    , decltype(_impl_.output_type_){nullptr}
    , decltype(_impl_.function_reference_){}
    , decltype(_impl_.phase_){}
    , decltype(_impl_.invocation_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_output_type()) {
    _this->_impl_.output_type_ = new ::substrait::Type(*from._impl_.output_type_);
  }
  ::memcpy(&_impl_.function_reference_, &from._impl_.function_reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.invocation_) -
    reinterpret_cast<char*>(&_impl_.function_reference_)) + sizeof(_impl_.invocation_));
  // @@protoc_insertion_point(copy_constructor:substrait.AggregateFunction)
}

inline void AggregateFunction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.args_){arena}
    , decltype(_impl_.sorts_){arena}
    , decltype(_impl_.arguments_){arena}
    , decltype(_impl_.output_type_){nullptr}
    , decltype(_impl_.function_reference_){0u}
    , decltype(_impl_.phase_){0}
    , decltype(_impl_.invocation_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AggregateFunction::~AggregateFunction() {
  // @@protoc_insertion_point(destructor:substrait.AggregateFunction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AggregateFunction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.args_.~RepeatedPtrField();
  _impl_.sorts_.~RepeatedPtrField();
  _impl_.arguments_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.output_type_;
}

void AggregateFunction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AggregateFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.AggregateFunction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.args_.Clear();
  _impl_.sorts_.Clear();
  _impl_.arguments_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.output_type_ != nullptr) {
    delete _impl_.output_type_;
  }
  _impl_.output_type_ = nullptr;
  ::memset(&_impl_.function_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.invocation_) -
      reinterpret_cast<char*>(&_impl_.function_reference_)) + sizeof(_impl_.invocation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AggregateFunction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 function_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.function_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .substrait.Expression args = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .substrait.SortField sorts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sorts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .substrait.AggregationPhase phase = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_phase(static_cast<::substrait::AggregationPhase>(val));
        } else
          goto handle_unusual;
        continue;
      // .substrait.Type output_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.AggregateFunction.AggregationInvocation invocation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_invocation(static_cast<::substrait::AggregateFunction_AggregationInvocation>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .substrait.FunctionArgument arguments = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arguments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AggregateFunction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.AggregateFunction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 function_reference = 1;
  if (this->_internal_function_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_function_reference(), target);
  }

  // repeated .substrait.Expression args = 2 [deprecated = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_args_size()); i < n; i++) {
    const auto& repfield = this->_internal_args(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .substrait.SortField sorts = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sorts_size()); i < n; i++) {
    const auto& repfield = this->_internal_sorts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .substrait.AggregationPhase phase = 4;
  if (this->_internal_phase() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_phase(), target);
  }

  // .substrait.Type output_type = 5;
  if (this->_internal_has_output_type()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::output_type(this),
        _Internal::output_type(this).GetCachedSize(), target, stream);
  }

  // .substrait.AggregateFunction.AggregationInvocation invocation = 6;
  if (this->_internal_invocation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_invocation(), target);
  }

  // repeated .substrait.FunctionArgument arguments = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_arguments_size()); i < n; i++) {
    const auto& repfield = this->_internal_arguments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.AggregateFunction)
  return target;
}

size_t AggregateFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.AggregateFunction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.Expression args = 2 [deprecated = true];
  total_size += 1UL * this->_internal_args_size();
  for (const auto& msg : this->_impl_.args_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .substrait.SortField sorts = 3;
  total_size += 1UL * this->_internal_sorts_size();
  for (const auto& msg : this->_impl_.sorts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .substrait.FunctionArgument arguments = 7;
  total_size += 1UL * this->_internal_arguments_size();
  for (const auto& msg : this->_impl_.arguments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .substrait.Type output_type = 5;
  if (this->_internal_has_output_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.output_type_);
  }

  // uint32 function_reference = 1;
  if (this->_internal_function_reference() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_function_reference());
  }

  // .substrait.AggregationPhase phase = 4;
  if (this->_internal_phase() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_phase());
  }

  // .substrait.AggregateFunction.AggregationInvocation invocation = 6;
  if (this->_internal_invocation() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_invocation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AggregateFunction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AggregateFunction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AggregateFunction::GetClassData() const { return &_class_data_; }


void AggregateFunction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AggregateFunction*>(&to_msg);
  auto& from = static_cast<const AggregateFunction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.AggregateFunction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.args_.MergeFrom(from._impl_.args_);
  _this->_impl_.sorts_.MergeFrom(from._impl_.sorts_);
  _this->_impl_.arguments_.MergeFrom(from._impl_.arguments_);
  if (from._internal_has_output_type()) {
    _this->_internal_mutable_output_type()->::substrait::Type::MergeFrom(
        from._internal_output_type());
  }
  if (from._internal_function_reference() != 0) {
    _this->_internal_set_function_reference(from._internal_function_reference());
  }
  if (from._internal_phase() != 0) {
    _this->_internal_set_phase(from._internal_phase());
  }
  if (from._internal_invocation() != 0) {
    _this->_internal_set_invocation(from._internal_invocation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AggregateFunction::CopyFrom(const AggregateFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.AggregateFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregateFunction::IsInitialized() const {
  return true;
}

void AggregateFunction::InternalSwap(AggregateFunction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.args_.InternalSwap(&other->_impl_.args_);
  _impl_.sorts_.InternalSwap(&other->_impl_.sorts_);
  _impl_.arguments_.InternalSwap(&other->_impl_.arguments_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AggregateFunction, _impl_.invocation_)
      + sizeof(AggregateFunction::_impl_.invocation_)
      - PROTOBUF_FIELD_OFFSET(AggregateFunction, _impl_.output_type_)>(
          reinterpret_cast<char*>(&_impl_.output_type_),
          reinterpret_cast<char*>(&other->_impl_.output_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AggregateFunction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2falgebra_2eproto_getter, &descriptor_table_substrait_2falgebra_2eproto_once,
      file_level_metadata_substrait_2falgebra_2eproto[100]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace substrait
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::substrait::RelCommon_Direct*
Arena::CreateMaybeMessage< ::substrait::RelCommon_Direct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::RelCommon_Direct >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::RelCommon_Emit*
Arena::CreateMaybeMessage< ::substrait::RelCommon_Emit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::RelCommon_Emit >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::RelCommon_Hint_Stats*
Arena::CreateMaybeMessage< ::substrait::RelCommon_Hint_Stats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::RelCommon_Hint_Stats >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::RelCommon_Hint_RuntimeConstraint*
Arena::CreateMaybeMessage< ::substrait::RelCommon_Hint_RuntimeConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::RelCommon_Hint_RuntimeConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::RelCommon_Hint*
Arena::CreateMaybeMessage< ::substrait::RelCommon_Hint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::RelCommon_Hint >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::RelCommon*
Arena::CreateMaybeMessage< ::substrait::RelCommon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::RelCommon >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::ReadRel_NamedTable*
Arena::CreateMaybeMessage< ::substrait::ReadRel_NamedTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::ReadRel_NamedTable >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::ReadRel_VirtualTable*
Arena::CreateMaybeMessage< ::substrait::ReadRel_VirtualTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::ReadRel_VirtualTable >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::ReadRel_ExtensionTable*
Arena::CreateMaybeMessage< ::substrait::ReadRel_ExtensionTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::ReadRel_ExtensionTable >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions*
Arena::CreateMaybeMessage< ::substrait::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions*
Arena::CreateMaybeMessage< ::substrait::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions*
Arena::CreateMaybeMessage< ::substrait::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions*
Arena::CreateMaybeMessage< ::substrait::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::ReadRel_LocalFiles_FileOrFiles*
Arena::CreateMaybeMessage< ::substrait::ReadRel_LocalFiles_FileOrFiles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::ReadRel_LocalFiles_FileOrFiles >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::ReadRel_LocalFiles*
Arena::CreateMaybeMessage< ::substrait::ReadRel_LocalFiles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::ReadRel_LocalFiles >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::ReadRel*
Arena::CreateMaybeMessage< ::substrait::ReadRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::ReadRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::ProjectRel*
Arena::CreateMaybeMessage< ::substrait::ProjectRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::ProjectRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::JoinRel*
Arena::CreateMaybeMessage< ::substrait::JoinRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::JoinRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::CrossRel*
Arena::CreateMaybeMessage< ::substrait::CrossRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::CrossRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::FetchRel*
Arena::CreateMaybeMessage< ::substrait::FetchRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::FetchRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::AggregateRel_Grouping*
Arena::CreateMaybeMessage< ::substrait::AggregateRel_Grouping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::AggregateRel_Grouping >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::AggregateRel_Measure*
Arena::CreateMaybeMessage< ::substrait::AggregateRel_Measure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::AggregateRel_Measure >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::AggregateRel*
Arena::CreateMaybeMessage< ::substrait::AggregateRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::AggregateRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::SortRel*
Arena::CreateMaybeMessage< ::substrait::SortRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::SortRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::FilterRel*
Arena::CreateMaybeMessage< ::substrait::FilterRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::FilterRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::SetRel*
Arena::CreateMaybeMessage< ::substrait::SetRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::SetRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::ExtensionSingleRel*
Arena::CreateMaybeMessage< ::substrait::ExtensionSingleRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::ExtensionSingleRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::ExtensionLeafRel*
Arena::CreateMaybeMessage< ::substrait::ExtensionLeafRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::ExtensionLeafRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::ExtensionMultiRel*
Arena::CreateMaybeMessage< ::substrait::ExtensionMultiRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::ExtensionMultiRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::ExchangeRel_ScatterFields*
Arena::CreateMaybeMessage< ::substrait::ExchangeRel_ScatterFields >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::ExchangeRel_ScatterFields >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::ExchangeRel_SingleBucketExpression*
Arena::CreateMaybeMessage< ::substrait::ExchangeRel_SingleBucketExpression >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::ExchangeRel_SingleBucketExpression >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::ExchangeRel_MultiBucketExpression*
Arena::CreateMaybeMessage< ::substrait::ExchangeRel_MultiBucketExpression >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::ExchangeRel_MultiBucketExpression >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::ExchangeRel_Broadcast*
Arena::CreateMaybeMessage< ::substrait::ExchangeRel_Broadcast >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::ExchangeRel_Broadcast >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::ExchangeRel_RoundRobin*
Arena::CreateMaybeMessage< ::substrait::ExchangeRel_RoundRobin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::ExchangeRel_RoundRobin >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::ExchangeRel_ExchangeTarget*
Arena::CreateMaybeMessage< ::substrait::ExchangeRel_ExchangeTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::ExchangeRel_ExchangeTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::ExchangeRel*
Arena::CreateMaybeMessage< ::substrait::ExchangeRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::ExchangeRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::RelRoot*
Arena::CreateMaybeMessage< ::substrait::RelRoot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::RelRoot >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Rel*
Arena::CreateMaybeMessage< ::substrait::Rel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Rel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::NamedObjectWrite*
Arena::CreateMaybeMessage< ::substrait::NamedObjectWrite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::NamedObjectWrite >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::ExtensionObject*
Arena::CreateMaybeMessage< ::substrait::ExtensionObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::ExtensionObject >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::DdlRel*
Arena::CreateMaybeMessage< ::substrait::DdlRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::DdlRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::WriteRel*
Arena::CreateMaybeMessage< ::substrait::WriteRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::WriteRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::FunctionArgument_Enum*
Arena::CreateMaybeMessage< ::substrait::FunctionArgument_Enum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::FunctionArgument_Enum >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::FunctionArgument*
Arena::CreateMaybeMessage< ::substrait::FunctionArgument >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::FunctionArgument >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_Enum_Empty*
Arena::CreateMaybeMessage< ::substrait::Expression_Enum_Empty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_Enum_Empty >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_Enum*
Arena::CreateMaybeMessage< ::substrait::Expression_Enum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_Enum >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_Literal_VarChar*
Arena::CreateMaybeMessage< ::substrait::Expression_Literal_VarChar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_Literal_VarChar >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_Literal_Decimal*
Arena::CreateMaybeMessage< ::substrait::Expression_Literal_Decimal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_Literal_Decimal >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_Literal_Map_KeyValue*
Arena::CreateMaybeMessage< ::substrait::Expression_Literal_Map_KeyValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_Literal_Map_KeyValue >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_Literal_Map*
Arena::CreateMaybeMessage< ::substrait::Expression_Literal_Map >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_Literal_Map >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_Literal_IntervalYearToMonth*
Arena::CreateMaybeMessage< ::substrait::Expression_Literal_IntervalYearToMonth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_Literal_IntervalYearToMonth >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_Literal_IntervalDayToSecond*
Arena::CreateMaybeMessage< ::substrait::Expression_Literal_IntervalDayToSecond >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_Literal_IntervalDayToSecond >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_Literal_Struct*
Arena::CreateMaybeMessage< ::substrait::Expression_Literal_Struct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_Literal_Struct >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_Literal_List*
Arena::CreateMaybeMessage< ::substrait::Expression_Literal_List >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_Literal_List >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_Literal_UserDefined*
Arena::CreateMaybeMessage< ::substrait::Expression_Literal_UserDefined >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_Literal_UserDefined >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_Literal*
Arena::CreateMaybeMessage< ::substrait::Expression_Literal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_Literal >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_ScalarFunction*
Arena::CreateMaybeMessage< ::substrait::Expression_ScalarFunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_ScalarFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_WindowFunction_Bound_Preceding*
Arena::CreateMaybeMessage< ::substrait::Expression_WindowFunction_Bound_Preceding >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_WindowFunction_Bound_Preceding >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_WindowFunction_Bound_Following*
Arena::CreateMaybeMessage< ::substrait::Expression_WindowFunction_Bound_Following >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_WindowFunction_Bound_Following >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_WindowFunction_Bound_CurrentRow*
Arena::CreateMaybeMessage< ::substrait::Expression_WindowFunction_Bound_CurrentRow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_WindowFunction_Bound_CurrentRow >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_WindowFunction_Bound_Unbounded*
Arena::CreateMaybeMessage< ::substrait::Expression_WindowFunction_Bound_Unbounded >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_WindowFunction_Bound_Unbounded >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_WindowFunction_Bound*
Arena::CreateMaybeMessage< ::substrait::Expression_WindowFunction_Bound >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_WindowFunction_Bound >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_WindowFunction*
Arena::CreateMaybeMessage< ::substrait::Expression_WindowFunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_WindowFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_IfThen_IfClause*
Arena::CreateMaybeMessage< ::substrait::Expression_IfThen_IfClause >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_IfThen_IfClause >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_IfThen*
Arena::CreateMaybeMessage< ::substrait::Expression_IfThen >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_IfThen >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_Cast*
Arena::CreateMaybeMessage< ::substrait::Expression_Cast >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_Cast >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_SwitchExpression_IfValue*
Arena::CreateMaybeMessage< ::substrait::Expression_SwitchExpression_IfValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_SwitchExpression_IfValue >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_SwitchExpression*
Arena::CreateMaybeMessage< ::substrait::Expression_SwitchExpression >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_SwitchExpression >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_SingularOrList*
Arena::CreateMaybeMessage< ::substrait::Expression_SingularOrList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_SingularOrList >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_MultiOrList_Record*
Arena::CreateMaybeMessage< ::substrait::Expression_MultiOrList_Record >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_MultiOrList_Record >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_MultiOrList*
Arena::CreateMaybeMessage< ::substrait::Expression_MultiOrList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_MultiOrList >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_EmbeddedFunction_PythonPickleFunction*
Arena::CreateMaybeMessage< ::substrait::Expression_EmbeddedFunction_PythonPickleFunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_EmbeddedFunction_PythonPickleFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_EmbeddedFunction_WebAssemblyFunction*
Arena::CreateMaybeMessage< ::substrait::Expression_EmbeddedFunction_WebAssemblyFunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_EmbeddedFunction_WebAssemblyFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_EmbeddedFunction*
Arena::CreateMaybeMessage< ::substrait::Expression_EmbeddedFunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_EmbeddedFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_ReferenceSegment_MapKey*
Arena::CreateMaybeMessage< ::substrait::Expression_ReferenceSegment_MapKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_ReferenceSegment_MapKey >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_ReferenceSegment_StructField*
Arena::CreateMaybeMessage< ::substrait::Expression_ReferenceSegment_StructField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_ReferenceSegment_StructField >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_ReferenceSegment_ListElement*
Arena::CreateMaybeMessage< ::substrait::Expression_ReferenceSegment_ListElement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_ReferenceSegment_ListElement >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_ReferenceSegment*
Arena::CreateMaybeMessage< ::substrait::Expression_ReferenceSegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_ReferenceSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_MaskExpression_Select*
Arena::CreateMaybeMessage< ::substrait::Expression_MaskExpression_Select >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_MaskExpression_Select >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_MaskExpression_StructSelect*
Arena::CreateMaybeMessage< ::substrait::Expression_MaskExpression_StructSelect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_MaskExpression_StructSelect >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_MaskExpression_StructItem*
Arena::CreateMaybeMessage< ::substrait::Expression_MaskExpression_StructItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_MaskExpression_StructItem >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement*
Arena::CreateMaybeMessage< ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice*
Arena::CreateMaybeMessage< ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem*
Arena::CreateMaybeMessage< ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_MaskExpression_ListSelect*
Arena::CreateMaybeMessage< ::substrait::Expression_MaskExpression_ListSelect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_MaskExpression_ListSelect >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_MaskExpression_MapSelect_MapKey*
Arena::CreateMaybeMessage< ::substrait::Expression_MaskExpression_MapSelect_MapKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_MaskExpression_MapSelect_MapKey >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression*
Arena::CreateMaybeMessage< ::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_MaskExpression_MapSelect*
Arena::CreateMaybeMessage< ::substrait::Expression_MaskExpression_MapSelect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_MaskExpression_MapSelect >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_MaskExpression*
Arena::CreateMaybeMessage< ::substrait::Expression_MaskExpression >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_MaskExpression >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_FieldReference_RootReference*
Arena::CreateMaybeMessage< ::substrait::Expression_FieldReference_RootReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_FieldReference_RootReference >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_FieldReference_OuterReference*
Arena::CreateMaybeMessage< ::substrait::Expression_FieldReference_OuterReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_FieldReference_OuterReference >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_FieldReference*
Arena::CreateMaybeMessage< ::substrait::Expression_FieldReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_FieldReference >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_Subquery_Scalar*
Arena::CreateMaybeMessage< ::substrait::Expression_Subquery_Scalar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_Subquery_Scalar >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_Subquery_InPredicate*
Arena::CreateMaybeMessage< ::substrait::Expression_Subquery_InPredicate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_Subquery_InPredicate >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_Subquery_SetPredicate*
Arena::CreateMaybeMessage< ::substrait::Expression_Subquery_SetPredicate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_Subquery_SetPredicate >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_Subquery_SetComparison*
Arena::CreateMaybeMessage< ::substrait::Expression_Subquery_SetComparison >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_Subquery_SetComparison >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression_Subquery*
Arena::CreateMaybeMessage< ::substrait::Expression_Subquery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression_Subquery >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Expression*
Arena::CreateMaybeMessage< ::substrait::Expression >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Expression >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::SortField*
Arena::CreateMaybeMessage< ::substrait::SortField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::SortField >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::AggregateFunction_ReferenceRel*
Arena::CreateMaybeMessage< ::substrait::AggregateFunction_ReferenceRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::AggregateFunction_ReferenceRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::AggregateFunction*
Arena::CreateMaybeMessage< ::substrait::AggregateFunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::AggregateFunction >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
