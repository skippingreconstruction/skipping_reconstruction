// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: substrait/partition.proto

#include "substrait/partition.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace substrait {
PROTOBUF_CONSTEXPR Partition_Block_Interval::Partition_Block_Interval(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attribute_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.low_)*/nullptr
  , /*decltype(_impl_.high_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Partition_Block_IntervalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Partition_Block_IntervalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Partition_Block_IntervalDefaultTypeInternal() {}
  union {
    Partition_Block_Interval _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Partition_Block_IntervalDefaultTypeInternal _Partition_Block_Interval_default_instance_;
PROTOBUF_CONSTEXPR Partition_Block::Partition_Block(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.attributes_)*/{}
  , /*decltype(_impl_.boundary_)*/{}
  , /*decltype(_impl_.block_id_)*/int64_t{0}
  , /*decltype(_impl_.rows_num_)*/int64_t{0}} {}
struct Partition_BlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Partition_BlockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Partition_BlockDefaultTypeInternal() {}
  union {
    Partition_Block _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Partition_BlockDefaultTypeInternal _Partition_Block_default_instance_;
PROTOBUF_CONSTEXPR Partition::Partition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.blocks_)*/{}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.partition_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PartitionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PartitionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PartitionDefaultTypeInternal() {}
  union {
    Partition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PartitionDefaultTypeInternal _Partition_default_instance_;
PROTOBUF_CONSTEXPR PartitionList::PartitionList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.partitions_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PartitionListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PartitionListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PartitionListDefaultTypeInternal() {}
  union {
    PartitionList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PartitionListDefaultTypeInternal _PartitionList_default_instance_;
}  // namespace substrait
static ::_pb::Metadata file_level_metadata_substrait_2fpartition_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_substrait_2fpartition_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_substrait_2fpartition_2eproto = nullptr;

const uint32_t TableStruct_substrait_2fpartition_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Partition_Block_Interval, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Partition_Block_Interval, _impl_.attribute_),
  PROTOBUF_FIELD_OFFSET(::substrait::Partition_Block_Interval, _impl_.low_),
  PROTOBUF_FIELD_OFFSET(::substrait::Partition_Block_Interval, _impl_.high_),
  PROTOBUF_FIELD_OFFSET(::substrait::Partition_Block, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::substrait::Partition_Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Partition_Block, _impl_.block_id_),
  PROTOBUF_FIELD_OFFSET(::substrait::Partition_Block, _impl_.attributes_),
  PROTOBUF_FIELD_OFFSET(::substrait::Partition_Block, _impl_.boundary_),
  PROTOBUF_FIELD_OFFSET(::substrait::Partition_Block, _impl_.rows_num_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::Partition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::Partition, _impl_.partition_id_),
  PROTOBUF_FIELD_OFFSET(::substrait::Partition, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::substrait::Partition, _impl_.blocks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::PartitionList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::PartitionList, _impl_.partitions_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::substrait::Partition_Block_Interval)},
  { 9, 19, -1, sizeof(::substrait::Partition_Block)},
  { 23, -1, -1, sizeof(::substrait::Partition)},
  { 32, -1, -1, sizeof(::substrait::PartitionList)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::substrait::_Partition_Block_Interval_default_instance_._instance,
  &::substrait::_Partition_Block_default_instance_._instance,
  &::substrait::_Partition_default_instance_._instance,
  &::substrait::_PartitionList_default_instance_._instance,
};

const char descriptor_table_protodef_substrait_2fpartition_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031substrait/partition.proto\022\tsubstrait\032\027"
  "substrait/algebra.proto\"\336\002\n\tPartition\022\024\n"
  "\014partition_id\030\001 \001(\003\022\014\n\004path\030\002 \001(\t\022*\n\006blo"
  "cks\030\003 \003(\0132\032.substrait.Partition.Block\032\200\002"
  "\n\005Block\022\020\n\010block_id\030\001 \001(\003\022\022\n\nattributes\030"
  "\002 \003(\t\0225\n\010boundary\030\003 \003(\0132#.substrait.Part"
  "ition.Block.Interval\022\025\n\010rows_num\030\004 \001(\003H\000"
  "\210\001\001\032v\n\010Interval\022\021\n\tattribute\030\001 \001(\t\022*\n\003lo"
  "w\030\002 \001(\0132\035.substrait.Expression.Literal\022+"
  "\n\004high\030\003 \001(\0132\035.substrait.Expression.Lite"
  "ralB\013\n\t_rows_num\"9\n\rPartitionList\022(\n\npar"
  "titions\030\001 \003(\0132\024.substrait.PartitionBW\n\022i"
  "o.substrait.protoP\001Z*github.com/substrai"
  "t-io/substrait-go/proto\252\002\022Substrait.Prot"
  "obufb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_substrait_2fpartition_2eproto_deps[1] = {
  &::descriptor_table_substrait_2falgebra_2eproto,
};
static ::_pbi::once_flag descriptor_table_substrait_2fpartition_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_substrait_2fpartition_2eproto = {
    false, false, 572, descriptor_table_protodef_substrait_2fpartition_2eproto,
    "substrait/partition.proto",
    &descriptor_table_substrait_2fpartition_2eproto_once, descriptor_table_substrait_2fpartition_2eproto_deps, 1, 4,
    schemas, file_default_instances, TableStruct_substrait_2fpartition_2eproto::offsets,
    file_level_metadata_substrait_2fpartition_2eproto, file_level_enum_descriptors_substrait_2fpartition_2eproto,
    file_level_service_descriptors_substrait_2fpartition_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_substrait_2fpartition_2eproto_getter() {
  return &descriptor_table_substrait_2fpartition_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_substrait_2fpartition_2eproto(&descriptor_table_substrait_2fpartition_2eproto);
namespace substrait {

// ===================================================================

class Partition_Block_Interval::_Internal {
 public:
  static const ::substrait::Expression_Literal& low(const Partition_Block_Interval* msg);
  static const ::substrait::Expression_Literal& high(const Partition_Block_Interval* msg);
};

const ::substrait::Expression_Literal&
Partition_Block_Interval::_Internal::low(const Partition_Block_Interval* msg) {
  return *msg->_impl_.low_;
}
const ::substrait::Expression_Literal&
Partition_Block_Interval::_Internal::high(const Partition_Block_Interval* msg) {
  return *msg->_impl_.high_;
}
void Partition_Block_Interval::clear_low() {
  if (GetArenaForAllocation() == nullptr && _impl_.low_ != nullptr) {
    delete _impl_.low_;
  }
  _impl_.low_ = nullptr;
}
void Partition_Block_Interval::clear_high() {
  if (GetArenaForAllocation() == nullptr && _impl_.high_ != nullptr) {
    delete _impl_.high_;
  }
  _impl_.high_ = nullptr;
}
Partition_Block_Interval::Partition_Block_Interval(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Partition.Block.Interval)
}
Partition_Block_Interval::Partition_Block_Interval(const Partition_Block_Interval& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Partition_Block_Interval* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attribute_){}
    , decltype(_impl_.low_){nullptr}
    , decltype(_impl_.high_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.attribute_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attribute_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_attribute().empty()) {
    _this->_impl_.attribute_.Set(from._internal_attribute(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_low()) {
    _this->_impl_.low_ = new ::substrait::Expression_Literal(*from._impl_.low_);
  }
  if (from._internal_has_high()) {
    _this->_impl_.high_ = new ::substrait::Expression_Literal(*from._impl_.high_);
  }
  // @@protoc_insertion_point(copy_constructor:substrait.Partition.Block.Interval)
}

inline void Partition_Block_Interval::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.attribute_){}
    , decltype(_impl_.low_){nullptr}
    , decltype(_impl_.high_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.attribute_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attribute_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Partition_Block_Interval::~Partition_Block_Interval() {
  // @@protoc_insertion_point(destructor:substrait.Partition.Block.Interval)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Partition_Block_Interval::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attribute_.Destroy();
  if (this != internal_default_instance()) delete _impl_.low_;
  if (this != internal_default_instance()) delete _impl_.high_;
}

void Partition_Block_Interval::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Partition_Block_Interval::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Partition.Block.Interval)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attribute_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.low_ != nullptr) {
    delete _impl_.low_;
  }
  _impl_.low_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.high_ != nullptr) {
    delete _impl_.high_;
  }
  _impl_.high_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Partition_Block_Interval::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string attribute = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_attribute();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "substrait.Partition.Block.Interval.attribute"));
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.Literal low = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_low(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.Expression.Literal high = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_high(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Partition_Block_Interval::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Partition.Block.Interval)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string attribute = 1;
  if (!this->_internal_attribute().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_attribute().data(), static_cast<int>(this->_internal_attribute().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.Partition.Block.Interval.attribute");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_attribute(), target);
  }

  // .substrait.Expression.Literal low = 2;
  if (this->_internal_has_low()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::low(this),
        _Internal::low(this).GetCachedSize(), target, stream);
  }

  // .substrait.Expression.Literal high = 3;
  if (this->_internal_has_high()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::high(this),
        _Internal::high(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Partition.Block.Interval)
  return target;
}

size_t Partition_Block_Interval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Partition.Block.Interval)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string attribute = 1;
  if (!this->_internal_attribute().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_attribute());
  }

  // .substrait.Expression.Literal low = 2;
  if (this->_internal_has_low()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.low_);
  }

  // .substrait.Expression.Literal high = 3;
  if (this->_internal_has_high()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.high_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Partition_Block_Interval::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Partition_Block_Interval::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Partition_Block_Interval::GetClassData() const { return &_class_data_; }


void Partition_Block_Interval::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Partition_Block_Interval*>(&to_msg);
  auto& from = static_cast<const Partition_Block_Interval&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Partition.Block.Interval)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_attribute().empty()) {
    _this->_internal_set_attribute(from._internal_attribute());
  }
  if (from._internal_has_low()) {
    _this->_internal_mutable_low()->::substrait::Expression_Literal::MergeFrom(
        from._internal_low());
  }
  if (from._internal_has_high()) {
    _this->_internal_mutable_high()->::substrait::Expression_Literal::MergeFrom(
        from._internal_high());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Partition_Block_Interval::CopyFrom(const Partition_Block_Interval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Partition.Block.Interval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Partition_Block_Interval::IsInitialized() const {
  return true;
}

void Partition_Block_Interval::InternalSwap(Partition_Block_Interval* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attribute_, lhs_arena,
      &other->_impl_.attribute_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Partition_Block_Interval, _impl_.high_)
      + sizeof(Partition_Block_Interval::_impl_.high_)
      - PROTOBUF_FIELD_OFFSET(Partition_Block_Interval, _impl_.low_)>(
          reinterpret_cast<char*>(&_impl_.low_),
          reinterpret_cast<char*>(&other->_impl_.low_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Partition_Block_Interval::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2fpartition_2eproto_getter, &descriptor_table_substrait_2fpartition_2eproto_once,
      file_level_metadata_substrait_2fpartition_2eproto[0]);
}

// ===================================================================

class Partition_Block::_Internal {
 public:
  using HasBits = decltype(std::declval<Partition_Block>()._impl_._has_bits_);
  static void set_has_rows_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Partition_Block::Partition_Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Partition.Block)
}
Partition_Block::Partition_Block(const Partition_Block& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Partition_Block* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attributes_){from._impl_.attributes_}
    , decltype(_impl_.boundary_){from._impl_.boundary_}
    , decltype(_impl_.block_id_){}
    , decltype(_impl_.rows_num_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.block_id_, &from._impl_.block_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rows_num_) -
    reinterpret_cast<char*>(&_impl_.block_id_)) + sizeof(_impl_.rows_num_));
  // @@protoc_insertion_point(copy_constructor:substrait.Partition.Block)
}

inline void Partition_Block::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attributes_){arena}
    , decltype(_impl_.boundary_){arena}
    , decltype(_impl_.block_id_){int64_t{0}}
    , decltype(_impl_.rows_num_){int64_t{0}}
  };
}

Partition_Block::~Partition_Block() {
  // @@protoc_insertion_point(destructor:substrait.Partition.Block)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Partition_Block::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attributes_.~RepeatedPtrField();
  _impl_.boundary_.~RepeatedPtrField();
}

void Partition_Block::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Partition_Block::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Partition.Block)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.Clear();
  _impl_.boundary_.Clear();
  _impl_.block_id_ = int64_t{0};
  _impl_.rows_num_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Partition_Block::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 block_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.block_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string attributes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_attributes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "substrait.Partition.Block.attributes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .substrait.Partition.Block.Interval boundary = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_boundary(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int64 rows_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_rows_num(&has_bits);
          _impl_.rows_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Partition_Block::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Partition.Block)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 block_id = 1;
  if (this->_internal_block_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_block_id(), target);
  }

  // repeated string attributes = 2;
  for (int i = 0, n = this->_internal_attributes_size(); i < n; i++) {
    const auto& s = this->_internal_attributes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.Partition.Block.attributes");
    target = stream->WriteString(2, s, target);
  }

  // repeated .substrait.Partition.Block.Interval boundary = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_boundary_size()); i < n; i++) {
    const auto& repfield = this->_internal_boundary(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int64 rows_num = 4;
  if (_internal_has_rows_num()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_rows_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Partition.Block)
  return target;
}

size_t Partition_Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Partition.Block)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string attributes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.attributes_.size());
  for (int i = 0, n = _impl_.attributes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.attributes_.Get(i));
  }

  // repeated .substrait.Partition.Block.Interval boundary = 3;
  total_size += 1UL * this->_internal_boundary_size();
  for (const auto& msg : this->_impl_.boundary_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 block_id = 1;
  if (this->_internal_block_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_block_id());
  }

  // optional int64 rows_num = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_rows_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Partition_Block::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Partition_Block::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Partition_Block::GetClassData() const { return &_class_data_; }


void Partition_Block::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Partition_Block*>(&to_msg);
  auto& from = static_cast<const Partition_Block&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Partition.Block)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  _this->_impl_.boundary_.MergeFrom(from._impl_.boundary_);
  if (from._internal_block_id() != 0) {
    _this->_internal_set_block_id(from._internal_block_id());
  }
  if (from._internal_has_rows_num()) {
    _this->_internal_set_rows_num(from._internal_rows_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Partition_Block::CopyFrom(const Partition_Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Partition.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Partition_Block::IsInitialized() const {
  return true;
}

void Partition_Block::InternalSwap(Partition_Block* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  _impl_.boundary_.InternalSwap(&other->_impl_.boundary_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Partition_Block, _impl_.rows_num_)
      + sizeof(Partition_Block::_impl_.rows_num_)
      - PROTOBUF_FIELD_OFFSET(Partition_Block, _impl_.block_id_)>(
          reinterpret_cast<char*>(&_impl_.block_id_),
          reinterpret_cast<char*>(&other->_impl_.block_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Partition_Block::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2fpartition_2eproto_getter, &descriptor_table_substrait_2fpartition_2eproto_once,
      file_level_metadata_substrait_2fpartition_2eproto[1]);
}

// ===================================================================

class Partition::_Internal {
 public:
};

Partition::Partition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.Partition)
}
Partition::Partition(const Partition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Partition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.blocks_){from._impl_.blocks_}
    , decltype(_impl_.path_){}
    , decltype(_impl_.partition_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.partition_id_ = from._impl_.partition_id_;
  // @@protoc_insertion_point(copy_constructor:substrait.Partition)
}

inline void Partition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.blocks_){arena}
    , decltype(_impl_.path_){}
    , decltype(_impl_.partition_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Partition::~Partition() {
  // @@protoc_insertion_point(destructor:substrait.Partition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Partition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.blocks_.~RepeatedPtrField();
  _impl_.path_.Destroy();
}

void Partition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Partition::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Partition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.blocks_.Clear();
  _impl_.path_.ClearToEmpty();
  _impl_.partition_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Partition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 partition_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.partition_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "substrait.Partition.path"));
        } else
          goto handle_unusual;
        continue;
      // repeated .substrait.Partition.Block blocks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Partition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Partition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 partition_id = 1;
  if (this->_internal_partition_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_partition_id(), target);
  }

  // string path = 2;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.Partition.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  // repeated .substrait.Partition.Block blocks = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_blocks_size()); i < n; i++) {
    const auto& repfield = this->_internal_blocks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Partition)
  return target;
}

size_t Partition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Partition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.Partition.Block blocks = 3;
  total_size += 1UL * this->_internal_blocks_size();
  for (const auto& msg : this->_impl_.blocks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string path = 2;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // int64 partition_id = 1;
  if (this->_internal_partition_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_partition_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Partition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Partition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Partition::GetClassData() const { return &_class_data_; }


void Partition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Partition*>(&to_msg);
  auto& from = static_cast<const Partition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Partition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.blocks_.MergeFrom(from._impl_.blocks_);
  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (from._internal_partition_id() != 0) {
    _this->_internal_set_partition_id(from._internal_partition_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Partition::CopyFrom(const Partition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Partition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Partition::IsInitialized() const {
  return true;
}

void Partition::InternalSwap(Partition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.blocks_.InternalSwap(&other->_impl_.blocks_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  swap(_impl_.partition_id_, other->_impl_.partition_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Partition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2fpartition_2eproto_getter, &descriptor_table_substrait_2fpartition_2eproto_once,
      file_level_metadata_substrait_2fpartition_2eproto[2]);
}

// ===================================================================

class PartitionList::_Internal {
 public:
};

PartitionList::PartitionList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.PartitionList)
}
PartitionList::PartitionList(const PartitionList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PartitionList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.partitions_){from._impl_.partitions_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.PartitionList)
}

inline void PartitionList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.partitions_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PartitionList::~PartitionList() {
  // @@protoc_insertion_point(destructor:substrait.PartitionList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PartitionList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.partitions_.~RepeatedPtrField();
}

void PartitionList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PartitionList::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.PartitionList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.partitions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartitionList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .substrait.Partition partitions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_partitions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PartitionList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.PartitionList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.Partition partitions = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_partitions_size()); i < n; i++) {
    const auto& repfield = this->_internal_partitions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.PartitionList)
  return target;
}

size_t PartitionList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.PartitionList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.Partition partitions = 1;
  total_size += 1UL * this->_internal_partitions_size();
  for (const auto& msg : this->_impl_.partitions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PartitionList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PartitionList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PartitionList::GetClassData() const { return &_class_data_; }


void PartitionList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PartitionList*>(&to_msg);
  auto& from = static_cast<const PartitionList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.PartitionList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.partitions_.MergeFrom(from._impl_.partitions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PartitionList::CopyFrom(const PartitionList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.PartitionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartitionList::IsInitialized() const {
  return true;
}

void PartitionList::InternalSwap(PartitionList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.partitions_.InternalSwap(&other->_impl_.partitions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PartitionList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2fpartition_2eproto_getter, &descriptor_table_substrait_2fpartition_2eproto_once,
      file_level_metadata_substrait_2fpartition_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace substrait
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::substrait::Partition_Block_Interval*
Arena::CreateMaybeMessage< ::substrait::Partition_Block_Interval >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Partition_Block_Interval >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Partition_Block*
Arena::CreateMaybeMessage< ::substrait::Partition_Block >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Partition_Block >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Partition*
Arena::CreateMaybeMessage< ::substrait::Partition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Partition >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::PartitionList*
Arena::CreateMaybeMessage< ::substrait::PartitionList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::PartitionList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
