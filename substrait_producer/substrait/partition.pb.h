// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: substrait/partition.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_substrait_2fpartition_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_substrait_2fpartition_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "substrait/algebra.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_substrait_2fpartition_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_substrait_2fpartition_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_substrait_2fpartition_2eproto;
namespace substrait {
class Partition;
struct PartitionDefaultTypeInternal;
extern PartitionDefaultTypeInternal _Partition_default_instance_;
class PartitionList;
struct PartitionListDefaultTypeInternal;
extern PartitionListDefaultTypeInternal _PartitionList_default_instance_;
class Partition_Block;
struct Partition_BlockDefaultTypeInternal;
extern Partition_BlockDefaultTypeInternal _Partition_Block_default_instance_;
class Partition_Block_Interval;
struct Partition_Block_IntervalDefaultTypeInternal;
extern Partition_Block_IntervalDefaultTypeInternal _Partition_Block_Interval_default_instance_;
}  // namespace substrait
PROTOBUF_NAMESPACE_OPEN
template<> ::substrait::Partition* Arena::CreateMaybeMessage<::substrait::Partition>(Arena*);
template<> ::substrait::PartitionList* Arena::CreateMaybeMessage<::substrait::PartitionList>(Arena*);
template<> ::substrait::Partition_Block* Arena::CreateMaybeMessage<::substrait::Partition_Block>(Arena*);
template<> ::substrait::Partition_Block_Interval* Arena::CreateMaybeMessage<::substrait::Partition_Block_Interval>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace substrait {

// ===================================================================

class Partition_Block_Interval final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Partition.Block.Interval) */ {
 public:
  inline Partition_Block_Interval() : Partition_Block_Interval(nullptr) {}
  ~Partition_Block_Interval() override;
  explicit PROTOBUF_CONSTEXPR Partition_Block_Interval(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Partition_Block_Interval(const Partition_Block_Interval& from);
  Partition_Block_Interval(Partition_Block_Interval&& from) noexcept
    : Partition_Block_Interval() {
    *this = ::std::move(from);
  }

  inline Partition_Block_Interval& operator=(const Partition_Block_Interval& from) {
    CopyFrom(from);
    return *this;
  }
  inline Partition_Block_Interval& operator=(Partition_Block_Interval&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Partition_Block_Interval& default_instance() {
    return *internal_default_instance();
  }
  static inline const Partition_Block_Interval* internal_default_instance() {
    return reinterpret_cast<const Partition_Block_Interval*>(
               &_Partition_Block_Interval_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Partition_Block_Interval& a, Partition_Block_Interval& b) {
    a.Swap(&b);
  }
  inline void Swap(Partition_Block_Interval* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Partition_Block_Interval* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Partition_Block_Interval* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Partition_Block_Interval>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Partition_Block_Interval& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Partition_Block_Interval& from) {
    Partition_Block_Interval::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Partition_Block_Interval* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.Partition.Block.Interval";
  }
  protected:
  explicit Partition_Block_Interval(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 1,
    kLowFieldNumber = 2,
    kHighFieldNumber = 3,
  };
  // string attribute = 1;
  void clear_attribute();
  const std::string& attribute() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attribute(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attribute();
  PROTOBUF_NODISCARD std::string* release_attribute();
  void set_allocated_attribute(std::string* attribute);
  private:
  const std::string& _internal_attribute() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attribute(const std::string& value);
  std::string* _internal_mutable_attribute();
  public:

  // .substrait.Expression.Literal low = 2;
  bool has_low() const;
  private:
  bool _internal_has_low() const;
  public:
  void clear_low();
  const ::substrait::Expression_Literal& low() const;
  PROTOBUF_NODISCARD ::substrait::Expression_Literal* release_low();
  ::substrait::Expression_Literal* mutable_low();
  void set_allocated_low(::substrait::Expression_Literal* low);
  private:
  const ::substrait::Expression_Literal& _internal_low() const;
  ::substrait::Expression_Literal* _internal_mutable_low();
  public:
  void unsafe_arena_set_allocated_low(
      ::substrait::Expression_Literal* low);
  ::substrait::Expression_Literal* unsafe_arena_release_low();

  // .substrait.Expression.Literal high = 3;
  bool has_high() const;
  private:
  bool _internal_has_high() const;
  public:
  void clear_high();
  const ::substrait::Expression_Literal& high() const;
  PROTOBUF_NODISCARD ::substrait::Expression_Literal* release_high();
  ::substrait::Expression_Literal* mutable_high();
  void set_allocated_high(::substrait::Expression_Literal* high);
  private:
  const ::substrait::Expression_Literal& _internal_high() const;
  ::substrait::Expression_Literal* _internal_mutable_high();
  public:
  void unsafe_arena_set_allocated_high(
      ::substrait::Expression_Literal* high);
  ::substrait::Expression_Literal* unsafe_arena_release_high();

  // @@protoc_insertion_point(class_scope:substrait.Partition.Block.Interval)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attribute_;
    ::substrait::Expression_Literal* low_;
    ::substrait::Expression_Literal* high_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2fpartition_2eproto;
};
// -------------------------------------------------------------------

class Partition_Block final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Partition.Block) */ {
 public:
  inline Partition_Block() : Partition_Block(nullptr) {}
  ~Partition_Block() override;
  explicit PROTOBUF_CONSTEXPR Partition_Block(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Partition_Block(const Partition_Block& from);
  Partition_Block(Partition_Block&& from) noexcept
    : Partition_Block() {
    *this = ::std::move(from);
  }

  inline Partition_Block& operator=(const Partition_Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Partition_Block& operator=(Partition_Block&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Partition_Block& default_instance() {
    return *internal_default_instance();
  }
  static inline const Partition_Block* internal_default_instance() {
    return reinterpret_cast<const Partition_Block*>(
               &_Partition_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Partition_Block& a, Partition_Block& b) {
    a.Swap(&b);
  }
  inline void Swap(Partition_Block* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Partition_Block* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Partition_Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Partition_Block>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Partition_Block& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Partition_Block& from) {
    Partition_Block::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Partition_Block* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.Partition.Block";
  }
  protected:
  explicit Partition_Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Partition_Block_Interval Interval;

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 2,
    kBoundaryFieldNumber = 3,
    kBlockIdFieldNumber = 1,
    kRowsNumFieldNumber = 4,
  };
  // repeated string attributes = 2;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  const std::string& attributes(int index) const;
  std::string* mutable_attributes(int index);
  void set_attributes(int index, const std::string& value);
  void set_attributes(int index, std::string&& value);
  void set_attributes(int index, const char* value);
  void set_attributes(int index, const char* value, size_t size);
  std::string* add_attributes();
  void add_attributes(const std::string& value);
  void add_attributes(std::string&& value);
  void add_attributes(const char* value);
  void add_attributes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& attributes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_attributes();
  private:
  const std::string& _internal_attributes(int index) const;
  std::string* _internal_add_attributes();
  public:

  // repeated .substrait.Partition.Block.Interval boundary = 3;
  int boundary_size() const;
  private:
  int _internal_boundary_size() const;
  public:
  void clear_boundary();
  ::substrait::Partition_Block_Interval* mutable_boundary(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Partition_Block_Interval >*
      mutable_boundary();
  private:
  const ::substrait::Partition_Block_Interval& _internal_boundary(int index) const;
  ::substrait::Partition_Block_Interval* _internal_add_boundary();
  public:
  const ::substrait::Partition_Block_Interval& boundary(int index) const;
  ::substrait::Partition_Block_Interval* add_boundary();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Partition_Block_Interval >&
      boundary() const;

  // int64 block_id = 1;
  void clear_block_id();
  int64_t block_id() const;
  void set_block_id(int64_t value);
  private:
  int64_t _internal_block_id() const;
  void _internal_set_block_id(int64_t value);
  public:

  // optional int64 rows_num = 4;
  bool has_rows_num() const;
  private:
  bool _internal_has_rows_num() const;
  public:
  void clear_rows_num();
  int64_t rows_num() const;
  void set_rows_num(int64_t value);
  private:
  int64_t _internal_rows_num() const;
  void _internal_set_rows_num(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:substrait.Partition.Block)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> attributes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Partition_Block_Interval > boundary_;
    int64_t block_id_;
    int64_t rows_num_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2fpartition_2eproto;
};
// -------------------------------------------------------------------

class Partition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Partition) */ {
 public:
  inline Partition() : Partition(nullptr) {}
  ~Partition() override;
  explicit PROTOBUF_CONSTEXPR Partition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Partition(const Partition& from);
  Partition(Partition&& from) noexcept
    : Partition() {
    *this = ::std::move(from);
  }

  inline Partition& operator=(const Partition& from) {
    CopyFrom(from);
    return *this;
  }
  inline Partition& operator=(Partition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Partition& default_instance() {
    return *internal_default_instance();
  }
  static inline const Partition* internal_default_instance() {
    return reinterpret_cast<const Partition*>(
               &_Partition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Partition& a, Partition& b) {
    a.Swap(&b);
  }
  inline void Swap(Partition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Partition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Partition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Partition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Partition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Partition& from) {
    Partition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Partition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.Partition";
  }
  protected:
  explicit Partition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Partition_Block Block;

  // accessors -------------------------------------------------------

  enum : int {
    kBlocksFieldNumber = 3,
    kPathFieldNumber = 2,
    kPartitionIdFieldNumber = 1,
  };
  // repeated .substrait.Partition.Block blocks = 3;
  int blocks_size() const;
  private:
  int _internal_blocks_size() const;
  public:
  void clear_blocks();
  ::substrait::Partition_Block* mutable_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Partition_Block >*
      mutable_blocks();
  private:
  const ::substrait::Partition_Block& _internal_blocks(int index) const;
  ::substrait::Partition_Block* _internal_add_blocks();
  public:
  const ::substrait::Partition_Block& blocks(int index) const;
  ::substrait::Partition_Block* add_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Partition_Block >&
      blocks() const;

  // string path = 2;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // int64 partition_id = 1;
  void clear_partition_id();
  int64_t partition_id() const;
  void set_partition_id(int64_t value);
  private:
  int64_t _internal_partition_id() const;
  void _internal_set_partition_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:substrait.Partition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Partition_Block > blocks_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    int64_t partition_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2fpartition_2eproto;
};
// -------------------------------------------------------------------

class PartitionList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.PartitionList) */ {
 public:
  inline PartitionList() : PartitionList(nullptr) {}
  ~PartitionList() override;
  explicit PROTOBUF_CONSTEXPR PartitionList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PartitionList(const PartitionList& from);
  PartitionList(PartitionList&& from) noexcept
    : PartitionList() {
    *this = ::std::move(from);
  }

  inline PartitionList& operator=(const PartitionList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartitionList& operator=(PartitionList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PartitionList& default_instance() {
    return *internal_default_instance();
  }
  static inline const PartitionList* internal_default_instance() {
    return reinterpret_cast<const PartitionList*>(
               &_PartitionList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PartitionList& a, PartitionList& b) {
    a.Swap(&b);
  }
  inline void Swap(PartitionList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartitionList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PartitionList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PartitionList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PartitionList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PartitionList& from) {
    PartitionList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartitionList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.PartitionList";
  }
  protected:
  explicit PartitionList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionsFieldNumber = 1,
  };
  // repeated .substrait.Partition partitions = 1;
  int partitions_size() const;
  private:
  int _internal_partitions_size() const;
  public:
  void clear_partitions();
  ::substrait::Partition* mutable_partitions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Partition >*
      mutable_partitions();
  private:
  const ::substrait::Partition& _internal_partitions(int index) const;
  ::substrait::Partition* _internal_add_partitions();
  public:
  const ::substrait::Partition& partitions(int index) const;
  ::substrait::Partition* add_partitions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Partition >&
      partitions() const;

  // @@protoc_insertion_point(class_scope:substrait.PartitionList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Partition > partitions_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2fpartition_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Partition_Block_Interval

// string attribute = 1;
inline void Partition_Block_Interval::clear_attribute() {
  _impl_.attribute_.ClearToEmpty();
}
inline const std::string& Partition_Block_Interval::attribute() const {
  // @@protoc_insertion_point(field_get:substrait.Partition.Block.Interval.attribute)
  return _internal_attribute();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Partition_Block_Interval::set_attribute(ArgT0&& arg0, ArgT... args) {
 
 _impl_.attribute_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:substrait.Partition.Block.Interval.attribute)
}
inline std::string* Partition_Block_Interval::mutable_attribute() {
  std::string* _s = _internal_mutable_attribute();
  // @@protoc_insertion_point(field_mutable:substrait.Partition.Block.Interval.attribute)
  return _s;
}
inline const std::string& Partition_Block_Interval::_internal_attribute() const {
  return _impl_.attribute_.Get();
}
inline void Partition_Block_Interval::_internal_set_attribute(const std::string& value) {
  
  _impl_.attribute_.Set(value, GetArenaForAllocation());
}
inline std::string* Partition_Block_Interval::_internal_mutable_attribute() {
  
  return _impl_.attribute_.Mutable(GetArenaForAllocation());
}
inline std::string* Partition_Block_Interval::release_attribute() {
  // @@protoc_insertion_point(field_release:substrait.Partition.Block.Interval.attribute)
  return _impl_.attribute_.Release();
}
inline void Partition_Block_Interval::set_allocated_attribute(std::string* attribute) {
  if (attribute != nullptr) {
    
  } else {
    
  }
  _impl_.attribute_.SetAllocated(attribute, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attribute_.IsDefault()) {
    _impl_.attribute_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:substrait.Partition.Block.Interval.attribute)
}

// .substrait.Expression.Literal low = 2;
inline bool Partition_Block_Interval::_internal_has_low() const {
  return this != internal_default_instance() && _impl_.low_ != nullptr;
}
inline bool Partition_Block_Interval::has_low() const {
  return _internal_has_low();
}
inline const ::substrait::Expression_Literal& Partition_Block_Interval::_internal_low() const {
  const ::substrait::Expression_Literal* p = _impl_.low_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression_Literal&>(
      ::substrait::_Expression_Literal_default_instance_);
}
inline const ::substrait::Expression_Literal& Partition_Block_Interval::low() const {
  // @@protoc_insertion_point(field_get:substrait.Partition.Block.Interval.low)
  return _internal_low();
}
inline void Partition_Block_Interval::unsafe_arena_set_allocated_low(
    ::substrait::Expression_Literal* low) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.low_);
  }
  _impl_.low_ = low;
  if (low) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Partition.Block.Interval.low)
}
inline ::substrait::Expression_Literal* Partition_Block_Interval::release_low() {
  
  ::substrait::Expression_Literal* temp = _impl_.low_;
  _impl_.low_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression_Literal* Partition_Block_Interval::unsafe_arena_release_low() {
  // @@protoc_insertion_point(field_release:substrait.Partition.Block.Interval.low)
  
  ::substrait::Expression_Literal* temp = _impl_.low_;
  _impl_.low_ = nullptr;
  return temp;
}
inline ::substrait::Expression_Literal* Partition_Block_Interval::_internal_mutable_low() {
  
  if (_impl_.low_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression_Literal>(GetArenaForAllocation());
    _impl_.low_ = p;
  }
  return _impl_.low_;
}
inline ::substrait::Expression_Literal* Partition_Block_Interval::mutable_low() {
  ::substrait::Expression_Literal* _msg = _internal_mutable_low();
  // @@protoc_insertion_point(field_mutable:substrait.Partition.Block.Interval.low)
  return _msg;
}
inline void Partition_Block_Interval::set_allocated_low(::substrait::Expression_Literal* low) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.low_);
  }
  if (low) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(low));
    if (message_arena != submessage_arena) {
      low = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, low, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.low_ = low;
  // @@protoc_insertion_point(field_set_allocated:substrait.Partition.Block.Interval.low)
}

// .substrait.Expression.Literal high = 3;
inline bool Partition_Block_Interval::_internal_has_high() const {
  return this != internal_default_instance() && _impl_.high_ != nullptr;
}
inline bool Partition_Block_Interval::has_high() const {
  return _internal_has_high();
}
inline const ::substrait::Expression_Literal& Partition_Block_Interval::_internal_high() const {
  const ::substrait::Expression_Literal* p = _impl_.high_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression_Literal&>(
      ::substrait::_Expression_Literal_default_instance_);
}
inline const ::substrait::Expression_Literal& Partition_Block_Interval::high() const {
  // @@protoc_insertion_point(field_get:substrait.Partition.Block.Interval.high)
  return _internal_high();
}
inline void Partition_Block_Interval::unsafe_arena_set_allocated_high(
    ::substrait::Expression_Literal* high) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.high_);
  }
  _impl_.high_ = high;
  if (high) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Partition.Block.Interval.high)
}
inline ::substrait::Expression_Literal* Partition_Block_Interval::release_high() {
  
  ::substrait::Expression_Literal* temp = _impl_.high_;
  _impl_.high_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression_Literal* Partition_Block_Interval::unsafe_arena_release_high() {
  // @@protoc_insertion_point(field_release:substrait.Partition.Block.Interval.high)
  
  ::substrait::Expression_Literal* temp = _impl_.high_;
  _impl_.high_ = nullptr;
  return temp;
}
inline ::substrait::Expression_Literal* Partition_Block_Interval::_internal_mutable_high() {
  
  if (_impl_.high_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression_Literal>(GetArenaForAllocation());
    _impl_.high_ = p;
  }
  return _impl_.high_;
}
inline ::substrait::Expression_Literal* Partition_Block_Interval::mutable_high() {
  ::substrait::Expression_Literal* _msg = _internal_mutable_high();
  // @@protoc_insertion_point(field_mutable:substrait.Partition.Block.Interval.high)
  return _msg;
}
inline void Partition_Block_Interval::set_allocated_high(::substrait::Expression_Literal* high) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.high_);
  }
  if (high) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(high));
    if (message_arena != submessage_arena) {
      high = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, high, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.high_ = high;
  // @@protoc_insertion_point(field_set_allocated:substrait.Partition.Block.Interval.high)
}

// -------------------------------------------------------------------

// Partition_Block

// int64 block_id = 1;
inline void Partition_Block::clear_block_id() {
  _impl_.block_id_ = int64_t{0};
}
inline int64_t Partition_Block::_internal_block_id() const {
  return _impl_.block_id_;
}
inline int64_t Partition_Block::block_id() const {
  // @@protoc_insertion_point(field_get:substrait.Partition.Block.block_id)
  return _internal_block_id();
}
inline void Partition_Block::_internal_set_block_id(int64_t value) {
  
  _impl_.block_id_ = value;
}
inline void Partition_Block::set_block_id(int64_t value) {
  _internal_set_block_id(value);
  // @@protoc_insertion_point(field_set:substrait.Partition.Block.block_id)
}

// repeated string attributes = 2;
inline int Partition_Block::_internal_attributes_size() const {
  return _impl_.attributes_.size();
}
inline int Partition_Block::attributes_size() const {
  return _internal_attributes_size();
}
inline void Partition_Block::clear_attributes() {
  _impl_.attributes_.Clear();
}
inline std::string* Partition_Block::add_attributes() {
  std::string* _s = _internal_add_attributes();
  // @@protoc_insertion_point(field_add_mutable:substrait.Partition.Block.attributes)
  return _s;
}
inline const std::string& Partition_Block::_internal_attributes(int index) const {
  return _impl_.attributes_.Get(index);
}
inline const std::string& Partition_Block::attributes(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Partition.Block.attributes)
  return _internal_attributes(index);
}
inline std::string* Partition_Block::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Partition.Block.attributes)
  return _impl_.attributes_.Mutable(index);
}
inline void Partition_Block::set_attributes(int index, const std::string& value) {
  _impl_.attributes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:substrait.Partition.Block.attributes)
}
inline void Partition_Block::set_attributes(int index, std::string&& value) {
  _impl_.attributes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:substrait.Partition.Block.attributes)
}
inline void Partition_Block::set_attributes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.attributes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:substrait.Partition.Block.attributes)
}
inline void Partition_Block::set_attributes(int index, const char* value, size_t size) {
  _impl_.attributes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:substrait.Partition.Block.attributes)
}
inline std::string* Partition_Block::_internal_add_attributes() {
  return _impl_.attributes_.Add();
}
inline void Partition_Block::add_attributes(const std::string& value) {
  _impl_.attributes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:substrait.Partition.Block.attributes)
}
inline void Partition_Block::add_attributes(std::string&& value) {
  _impl_.attributes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:substrait.Partition.Block.attributes)
}
inline void Partition_Block::add_attributes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.attributes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:substrait.Partition.Block.attributes)
}
inline void Partition_Block::add_attributes(const char* value, size_t size) {
  _impl_.attributes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:substrait.Partition.Block.attributes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Partition_Block::attributes() const {
  // @@protoc_insertion_point(field_list:substrait.Partition.Block.attributes)
  return _impl_.attributes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Partition_Block::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Partition.Block.attributes)
  return &_impl_.attributes_;
}

// repeated .substrait.Partition.Block.Interval boundary = 3;
inline int Partition_Block::_internal_boundary_size() const {
  return _impl_.boundary_.size();
}
inline int Partition_Block::boundary_size() const {
  return _internal_boundary_size();
}
inline void Partition_Block::clear_boundary() {
  _impl_.boundary_.Clear();
}
inline ::substrait::Partition_Block_Interval* Partition_Block::mutable_boundary(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Partition.Block.boundary)
  return _impl_.boundary_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Partition_Block_Interval >*
Partition_Block::mutable_boundary() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Partition.Block.boundary)
  return &_impl_.boundary_;
}
inline const ::substrait::Partition_Block_Interval& Partition_Block::_internal_boundary(int index) const {
  return _impl_.boundary_.Get(index);
}
inline const ::substrait::Partition_Block_Interval& Partition_Block::boundary(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Partition.Block.boundary)
  return _internal_boundary(index);
}
inline ::substrait::Partition_Block_Interval* Partition_Block::_internal_add_boundary() {
  return _impl_.boundary_.Add();
}
inline ::substrait::Partition_Block_Interval* Partition_Block::add_boundary() {
  ::substrait::Partition_Block_Interval* _add = _internal_add_boundary();
  // @@protoc_insertion_point(field_add:substrait.Partition.Block.boundary)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Partition_Block_Interval >&
Partition_Block::boundary() const {
  // @@protoc_insertion_point(field_list:substrait.Partition.Block.boundary)
  return _impl_.boundary_;
}

// optional int64 rows_num = 4;
inline bool Partition_Block::_internal_has_rows_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Partition_Block::has_rows_num() const {
  return _internal_has_rows_num();
}
inline void Partition_Block::clear_rows_num() {
  _impl_.rows_num_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t Partition_Block::_internal_rows_num() const {
  return _impl_.rows_num_;
}
inline int64_t Partition_Block::rows_num() const {
  // @@protoc_insertion_point(field_get:substrait.Partition.Block.rows_num)
  return _internal_rows_num();
}
inline void Partition_Block::_internal_set_rows_num(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.rows_num_ = value;
}
inline void Partition_Block::set_rows_num(int64_t value) {
  _internal_set_rows_num(value);
  // @@protoc_insertion_point(field_set:substrait.Partition.Block.rows_num)
}

// -------------------------------------------------------------------

// Partition

// int64 partition_id = 1;
inline void Partition::clear_partition_id() {
  _impl_.partition_id_ = int64_t{0};
}
inline int64_t Partition::_internal_partition_id() const {
  return _impl_.partition_id_;
}
inline int64_t Partition::partition_id() const {
  // @@protoc_insertion_point(field_get:substrait.Partition.partition_id)
  return _internal_partition_id();
}
inline void Partition::_internal_set_partition_id(int64_t value) {
  
  _impl_.partition_id_ = value;
}
inline void Partition::set_partition_id(int64_t value) {
  _internal_set_partition_id(value);
  // @@protoc_insertion_point(field_set:substrait.Partition.partition_id)
}

// string path = 2;
inline void Partition::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& Partition::path() const {
  // @@protoc_insertion_point(field_get:substrait.Partition.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Partition::set_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:substrait.Partition.path)
}
inline std::string* Partition::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:substrait.Partition.path)
  return _s;
}
inline const std::string& Partition::_internal_path() const {
  return _impl_.path_.Get();
}
inline void Partition::_internal_set_path(const std::string& value) {
  
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* Partition::_internal_mutable_path() {
  
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* Partition::release_path() {
  // @@protoc_insertion_point(field_release:substrait.Partition.path)
  return _impl_.path_.Release();
}
inline void Partition::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:substrait.Partition.path)
}

// repeated .substrait.Partition.Block blocks = 3;
inline int Partition::_internal_blocks_size() const {
  return _impl_.blocks_.size();
}
inline int Partition::blocks_size() const {
  return _internal_blocks_size();
}
inline void Partition::clear_blocks() {
  _impl_.blocks_.Clear();
}
inline ::substrait::Partition_Block* Partition::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Partition.blocks)
  return _impl_.blocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Partition_Block >*
Partition::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Partition.blocks)
  return &_impl_.blocks_;
}
inline const ::substrait::Partition_Block& Partition::_internal_blocks(int index) const {
  return _impl_.blocks_.Get(index);
}
inline const ::substrait::Partition_Block& Partition::blocks(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Partition.blocks)
  return _internal_blocks(index);
}
inline ::substrait::Partition_Block* Partition::_internal_add_blocks() {
  return _impl_.blocks_.Add();
}
inline ::substrait::Partition_Block* Partition::add_blocks() {
  ::substrait::Partition_Block* _add = _internal_add_blocks();
  // @@protoc_insertion_point(field_add:substrait.Partition.blocks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Partition_Block >&
Partition::blocks() const {
  // @@protoc_insertion_point(field_list:substrait.Partition.blocks)
  return _impl_.blocks_;
}

// -------------------------------------------------------------------

// PartitionList

// repeated .substrait.Partition partitions = 1;
inline int PartitionList::_internal_partitions_size() const {
  return _impl_.partitions_.size();
}
inline int PartitionList::partitions_size() const {
  return _internal_partitions_size();
}
inline void PartitionList::clear_partitions() {
  _impl_.partitions_.Clear();
}
inline ::substrait::Partition* PartitionList::mutable_partitions(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.PartitionList.partitions)
  return _impl_.partitions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Partition >*
PartitionList::mutable_partitions() {
  // @@protoc_insertion_point(field_mutable_list:substrait.PartitionList.partitions)
  return &_impl_.partitions_;
}
inline const ::substrait::Partition& PartitionList::_internal_partitions(int index) const {
  return _impl_.partitions_.Get(index);
}
inline const ::substrait::Partition& PartitionList::partitions(int index) const {
  // @@protoc_insertion_point(field_get:substrait.PartitionList.partitions)
  return _internal_partitions(index);
}
inline ::substrait::Partition* PartitionList::_internal_add_partitions() {
  return _impl_.partitions_.Add();
}
inline ::substrait::Partition* PartitionList::add_partitions() {
  ::substrait::Partition* _add = _internal_add_partitions();
  // @@protoc_insertion_point(field_add:substrait.PartitionList.partitions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Partition >&
PartitionList::partitions() const {
  // @@protoc_insertion_point(field_list:substrait.PartitionList.partitions)
  return _impl_.partitions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace substrait

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_substrait_2fpartition_2eproto
